FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 07 2A LJMP  _OneWire_DS_ISR    (0157)     ljmp	_OneWire_DS_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 79 LJMP  _SPIM_ISR          (0161)     ljmp	_SPIM_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 04 7F LJMP  _UART_TX_ISR       (0173)     ljmp	_UART_TX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 04 80 LJMP  _UART_RX_ISR       (0177)     ljmp	_UART_RX_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 06 94 LJMP  _SleepTimer_ISR    (0185)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 75    MOV   A,0x75             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [OneWire_DS_bCRC8Value+170],0x0(0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [OneWire_DS_bCRC8Value+171],0x0(0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 1A MOV   REG[0xE0],0x1A     (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 04 09 LCALL 0x0409             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 0A 1C MOV   [__r0],0x1C        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 0A 60 CMP   [__r0],0x60        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 0A    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 03    MOV   A,0x3              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 42    MOV   X,0x42             (0368)     mov  X,<__idata_start
00AC: 55 0A 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 0A 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 0A    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
00C0: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C2: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C5: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00C7: 62 E0 18 MOV   REG[0xE0],0x18     (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CA: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CC: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00CF: 7C 0E 72 LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D2: 8F FF    JMP   0x00D2             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D4: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D6: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0344: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_jp_exercice3_Bank1
                                        (0019) export LoadConfigTBL_jp_exercice3_Bank0
                                        (0020) export LoadConfigTBL_jp_exercice3_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_jp_exercice3_Bank0:
                                        (0023) ;  Instance name I2CM, User Module I2Cm
                                        (0024) ;  Instance name LCD, User Module LCD
                                        (0025) ;  Instance name OneWire_DS, User Module OneWire
                                        (0026) ;       Instance name OneWire_DS, Block Name BitClk(DBB01)
                                        (0027) 	db		27h, 00h		;OneWire_DS_BITCLK_CONTROL_REG(DBB01CR0)
                                        (0028) 	db		25h, 00h		;OneWire_DS_BITCLK_PERIOD_REG (DBB01DR1)
                                        (0029) 	db		26h, 00h		;OneWire_DS_BITCLK_COMPARE_REG(DBB01DR2)
                                        (0030) ;       Instance name OneWire_DS, Block Name XCVR(DCB02)
                                        (0031) 	db		2bh, 00h		;OneWire_DS_XCVR_CONTROL_REG(DCB02CR0)
                                        (0032) 	db		29h, 00h		;OneWire_DS_XCVR_TX_BUFFER_REG(DCB02DR1)
                                        (0033) 	db		2ah, 00h		;OneWire_DS_XCVR_RX_BUFFER_REG(DCB02DR2)
                                        (0034) ;  Instance name SHADOW_P1, User Module SHADOWREGS
                                        (0035) ;  Instance name SPIM, User Module SPIM
                                        (0036) ;       Instance name SPIM, Block Name SPIM(DCB03)
                                        (0037) 	db		2fh, 00h		;SPIM_CONTROL_REG  (DCB03CR0)
                                        (0038) 	db		2dh, 00h		;SPIM_TX_BUFFER_REG(DCB03DR1)
                                        (0039) 	db		2eh, 00h		;SPIM_RX_BUFFER_REG(DCB03DR2)
                                        (0040) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0041) ;  Instance name UART, User Module UART
                                        (0042) ;       Instance name UART, Block Name RX(DCB13)
                                        (0043) 	db		3fh, 00h		;UART_RX_CONTROL_REG(DCB13CR0)
                                        (0044) 	db		3dh, 00h		;UART_(DCB13DR1)
                                        (0045) 	db		3eh, 00h		;UART_RX_BUFFER_REG (DCB13DR2)
                                        (0046) ;       Instance name UART, Block Name TX(DCB12)
                                        (0047) 	db		3bh, 00h		;UART_TX_CONTROL_REG(DCB12CR0)
                                        (0048) 	db		39h, 00h		;UART_TX_BUFFER_REG (DCB12DR1)
                                        (0049) 	db		3ah, 00h		;UART_(DCB12DR2)
                                        (0050) ;  Global Register values Bank 0
                                        (0051) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0052) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0053) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0054) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0055) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0056) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0057) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0058) 	db		b0h, 8ch		; Row_0_InputMux register (RDI0RI)
                                        (0059) 	db		b1h, 02h		; Row_0_InputSync register (RDI0SYN)
                                        (0060) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0061) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0062) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0063) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0064) 	db		b6h, 88h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0065) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0066) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0067) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0068) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0069) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0070) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0071) 	db		beh, 04h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0072) 	db		ffh
                                        (0073) LoadConfigTBL_jp_exercice3_Bank1:
                                        (0074) ;  Instance name I2CM, User Module I2Cm
                                        (0075) ;  Instance name LCD, User Module LCD
                                        (0076) ;  Instance name OneWire_DS, User Module OneWire
                                        (0077) ;       Instance name OneWire_DS, Block Name BitClk(DBB01)
                                        (0078) 	db		24h, 21h		;OneWire_DS_BITCLK_FUNC_REG(DBB01FN)
                                        (0079) 	db		25h, 15h		;OneWire_DS_BITCLK_INPUT_REG(DBB01IN)
                                        (0080) 	db		26h, 00h		;OneWire_DS_BITCLK_OUTPUT_REG(DBB01OU)
                                        (0081) ;       Instance name OneWire_DS, Block Name XCVR(DCB02)
                                        (0082) 	db		28h, 16h		;OneWire_DS_XCVR_FUNC_REG(DCB02FN)
                                        (0083) 	db		29h, f3h		;OneWire_DS_XCVR_INPUT_REG(DCB02IN)
                                        (0084) 	db		2ah, 07h		;OneWire_DS_XCVR_OUTPUT_REG(DCB02OU)
                                        (0085) ;  Instance name SHADOW_P1, User Module SHADOWREGS
                                        (0086) ;  Instance name SPIM, User Module SPIM
                                        (0087) ;       Instance name SPIM, Block Name SPIM(DCB03)
                                        (0088) 	db		2ch, 06h		;SPIM_FUNCTION_REG (DCB03FN)
                                        (0089) 	db		2dh, d6h		;SPIM_INPUT_REG    (DCB03IN)
                                        (0090) 	db		2eh, 70h		;SPIM_OUTPUT_REG   (DCB03OU)
                                        (0091) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0092) ;  Instance name UART, User Module UART
                                        (0093) ;       Instance name UART, Block Name RX(DCB13)
                                        (0094) 	db		3ch, 05h		;UART_RX_FUNC_REG   (DCB13FN)
                                        (0095) 	db		3dh, 01h		;UART_RX_INPUT_REG  (DCB13IN)
                                        (0096) 	db		3eh, 40h		;UART_RX_OUTPUT_REG (DCB13OU)
                                        (0097) ;       Instance name UART, Block Name TX(DCB12)
                                        (0098) 	db		38h, 0dh		;UART_TX_FUNC_REG   (DCB12FN)
                                        (0099) 	db		39h, 01h		;UART_TX_INPUT_REG  (DCB12IN)
                                        (0100) 	db		3ah, 46h		;UART_TX_OUTPUT_REG (DCB12OU)
                                        (0101) ;  Global Register values Bank 1
                                        (0102) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0103) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0104) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0105) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0106) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0107) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0108) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0109) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0110) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0111) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0112) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0113) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0114) 	db		e1h, 7eh		; OscillatorControl_1 register (OSC_CR1)
                                        (0115) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0116) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0117) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0118) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0119) 	db		ffh
                                        (0120) AREA psoc_config(rom, rel)
                                        (0121) LoadConfigTBL_jp_exercice3_Ordered:
                                        (0122) ;  Ordered Global Register values
                                        (0123) 	M8C_SetBank0
0346: 62 00 00 MOV   REG[0x0],0x0       (0124) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0349: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
034B: 62 00 01 MOV   REG[0x0],0x1       (0126) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
034E: 62 01 FE MOV   REG[0x1],0xFE      (0127) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
0351: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
0353: 62 03 3E MOV   REG[0x3],0x3E      (0129) 	mov	reg[03h], 3eh		; Port_0_DriveMode_2 register (PRT0DM2)
0356: 62 02 01 MOV   REG[0x2],0x1       (0130) 	mov	reg[02h], 01h		; Port_0_GlobalSelect register (PRT0GS)
0359: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
035B: 62 02 00 MOV   REG[0x2],0x0       (0132) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
035E: 62 03 00 MOV   REG[0x3],0x0       (0133) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0361: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
0363: 62 01 00 MOV   REG[0x1],0x0       (0135) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0366: 62 04 90 MOV   REG[0x4],0x90      (0136) 	mov	reg[04h], 90h		; Port_1_Data register (PRT1DR)
0369: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
036B: 62 04 D4 MOV   REG[0x4],0xD4      (0138) 	mov	reg[04h], d4h		; Port_1_DriveMode_0 register (PRT1DM0)
036E: 62 05 AB MOV   REG[0x5],0xAB      (0139) 	mov	reg[05h], abh		; Port_1_DriveMode_1 register (PRT1DM1)
0371: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
0373: 62 07 83 MOV   REG[0x7],0x83      (0141) 	mov	reg[07h], 83h		; Port_1_DriveMode_2 register (PRT1DM2)
0376: 62 06 EC MOV   REG[0x6],0xEC      (0142) 	mov	reg[06h], ech		; Port_1_GlobalSelect register (PRT1GS)
0379: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
037B: 62 06 00 MOV   REG[0x6],0x0       (0144) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
037E: 62 07 00 MOV   REG[0x7],0x0       (0145) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0381: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
0383: 62 05 00 MOV   REG[0x5],0x0       (0147) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0386: 62 08 00 MOV   REG[0x8],0x0       (0148) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0389: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
038B: 62 08 7F MOV   REG[0x8],0x7F      (0150) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
038E: 62 09 80 MOV   REG[0x9],0x80      (0151) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0391: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
0393: 62 0B 80 MOV   REG[0xB],0x80      (0153) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0396: 62 0A 00 MOV   REG[0xA],0x0       (0154) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0399: 71 10    OR    F,0x10             
                                        (0155) 	M8C_SetBank1
039B: 62 0A 00 MOV   REG[0xA],0x0       (0156) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
039E: 62 0B 00 MOV   REG[0xB],0x0       (0157) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
03A1: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
03A3: 62 09 00 MOV   REG[0x9],0x0       (0159) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
03A6: 62 0C 00 MOV   REG[0xC],0x0       (0160) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
03A9: 71 10    OR    F,0x10             
                                        (0161) 	M8C_SetBank1
03AB: 62 0C 00 MOV   REG[0xC],0x0       (0162) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
03AE: 62 0D 00 MOV   REG[0xD],0x0       (0163) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
03B1: 70 EF    AND   F,0xEF             
                                        (0164) 	M8C_SetBank0
03B3: 62 0F 00 MOV   REG[0xF],0x0       (0165) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
03B6: 62 0E 00 MOV   REG[0xE],0x0       (0166) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
03B9: 71 10    OR    F,0x10             
                                        (0167) 	M8C_SetBank1
03BB: 62 0E 00 MOV   REG[0xE],0x0       (0168) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
03BE: 62 0F 00 MOV   REG[0xF],0x0       (0169) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
03C1: 70 EF    AND   F,0xEF             
                                        (0170) 	M8C_SetBank0
03C3: 62 0D 00 MOV   REG[0xD],0x0       (0171) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
03C6: 62 10 00 MOV   REG[0x10],0x0      (0172) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
03C9: 71 10    OR    F,0x10             
                                        (0173) 	M8C_SetBank1
03CB: 62 10 00 MOV   REG[0x10],0x0      (0174) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
03CE: 62 11 00 MOV   REG[0x11],0x0      (0175) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
03D1: 70 EF    AND   F,0xEF             
                                        (0176) 	M8C_SetBank0
03D3: 62 13 00 MOV   REG[0x13],0x0      (0177) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
03D6: 62 12 00 MOV   REG[0x12],0x0      (0178) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
03D9: 71 10    OR    F,0x10             
                                        (0179) 	M8C_SetBank1
03DB: 62 12 00 MOV   REG[0x12],0x0      (0180) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
03DE: 62 13 00 MOV   REG[0x13],0x0      (0181) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
03E1: 70 EF    AND   F,0xEF             
                                        (0182) 	M8C_SetBank0
03E3: 62 11 00 MOV   REG[0x11],0x0      (0183) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
03E6: 62 14 00 MOV   REG[0x14],0x0      (0184) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
03E9: 71 10    OR    F,0x10             
                                        (0185) 	M8C_SetBank1
03EB: 62 14 00 MOV   REG[0x14],0x0      (0186) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
03EE: 62 15 00 MOV   REG[0x15],0x0      (0187) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
03F1: 70 EF    AND   F,0xEF             
                                        (0188) 	M8C_SetBank0
03F3: 62 17 00 MOV   REG[0x17],0x0      (0189) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
03F6: 62 16 00 MOV   REG[0x16],0x0      (0190) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
03F9: 71 10    OR    F,0x10             
                                        (0191) 	M8C_SetBank1
03FB: 62 16 00 MOV   REG[0x16],0x0      (0192) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
03FE: 62 17 00 MOV   REG[0x17],0x0      (0193) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0401: 70 EF    AND   F,0xEF             
                                        (0194) 	M8C_SetBank0
0403: 62 15 00 MOV   REG[0x15],0x0      (0195) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0406: 70 EF    AND   F,0xEF             
                                        (0196) 	M8C_SetBank0
0408: 7F       RET                      (0197) 	ret
                                        (0198) 
                                        (0199) 
                                        (0200) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_jp_exercice3
                                        (0026) export _LoadConfig_jp_exercice3
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_0_DriveMode_2_SHADE
                                        (0034) export _Port_0_DriveMode_2_SHADE
                                        (0035) export Port_1_Data_SHADE
                                        (0036) export _Port_1_Data_SHADE
                                        (0037) export Port_2_Data_SHADE
                                        (0038) export _Port_2_Data_SHADE
                                        (0039) export Port_2_DriveMode_0_SHADE
                                        (0040) export _Port_2_DriveMode_0_SHADE
                                        (0041) export Port_2_DriveMode_1_SHADE
                                        (0042) export _Port_2_DriveMode_1_SHADE
                                        (0043) 
                                        (0044) 
                                        (0045) export NO_SHADOW
                                        (0046) export _NO_SHADOW
                                        (0047) 
                                        (0048) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0049) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0050) 
                                        (0051) AREA psoc_config(rom, rel)
                                        (0052) 
                                        (0053) ;---------------------------------------------------------------------------
                                        (0054) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0055) ;                  parameters handled by boot code, like CPU speed). This
                                        (0056) ;                  function can be called from user code, but typically it
                                        (0057) ;                  is only called from boot.
                                        (0058) ;
                                        (0059) ;       INPUTS: None.
                                        (0060) ;      RETURNS: Nothing.
                                        (0061) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0062) ;               In the large memory model currently only the page
                                        (0063) ;               pointer registers listed below are modified.  This does
                                        (0064) ;               not guarantee that in future implementations of this
                                        (0065) ;               function other page pointer registers will not be
                                        (0066) ;               modified.
                                        (0067) ;          
                                        (0068) ;               Page Pointer Registers Modified: 
                                        (0069) ;               CUR_PP
                                        (0070) ;
                                        (0071) _LoadConfigInit:
                                        (0072)  LoadConfigInit:
                                        (0073)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0074)     
0409: 55 14 00 MOV   [0x14],0x0         (0075) 	mov		[Port_0_Data_SHADE], 0h
040C: 55 17 01 MOV   [0x17],0x1         (0076) 	mov		[Port_0_DriveMode_0_SHADE], 1h
040F: 55 18 FE MOV   [0x18],0xFE        (0077) 	mov		[Port_0_DriveMode_1_SHADE], feh
0412: 55 19 3E MOV   [0x19],0x3E        (0078) 	mov		[Port_0_DriveMode_2_SHADE], 3eh
0415: 55 15 90 MOV   [0x15],0x90        (0079) 	mov		[Port_1_Data_SHADE], 90h
0418: 55 16 00 MOV   [0x16],0x0         (0080) 	mov		[Port_2_Data_SHADE], 0h
041B: 55 1A 7F MOV   [0x1A],0x7F        (0081) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
041E: 55 1B 80 MOV   [0x1B],0x80        (0082) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0083) 
0421: 7C 04 28 LCALL 0x0428             (0084) 	lcall	LoadConfig_jp_exercice3
0424: 7C 03 44 LCALL 0x0344             (0085) 	lcall	LoadConfigTBL_jp_exercice3_Ordered
                                        (0086) 
                                        (0087) 
                                        (0088)     RAM_EPILOGUE RAM_USE_CLASS_4
0427: 7F       RET                      (0089)     ret
                                        (0090) 
                                        (0091) ;---------------------------------------------------------------------------
                                        (0092) ; Load Configuration jp_exercice3
                                        (0093) ;
                                        (0094) ;    Load configuration registers for jp_exercice3.
                                        (0095) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0096) ;
                                        (0097) ;       INPUTS: None.
                                        (0098) ;      RETURNS: Nothing.
                                        (0099) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0100) ;               modified as may the Page Pointer registers!
                                        (0101) ;               In the large memory model currently only the page
                                        (0102) ;               pointer registers listed below are modified.  This does
                                        (0103) ;               not guarantee that in future implementations of this
                                        (0104) ;               function other page pointer registers will not be
                                        (0105) ;               modified.
                                        (0106) ;          
                                        (0107) ;               Page Pointer Registers Modified: 
                                        (0108) ;               CUR_PP
                                        (0109) ;
                                        (0110) _LoadConfig_jp_exercice3:
                                        (0111)  LoadConfig_jp_exercice3:
                                        (0112)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0113) 
0428: 10       PUSH  X                  (0114) 	push	x
0429: 70 EF    AND   F,0xEF             
                                        (0115)     M8C_SetBank0                    ; Force bank 0
042B: 50 00    MOV   A,0x0              (0116)     mov     a, 0                    ; Specify bank 0
042D: 67       ASR   A                  (0117)     asr     a                       ; Store in carry flag
                                        (0118)                                     ; Load bank 0 table:
042E: 50 01    MOV   A,0x1              (0119)     mov     A, >LoadConfigTBL_jp_exercice3_Bank0
0430: 57 62    MOV   X,0x62             (0120)     mov     X, <LoadConfigTBL_jp_exercice3_Bank0
0432: 7C 04 43 LCALL 0x0443             (0121)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0122) 
0435: 50 01    MOV   A,0x1              (0123)     mov     a, 1                    ; Specify bank 1
0437: 67       ASR   A                  (0124)     asr     a                       ; Store in carry flag
                                        (0125)                                     ; Load bank 1 table:
0438: 50 01    MOV   A,0x1              (0126)     mov     A, >LoadConfigTBL_jp_exercice3_Bank1
043A: 57 AB    MOV   X,0xAB             (0127)     mov     X, <LoadConfigTBL_jp_exercice3_Bank1
043C: 7C 04 43 LCALL 0x0443             (0128)     lcall   LoadConfig              ; Load the bank 1 values
043F: 70 EF    AND   F,0xEF             
                                        (0129) 
                                        (0130)     M8C_SetBank0                    ; Force return to bank 0
0441: 20       POP   X                  (0131) 	pop		x
                                        (0132) 
                                        (0133)     RAM_EPILOGUE RAM_USE_CLASS_4
0442: 7F       RET                      (0134)     ret
                                        (0135) 
                                        (0136) 
                                        (0137) 
                                        (0138) 
                                        (0139) ;---------------------------------------------------------------------------
                                        (0140) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0141) ;              pairs. Terminate on address=0xFF.
                                        (0142) ;
                                        (0143) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0144) ;           Flag Register Carry bit encodes the Register Bank
                                        (0145) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0146) ;
                                        (0147) ;  RETURNS: nothing.
                                        (0148) ;
                                        (0149) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0150) ;                X-3 Temporary store for register address
                                        (0151) ;                X-2 LSB of config table address
                                        (0152) ;                X-1 MSB of config table address
                                        (0153) ;
                                        (0154) LoadConfig:
                                        (0155)     RAM_PROLOGUE RAM_USE_CLASS_2
0443: 38 02    ADD   SP,0x2             (0156)     add     SP, 2                   ; Set up local vars
0445: 10       PUSH  X                  (0157)     push    X                       ; Save config table address on stack
0446: 08       PUSH  A                  (0158)     push    A
0447: 4F       MOV   X,SP               (0159)     mov     X, SP
0448: 56 FC 00 MOV   [X-4],0x0          (0160)     mov     [X-4], 0                ; Set default Destination to Bank 0
044B: D0 04    JNC   0x0450             (0161)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
044D: 56 FC 01 MOV   [X-4],0x1          (0162)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0163) .BankSelectSaved:
0450: 18       POP   A                  (0164)     pop     A
0451: 20       POP   X                  (0165)     pop     X
0452: 70 EF    AND   F,0xEF             
0454: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0166) 
                                        (0167) LoadConfigLp:
                                        (0168)     M8C_SetBank0                    ; Switch to bank 0
                                        (0169)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0457: 10       PUSH  X                  (0170)     push    X                       ; Preserve the config table address
0458: 08       PUSH  A                  (0171)     push    A
0459: 28       ROMX                     (0172)     romx                            ; Load register address from table
045A: 39 FF    CMP   A,0xFF             (0173)     cmp     A, END_CONFIG_TABLE     ; End of table?
045C: A0 1F    JZ    0x047C             (0174)     jz      EndLoadConfig           ;   Yes, go wrap it up
045E: 4F       MOV   X,SP               (0175)     mov     X, SP                   ;
045F: 48 FC 01 TST   [X-4],0x1          (0176)     tst     [X-4], 1                ; Loading IO Bank 1?
0462: A0 03    JZ    0x0466             (0177)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0464: 71 10    OR    F,0x10             
                                        (0178)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0179) .IOBankNowSet:
0466: 54 FD    MOV   [X-3],A            (0180)     mov     [X-3], A                ; Stash the register address
0468: 18       POP   A                  (0181)     pop     A                       ; Retrieve the table address
0469: 20       POP   X                  (0182)     pop     X
046A: 75       INC   X                  (0183)     inc     X                       ; Advance to the data byte
046B: 09 00    ADC   A,0x0              (0184)     adc     A, 0
046D: 10       PUSH  X                  (0185)     push    X                       ; Save the config table address again
046E: 08       PUSH  A                  (0186)     push    A
046F: 28       ROMX                     (0187)     romx                            ; load config data from the table
0470: 4F       MOV   X,SP               (0188)     mov     X, SP                   ; retrieve the register address
0471: 59 FD    MOV   X,[X-3]            (0189)     mov     X, [X-3]
0473: 61 00    MOV   REG[X+0x0],A       (0190)     mov     reg[X], A               ; Configure the register
0475: 18       POP   A                  (0191)     pop     A                       ; retrieve the table address
0476: 20       POP   X                  (0192)     pop     X
0477: 75       INC   X                  (0193)     inc     X                       ; advance to next table entry
0478: 09 00    ADC   A,0x0              (0194)     adc     A, 0
047A: 8F D7    JMP   0x0452             (0195)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0196) EndLoadConfig:
047C: 38 FC    ADD   SP,0xFC            (0197)     add     SP, -4
                                        (0198)     RAM_EPILOGUE RAM_USE_CLASS_2
047E: 7F       RET                      (0199)     ret
                                        (0200) 
                                        (0201) AREA InterruptRAM(ram, rel)
                                        (0202) 
                                        (0203) NO_SHADOW:
                                        (0204) _NO_SHADOW:
                                        (0205) ; write only register shadows
                                        (0206) _Port_0_Data_SHADE:
                                        (0207) Port_0_Data_SHADE:	BLK	1
                                        (0208) _Port_1_Data_SHADE:
                                        (0209) Port_1_Data_SHADE:	BLK	1
                                        (0210) _Port_2_Data_SHADE:
                                        (0211) Port_2_Data_SHADE:	BLK	1
                                        (0212) _Port_0_DriveMode_0_SHADE:
                                        (0213) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0214) _Port_0_DriveMode_1_SHADE:
                                        (0215) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0216) _Port_0_DriveMode_2_SHADE:
                                        (0217) Port_0_DriveMode_2_SHADE:	BLK	1
                                        (0218) _Port_2_DriveMode_0_SHADE:
                                        (0219) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0220) _Port_2_DriveMode_1_SHADE:
                                        (0221) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0222) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
047F: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
0480: 08       PUSH  A                  (0180)    push A
0481: 10       PUSH  X                  (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
0482: 58 0C    MOV   X,[0xC]            (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0484: 5D 3F    MOV   A,REG[0x3F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
0486: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
0487: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
0489: B0 04    JNZ   0x048E             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
048B: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
048C: 80 40    JMP   0x04CD             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
048E: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
048F: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
0491: A0 12    JZ    0x04A4             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
0493: 2C 0B    OR    [0xB],A            (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0495: 49 3E 00 TST   REG[0x3E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
0498: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
049A: A0 32    JZ    0x04CD             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
049C: 41 3F FE AND   REG[0x3F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
049F: 43 3F 01 OR    REG[0x3F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
04A2: 80 2A    JMP   0x04CD             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
04A4: 5D 3E    MOV   A,REG[0x3E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
04A6: 47 0B 01 TST   [0xB],0x1          (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
04A9: B0 23    JNZ   0x04CD             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
04AB: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
04AD: B0 09    JNZ   0x04B7             (0223)    jnz  .UARTRX_CHK_BACKSPACE
04AF: 2E 0B 01 OR    [0xB],0x1          (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
04B2: 56 60 00 MOV   [X+96],0x0         (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
04B5: 80 17    JMP   0x04CD             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
04B7: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
04B9: C0 13    JC    0x04CD             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
04BB: 3C 0C 0F CMP   [0xC],0xF          (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
04BE: C0 09    JC    0x04C8             (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
04C0: 56 60 00 MOV   [X+96],0x0         (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
04C3: 2E 0B 10 OR    [0xB],0x10         (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
04C6: 80 06    JMP   0x04CD             (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
04C8: 54 60    MOV   [X+96],A           (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
04CA: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
04CB: 5A 0C    MOV   [0xC],X            (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
04CD: 20       POP   X                  (0275)    pop  X
04CE: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
04CF: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
04D0: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
04D3: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
04D6: 7F       RET                      (0182)    ret
04D7: 41 E1 BF AND   REG[0xE1],0xBF     
04DA: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
04DD: 7F       RET                      (0214)    ret
04DE: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
04E0: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
04E2: A0 07    JZ    0x04EA             (0249)    jz    .SetModeRegEmpty
04E4: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
04E7: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
04E9: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
04EA: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
04ED: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
04EF: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
04F0: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
04F2: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
04F4: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
04F6: 91 0E    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
04F8: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
04F9: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
04FC: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
04FF: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0500: 60 39    MOV   REG[0x39],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0502: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0503: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0505: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0506: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0508: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0509: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
050B: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
050C: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
050E: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0510: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0512: A0 06    JZ    0x0519             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0514: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0517: 80 04    JMP   0x051C             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0519: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
051C: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
051E: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
051F: 08       PUSH  A                  (0536)    push A
0520: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0522: A0 06    JZ    0x0529             (0538)    jz   .DisRxInt
0524: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0527: 80 04    JMP   0x052C             (0541)    jmp  .CheckTxInt
0529: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
052C: 18       POP   A                  (0547)    pop  A
052D: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
052F: A0 06    JZ    0x0536             (0549)    jz   .DisTxInt
0531: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0534: 80 04    JMP   0x0539             (0552)    jmp  .End_IntCntl
0536: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0539: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
054A: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
054B: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
054C: 67       ASR   A                  (0603)    asr   A
054D: 67       ASR   A                  (0604)    asr   A
054E: 67       ASR   A                  (0605)    asr   A
054F: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0551: FF E7    INDEX 0x053A             (0607)    index UART_HEX_STR                  ; Get Hex value
0553: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0555: 18       POP   A                  (0609)    pop   A                             ; Restore value
0556: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0558: FF E0    INDEX 0x053A             (0611)    index UART_HEX_STR                  ; Get Hex value
055A: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
055C: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
055D: 4B       SWAP  A,X                (0645)    swap  A,X
055E: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0560: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0561: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0563: 7F       RET                      (0650)    ret
0564: 49 3B 10 TST   REG[0x3B],0x10     
0567: AF FC    JZ    _UART_PutChar      
0569: 60 39    MOV   REG[0x39],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
056B: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
056C: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
056F: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0571: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0573: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0574: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0576: 08       PUSH  A                  (0756)    push A
0577: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0579: B0 04    JNZ   0x057E             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
057B: 18       POP   A                  (0759)    pop  A
057C: 80 0B    JMP   0x0588             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
057E: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0580: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0581: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0582: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0584: B0 03    JNZ   0x0588             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0586: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0587: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0588: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
058A: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
058B: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
058D: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
058F: 08       PUSH  A                  (0819)    push A
0590: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0592: B0 07    JNZ   0x059A             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0594: 18       POP   A                  (0822)    pop  A
0595: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0597: 4B       SWAP  A,X                (0824)    swap A,X
0598: 80 07    JMP   0x05A0             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
059A: 18       POP   A                  (0828)    pop  A
059B: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
059D: 4B       SWAP  A,X                (0830)    swap A,X
059E: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
05A0: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
05A1: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
05A3: A0 06    JZ    0x05AA             (0872)    jz    End_PutString                           ; Check for end of string
05A5: 9F BD    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
05A7: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
05A8: 8F F8    JMP   _UART_PutString    (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
05AA: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
05AB: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
05AC: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
05AE: A0 13    JZ    0x05C2             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
05B0: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
05B2: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
05B4: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
05B6: 49 3B 10 TST   REG[0x3B],0x10     
05B9: AF FC    JZ    0x05B6             
05BB: 60 39    MOV   REG[0x39],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
05BD: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
05BE: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
05C0: 8F EB    JMP   0x05AC             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
05C2: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
05C3: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
05C4: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
05C7: B0 06    JNZ   0x05CE             (0980)    jnz   .CW_WRITEIT
05C9: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
05CC: A0 1D    JZ    0x05EA             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
05CE: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
05CF: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
05D1: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
05D3: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
05D4: 49 3B 10 TST   REG[0x3B],0x10     
05D7: AF FC    JZ    0x05D4             
05D9: 60 39    MOV   REG[0x39],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
05DB: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
05DC: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
05DF: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
05E2: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
05E5: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
05E8: 8F DB    JMP   0x05C4             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
05EA: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
05EB: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
05EC: 10       PUSH  X                  (1030)    push  X
05ED: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
05EE: A0 0B    JZ    0x05FA             (1032)    jz    .End_CPutString
05F0: 9F 72    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
05F2: 20       POP   X                  (1034)    pop   X
05F3: 18       POP   A                  (1035)    pop   A
05F4: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
05F5: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
05F7: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
05F8: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
05FA: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
05FC: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
05FD: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
05FF: 9F 63    CALL  _UART_PutChar      (1074)    call UART_PutChar
0601: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0603: 9F 5F    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0605: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
0606: 55 60 00 MOV   [OneWire_DS_bCRC8Value+18],0x0(1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
0609: 55 0C 00 MOV   [0xC],0x0          (1124)    mov [UART_bRxCnt], 0x00
060C: 26 0B 00 AND   [0xB],0x0          (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
060F: 55 70 00 MOV   [OneWire_DS_bCRC8Value+34],0x0(1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0612: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
0613: 51 0B    MOV   A,[0xB]            (1165)    mov A,  [UART_fStatus]
0615: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
0617: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
0618: 51 0B    MOV   A,[0xB]            (1209)    mov A,  [UART_fStatus]
061A: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
061C: 26 0B 0F AND   [0xB],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
061F: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
0620: 51 0C    MOV   A,[0xC]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0622: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
0623: 50 60    MOV   A,0x60             (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
0625: 02 70    ADD   A,[OneWire_DS_bCRC8Value+34](1305)    add   A, [ptrParam]                      ; Add string offset
0627: 5C       MOV   X,A                (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
0628: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
062A: B0 04    JNZ   0x062F             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
062C: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
062D: 80 33    JMP   0x0661             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
062F: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
0631: B0 11    JNZ   0x0643             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0633: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
0634: 76 70    INC   [OneWire_DS_bCRC8Value+34](1318)    inc   [ptrParam]                         ;          the stored pointer.
0636: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
0638: 3C 70 0F CMP   [OneWire_DS_bCRC8Value+34],0xF(1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
063B: BF F3    JNZ   0x062F             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
063D: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
063E: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0641: 80 1F    JMP   0x0661             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
0643: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
0644: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
0645: 76 70    INC   [OneWire_DS_bCRC8Value+34](1334)    inc   [ptrParam]
0647: 3C 70 0F CMP   [OneWire_DS_bCRC8Value+34],0xF(1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
064A: AF F3    JZ    0x063E             (1336)    jz    .TerminateString
064C: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
064E: A0 12    JZ    0x0661             (1338)    jz    .End_GetNextParam
0650: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
0652: BF F1    JNZ   0x0644             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
0654: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
0657: 76 70    INC   [OneWire_DS_bCRC8Value+34](1342)    inc   [ptrParam]
0659: 3C 70 0F CMP   [OneWire_DS_bCRC8Value+34],0xF(1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
065C: B0 04    JNZ   0x0661             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
065E: 55 70 0F MOV   [OneWire_DS_bCRC8Value+34],0xF(1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0661: 20       POP   X                  (1348)    pop   X
0662: 10       PUSH  X                  (1349)    push  X
0663: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
0666: B0 06    JNZ   0x066D             (1351)    jnz   .NotNullString
0668: 20       POP   X                  (1352)    pop   X
0669: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
066B: 5B       MOV   A,X                (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
066C: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
066D: 20       POP   X                  (1360)    pop  X
066E: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0670: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
0671: 50 60    MOV   A,0x60             (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
0673: 02 70    ADD   A,[OneWire_DS_bCRC8Value+34](1397)    add  A, [ptrParam]                       ; Add string offset
0675: 5C       MOV   X,A                (1398)    mov  X,A
0676: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0678: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\spimint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIMINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0679: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIMINT.asm
FILE: lib\spim.asm                      (0001) ;;*****************************************************************************
067A: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_EnableInt
                                        (0030) export  _SPIM_EnableInt
                                        (0031) export   SPIM_DisableInt
                                        (0032) export  _SPIM_DisableInt
                                        (0033) export   SPIM_Start
                                        (0034) export  _SPIM_Start
                                        (0035) export   SPIM_Stop
                                        (0036) export  _SPIM_Stop
                                        (0037) export   SPIM_SendTxData
                                        (0038) export  _SPIM_SendTxData
                                        (0039) export   SPIM_bReadRxData
                                        (0040) export  _SPIM_bReadRxData
                                        (0041) export   SPIM_bReadStatus
                                        (0042) export  _SPIM_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_ReadRxData
                                        (0047) export  _bSPIM_ReadRxData
                                        (0048) export   bSPIM_ReadStatus
                                        (0049) export  _bSPIM_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_EnableInt:
                                        (0087) _SPIM_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
067D: 7F       RET                      (0091)    ret
067E: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_DisableInt:
                                        (0120) _SPIM_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
0681: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_Start:
                                        (0160) _SPIM_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
0682: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
0684: 60 2F    MOV   REG[0x2F],A        (0164)    mov   REG[SPIM_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
0686: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_Stop:
                                        (0194) _SPIM_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
0687: 41 2F FE AND   REG[0x2F],0xFE     (0197)    and   REG[SPIM_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
068A: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_SendTxData:
                                        (0229) _SPIM_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
068B: 60 2D    MOV   REG[0x2D],A        (0232)    mov REG[SPIM_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
068D: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_bReadRxData:
                                        (0263) _SPIM_bReadRxData:
                                        (0264)  bSPIM_ReadRxData:
                                        (0265) _bSPIM_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
068E: 5D 2E    MOV   A,REG[0x2E]        (0267)    mov A, REG[SPIM_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
0690: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_bReadStatus:
                                        (0300) _SPIM_bReadStatus:
                                        (0301)  bSPIM_ReadStatus:
                                        (0302) _bSPIM_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
0691: 5D 2F    MOV   A,REG[0x2F]        (0304)    mov A,  REG[SPIM_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
0693: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM.asm
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
0694: 2E 0D 01 OR    [0xD],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
0697: 47 0F FF TST   [0xF],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
069A: A0 03    JZ    0x069E             (0095)    jz   .DoTimer
069C: 7A 0F    DEC   [0xF]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
069E: 47 0E FF TST   [0xE],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
06A1: A0 03    JZ    0x06A5             (0100)    jz   .IncBigCounter
06A3: 7A 0E    DEC   [0xE]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
06A5: 76 13    INC   [0x13]             (0105)    inc  [SleepTimer_TickCount+3]
06A7: D0 0B    JNC   0x06B3             (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
06A9: 76 12    INC   [0x12]             (0108)    inc  [SleepTimer_TickCount+2]
06AB: D0 07    JNC   0x06B3             (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
06AD: 76 11    INC   [0x11]             (0113)    inc  [SleepTimer_TickCount+1]
06AF: D0 03    JNC   0x06B3             (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
06B1: 76 10    INC   [0x10]             (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
06B3: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\sleeptimer.asm                (0001) ;;*****************************************************************************
06B4: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_EnableInt
                                        (0041) export _SleepTimer_EnableInt
                                        (0042) export  SleepTimer_DisableInt
                                        (0043) export _SleepTimer_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_Start
                                        (0046) export _SleepTimer_Start
                                        (0047) export  SleepTimer_Stop
                                        (0048) export _SleepTimer_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_TickWait
                                        (0051) export _SleepTimer_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_SyncWait
                                        (0054) export _SleepTimer_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_SetInterval
                                        (0057) export _SleepTimer_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_bGetTickCntr
                                        (0060) export _SleepTimer_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_SetTimer
                                        (0063) export _SleepTimer_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_bGetTimer
                                        (0066) export _SleepTimer_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_iGetTickCntr
                                        (0070) export _SleepTimer_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_lGetTickCntr
                                        (0075) export _SleepTimer_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_EnableInt:
                                        (0131) _SleepTimer_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
06B7: 7F       RET                      (0135)    ret
06B8: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_DisableInt:
                                        (0160) _SleepTimer_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
06BB: 7F       RET                      (0164)    ret
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_Start:
                                        (0195) _SleepTimer_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_fTick      
06BC: 50 00    MOV   A,0x0              (0198)    mov  A,0
06BE: 53 0D    MOV   [0xD],A            (0199)    mov  [SleepTimer_fTick],A
06C0: 53 0E    MOV   [0xE],A            (0200)    mov  [SleepTimer_bTimerValue],A
06C2: 53 0F    MOV   [0xF],A            (0201)    mov  [SleepTimer_bCountDown],A
06C4: 53 13    MOV   [0x13],A           (0202)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
06C6: 53 12    MOV   [0x12],A           (0204)    mov  [SleepTimer_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_TICK_CNTR_SIZE & 4)
06C8: 53 11    MOV   [0x11],A           (0209)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
06CA: 53 10    MOV   [0x10],A           (0210)    mov   [SleepTimer_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
06CC: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_Stop:
                                        (0240) _SleepTimer_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
06CD: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_SetInterval:
                                        (0267) _SleepTimer_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
06CE: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_CLOCK_MASK               ; Mask off invalid data
06D0: 4F       MOV   X,SP               (0270)    mov  X, SP
06D1: 08       PUSH  A                  (0271)    push A
06D2: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
06D4: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
06D6: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_CLOCK_MASK   ; Zero out old timer value
06D8: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
06DA: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
06DC: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
06DE: 18       POP   A                  (0278)    pop  A
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
06DF: 7F       RET                      (0280)    ret
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_TickWait:
                                        (0312) _SleepTimer_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_fTick      
06E0: 55 0D 00 MOV   [0xD],0x0          (0315)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
06E3: 47 0D FF TST   [0xD],0xFF         (0318)    tst   [SleepTimer_fTick],0xFF          ; Check for tick 
06E6: AF FC    JZ    0x06E3             (0319)    jz    .WaitTick
06E8: 55 0D 00 MOV   [0xD],0x0          (0320)    mov   [SleepTimer_fTick],0x00          ; Clear tick flag
06EB: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
06EC: BF F6    JNZ   0x06E3             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
06EE: 7F       RET                      (0325)    ret
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_SyncWait:
                                        (0363) _SleepTimer_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_bCountDown
06EF: 4B       SWAP  A,X                (0366)    swap  A,X
06F0: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_FORCE_RELOAD
06F2: B0 06    JNZ   0x06F9             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
06F4: 47 0F FF TST   [0xF],0xFF         (0371)    tst   [SleepTimer_bCountDown],0xFF
06F7: BF FC    JNZ   0x06F4             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
06F9: 4B       SWAP  A,X                (0376)    swap  A,X
06FA: 53 0F    MOV   [0xF],A            (0377)    mov   [SleepTimer_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
06FC: 7F       RET                      (0380)    ret
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_bGetTickCntr:
                                        (0413) _SleepTimer_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_TickCount
06FD: 51 13    MOV   A,[0x13]           (0416)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
06FF: 7F       RET                      (0418)    ret
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_SetTimer:
                                        (0449) _SleepTimer_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0700: 53 0E    MOV   [0xE],A            (0452)    mov   [SleepTimer_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
0702: 7F       RET                      (0454)    ret
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_bGetTimer:
                                        (0485) _SleepTimer_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_TickCount
0703: 51 0E    MOV   A,[0xE]            (0488)    mov   A,[SleepTimer_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
0705: 7F       RET                      (0490)    ret
0706: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_iGetTickCntr:
                                        (0524) _SleepTimer_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
0709: 51 13    MOV   A,[0x13]           (0529)    mov   A,[SleepTimer_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
070B: 58 12    MOV   X,[0x12]           (0530)    mov   X,[SleepTimer_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
070D: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0531)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
0710: 7F       RET                      (0533)    ret
0711: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_lGetTickCntr:
                                        (0566) _SleepTimer_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
0714: 08       PUSH  A                  (0573)    push  A
0715: 51 10    MOV   A,[0x10]           (0574)    mov   A,[SleepTimer_TickCount + 0]
0717: 54 00    MOV   [X+0],A            (0575)    mov   [X + 0],A
0719: 51 11    MOV   A,[0x11]           (0576)    mov   A,[SleepTimer_TickCount + 1]
071B: 54 01    MOV   [X+1],A            (0577)    mov   [X + 1],A
071D: 51 12    MOV   A,[0x12]           (0578)    mov   A,[SleepTimer_TickCount + 2]
071F: 54 02    MOV   [X+2],A            (0579)    mov   [X + 2],A
0721: 51 13    MOV   A,[0x13]           (0580)    mov   A,[SleepTimer_TickCount + 3]
0723: 54 03    MOV   [X+3],A            (0581)    mov   [X + 3],A
0725: 18       POP   A                  (0582)    pop   A
0726: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_INT_REG, SleepTimer_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
0729: 7F       RET                      (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer.asm
FILE: lib\onewire_dsint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: OneWire_DSINT.asm
                                        (0004) ;;   Version: 1.1, Updated on 2015/3/4 at 22:26:45
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: OneWire Interrupt Service Routine
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;   Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "OneWire_DS.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _OneWire_DS_ISR
                                        (0022) 
                                        (0023) AREA UserModules (ROM, REL)
                                        (0024) 
                                        (0025) ;-----------------------------------------------------------------------------
                                        (0026) ;  FUNCTION NAME: _OneWire_DS_ISR
                                        (0027) ;
                                        (0028) ;  DESCRIPTION: With ParasitePower enabled this ISR sets TX pin to strong
                                        (0029) ;               drive mode immediately after transmission of last data bit.
                                        (0030) ;-----------------------------------------------------------------------------
                                        (0031) 
                                        (0032) _OneWire_DS_ISR:
                                        (0033) IF (OneWire_DS_PARASITE_ENABLE)
                                        (0034)     M8C_SetBank1
                                        (0035)     and   REG[OneWire_DS_OUT_PORT_DM1],~OneWire_DS_OUT_PORT_MASK
                                        (0036)     M8C_SetBank0
                                        (0037) ENDIF
072A: 7E       RETI                     (0038)    reti
                                        (0039) 
                                        (0040) ; end of file OneWire_DSINT.asm
FILE: lib\onewire_ds.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: OneWire_DS.asm
                                        (0004) ;;   Version: 1.1, Updated on 2015/3/4 at 22:26:45
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: OneWire User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API function
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;   Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "OneWire_DS.inc"
                                        (0025) 
                                        (0026) export  OneWire_DS_Start
                                        (0027) export _OneWire_DS_Start
                                        (0028) export  OneWire_DS_Stop
                                        (0029) export _OneWire_DS_Stop
                                        (0030) 
                                        (0031) export  OneWire_DS_fReset
                                        (0032) export _OneWire_DS_fReset
                                        (0033) export  OneWire_DS_WriteBit
                                        (0034) export _OneWire_DS_WriteBit
                                        (0035) export  OneWire_DS_bReadBit
                                        (0036) export _OneWire_DS_bReadBit
                                        (0037) export  OneWire_DS_WriteByte
                                        (0038) export _OneWire_DS_WriteByte
                                        (0039) export  OneWire_DS_bReadByte
                                        (0040) export _OneWire_DS_bReadByte
                                        (0041) export  OneWire_DS_ClearCRC8
                                        (0042) export _OneWire_DS_ClearCRC8
                                        (0043) export  OneWire_DS_bCRC8
                                        (0044) export _OneWire_DS_bCRC8
                                        (0045) 
                                        (0046) export  OneWire_DS_bCRC8Value
                                        (0047) export _OneWire_DS_bCRC8Value
                                        (0048) IF (OneWire_DS_CRC16_ENABLE)
                                        (0049) export  OneWire_DS_ClearCRC16
                                        (0050) export _OneWire_DS_ClearCRC16
                                        (0051) export  OneWire_DS_wCRC16
                                        (0052) export _OneWire_DS_wCRC16
                                        (0053) export  OneWire_DS_wCRC16Value
                                        (0054) export _OneWire_DS_wCRC16Value
                                        (0055) ENDIF
                                        (0056) 
                                        (0057) IF (OneWire_DS_SEARCH_ENABLE)
                                        (0058) export   OneWire_DS_GetROM
                                        (0059) export  _OneWire_DS_GetROM
                                        (0060) export   OneWire_DS_SetROM
                                        (0061) export  _OneWire_DS_SetROM
                                        (0062) export   OneWire_DS_fFindFirst
                                        (0063) export  _OneWire_DS_fFindFirst
                                        (0064) export   OneWire_DS_fFindNext
                                        (0065) export  _OneWire_DS_fFindNext
                                        (0066) export   OneWire_DS_fVerify
                                        (0067) export  _OneWire_DS_fVerify
                                        (0068) export   OneWire_DS_FamilyTargetSetup
                                        (0069) export  _OneWire_DS_FamilyTargetSetup
                                        (0070) export   OneWire_DS_FamilySkipSetup
                                        (0071) export  _OneWire_DS_FamilySkipSetup
                                        (0072) ENDIF
                                        (0073) 
                                        (0074) IF (OneWire_DS_OVERDRIVE_ENABLE)
                                        (0075) export  OneWire_DS_SetOverdrive
                                        (0076) export _OneWire_DS_SetOverdrive
                                        (0077) export  OneWire_DS_ClearOverdrive
                                        (0078) export _OneWire_DS_ClearOverdrive
                                        (0079) ENDIF
                                        (0080) 
                                        (0081) IF (OneWire_DS_PARASITE_ENABLE)
                                        (0082) export  OneWire_DS_WriteByteStrong
                                        (0083) export _OneWire_DS_WriteByteStrong
                                        (0084) export  OneWire_DS_SetResistive
                                        (0085) export _OneWire_DS_SetResistive
                                        (0086) ENDIF
                                        (0087) 
                                        (0088) AREA bss
                                        (0089) 
                                        (0090) _OneWire_DS_bCRC8Value:
                                        (0091)  OneWire_DS_bCRC8Value:                          blk   1
                                        (0092) 
                                        (0093) IF (OneWire_DS_CRC16_ENABLE)
                                        (0094) _OneWire_DS_wCRC16Value:
                                        (0095)  OneWire_DS_wCRC16Value:                         blk   2
                                        (0096) ENDIF
                                        (0097) 
                                        (0098) IF (OneWire_DS_SEARCH_ENABLE)
                                        (0099) OneWire_DS_ROM:                                  blk   8
                                        (0100) OneWire_DS_LastDiscrepancy:                      blk   1
                                        (0101) OneWire_DS_LastFamilyDiscrepancy:                blk   1
                                        (0102) OneWire_DS_LastDeviceFlag:                       blk   1
                                        (0103) ENDIF
                                        (0104) 
                                        (0105) IF (OneWire_DS_OVERDRIVE_ENABLE )
                                        (0106) OneWire_DS_bMode:                                blk   1
                                        (0107) ENDIF
                                        (0108) 
                                        (0109) AREA UserModules (ROM, REL)
                                        (0110) 
                                        (0111) RESET_PATTERN:                          equ   F1h
                                        (0112) ZERO_PATTERN:                           equ   01h
                                        (0113) ONE_PATTERN:                            equ   FDh
                                        (0114) INIT_PERIOD:                            equ   0Fh
                                        (0115) RESET_PERIOD:                           equ   F9h      ;Divide by 250 (249+1)
                                        (0116) BIT_PERIOD:                             equ   0Dh      ;Divide by 14 (13+1)
                                        (0117) OD_RESET_PERIOD:                        equ   19h      ;Divide by 26 (25+1)
                                        (0118) OD_BIT_PERIOD:                          equ   01h      ;Divide by 2 (1+1)
                                        (0119) 
                                        (0120) SPIM_SPI_COMPLETE:              equ 0x20    ;SPI Tx/Rx cycle has completed
                                        (0121) SPIM_MODE_0:                   equ 0x00    ; MODE 0 - Leading edge latches data - pos clock
                                        (0122) SPIM_LSB_FIRST:                equ 0x80    ; LSB bit transmitted/received first
                                        (0123) CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
                                        (0124) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0125) INPUT_REG_CLOCK_MASK:          equ 0x0F    ; Input register clock mask
                                        (0126) OD_MODE:                       equ 0x01    ;OverDrive
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: OneWire_DS_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Enables the clock divider and tranceiver blocks.  Initializes the
                                        (0134) ;     OneWireOut pin to high.  Sets the clock divider period.
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  ARGUMENTS:
                                        (0137) ;     none.
                                        (0138) ;
                                        (0139) ;  RETURNS:
                                        (0140) ;     none.
                                        (0141) ;
                                        (0142) ;  SIDE EFFECTS:
                                        (0143) ;    The A and X registers may be modified by this or future implementations
                                        (0144) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0145) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0146) ;    responsibility to perserve their values across calls to fastcall16
                                        (0147) ;    functions.   Currently only the page pointer registers listed below are modified:
                                        (0148) ;       CUR_PP
                                        (0149) ;
                                        (0150) ;  THEORY of OPERATION:
                                        (0151) ;     Set the start bit in the Control register.
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153)  OneWire_DS_Start:
                                        (0154) _OneWire_DS_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0156) 
                                        (0157) IF (OneWire_DS_OVERDRIVE_ENABLE)
                                        (0158)     RAM_SETPAGE_CUR >OneWire_DS_bMode
                                        (0159)     mov   [OneWire_DS_bMode], 00h
                                        (0160) ENDIF
072B: 62 25 0F MOV   REG[0x25],0xF      (0161)     mov   reg[OneWire_DS_BITCLK_PERIOD_REG], INIT_PERIOD     ; Set divider period to initialize OneWireOut
072E: 43 27 01 OR    REG[0x27],0x1      (0162)     or    reg[OneWire_DS_BITCLK_CONTROL_REG], CONTROL_REG_START_BIT  ; Start the clock divider
0731: 62 2B 81 MOV   REG[0x2B],0x81     (0163)     mov   reg[OneWire_DS_XCVR_CONTROL_REG], SPIM_MODE_0|SPIM_LSB_FIRST|CONTROL_REG_START_BIT
0734: 50 FF    MOV   A,0xFF             (0164)     mov   A, FFh                                 ; Initialize OneWireOut to high
0736: 90 8B    CALL  0x07C3             (0165)     call  OneWire_DS_SendTxDataWait
0738: 62 25 0D MOV   REG[0x25],0xD      (0166)     mov   reg[OneWire_DS_BITCLK_PERIOD_REG], BIT_PERIOD
                                        (0167) 
                                        (0168)     RAM_EPILOGUE RAM_USE_CLASS_4
073B: 7F       RET                      (0169)     ret
                                        (0170) .ENDSECTION
                                        (0171) 
                                        (0172) .SECTION
                                        (0173) ;-----------------------------------------------------------------------------
                                        (0174) ;  FUNCTION NAME: OneWire_DS_Stop
                                        (0175) ;
                                        (0176) ;  DESCRIPTION:
                                        (0177) ;     Disables BitClk and XCVR operation.
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  ARGUMENTS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  RETURNS:
                                        (0183) ;     none.
                                        (0184) ;
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    The A and X registers may be modified by this or future implementations
                                        (0187) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0188) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0189) ;    responsibility to preserve their values across calls to fastcall16
                                        (0190) ;    functions.
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION:
                                        (0193) ;     Clear the start bits in the Control registers.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195)  OneWire_DS_Stop:
                                        (0196) _OneWire_DS_Stop:
                                        (0197)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0198) 
073C: 41 27 FE AND   REG[0x27],0xFE     (0199)     and   reg[OneWire_DS_BITCLK_CONTROL_REG], ~CONTROL_REG_START_BIT
073F: 41 2B FE AND   REG[0x2B],0xFE     (0200)     and   reg[OneWire_DS_XCVR_CONTROL_REG], ~CONTROL_REG_START_BIT
                                        (0201) 
                                        (0202)     RAM_EPILOGUE RAM_USE_CLASS_1
0742: 7F       RET                      (0203)     ret
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) .SECTION
                                        (0207) ;-----------------------------------------------------------------------------
                                        (0208) ;  FUNCTION NAME: OneWire_DS_fReset
                                        (0209) ;
                                        (0210) ;  DESCRIPTION:
                                        (0211) ;     Reset the OneWireOut pin
                                        (0212) ;-----------------------------------------------------------------------------
                                        (0213) ;
                                        (0214) ;  ARGUMENTS:
                                        (0215) ;     none.
                                        (0216) ;
                                        (0217) ;  RETURNS:
                                        (0218) ;     A = 01h if one or more devices responded.
                                        (0219) ;
                                        (0220) ;  SIDE EFFECTS:
                                        (0221) ;    The A and X registers may be modified by this or future implementations
                                        (0222) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0223) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0224) ;    responsibility to preserve their values across calls to fastcall16
                                        (0225) ;    functions. Currently only the page pointer registers listed below
                                        (0226) ;    are modified: CUR_PP
                                        (0227) ;
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229)  OneWire_DS_fReset:
                                        (0230) _OneWire_DS_fReset:
                                        (0231)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0232) 
                                        (0233) IF (OneWire_DS_OVERDRIVE_ENABLE)
                                        (0234)     RAM_SETPAGE_CUR >OneWire_DS_bMode
                                        (0235) ENDIF
0743: 50 F9    MOV   A,0xF9             (0236)     mov   A, RESET_PERIOD                        ; Reset period
                                        (0237) IF (OneWire_DS_OVERDRIVE_ENABLE)
                                        (0238)     tst   [OneWire_DS_bMode],OD_MODE             ; Test for OverDrive mode
                                        (0239)     jz    .Reset_Normal
                                        (0240)     mov   reg[OneWire_DS_BITCLK_PERIOD_REG], OD_RESET_PERIOD  ; OverDrive Reset period
                                        (0241)     mov   A, RESET_PATTERN                       ; Reset bit pattern
                                        (0242)     call  OneWire_DS_SendTxDataWait
                                        (0243)     mov   A, OD_BIT_PERIOD                       ; OverDrive Bit period
                                        (0244)     jmp   .Reset_WriteBitPeriod
                                        (0245) ENDIF
                                        (0246) .Reset_Normal:
0745: 60 25    MOV   REG[0x25],A        (0247)     mov   reg[OneWire_DS_BITCLK_PERIOD_REG], A
0747: 50 F1    MOV   A,0xF1             (0248)     mov   A, RESET_PATTERN                       ; Reset bit pattern
0749: 90 78    CALL  0x07C3             (0249)     call  OneWire_DS_SendTxDataWait
074B: 50 0D    MOV   A,0xD              (0250)     mov   A, BIT_PERIOD                          ; Bit period
                                        (0251) .Reset_WriteBitPeriod:
074D: 60 25    MOV   REG[0x25],A        (0252)     mov   reg[OneWire_DS_BITCLK_PERIOD_REG], A
074F: 5D 2A    MOV   A,REG[0x2A]        (0253)     mov   A, reg[OneWire_DS_XCVR_RX_BUFFER_REG]
0751: 39 F1    CMP   A,0xF1             (0254)     cmp   A, RESET_PATTERN
0753: D0 05    JNC   0x0759             (0255)     jnc   .Reset_NoResponse
0755: 50 01    MOV   A,0x1              (0256)     mov   A,01h
0757: 80 03    JMP   0x075B             (0257)     jmp   .Reset_done
                                        (0258) .Reset_NoResponse:
0759: 50 00    MOV   A,0x0              (0259)     mov   A,00h
                                        (0260) .Reset_done:
                                        (0261) 
                                        (0262)     RAM_EPILOGUE RAM_USE_CLASS_4
075B: 7F       RET                      (0263)     ret
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) .SECTION
                                        (0267) ;-----------------------------------------------------------------------------
                                        (0268) ;  FUNCTION NAME: OneWire_DS_WriteBit
                                        (0269) ;
                                        (0270) ;  DESCRIPTION:
                                        (0271) ;     Write a bit to the OneWireOut pin.
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  ARGUMENTS:
                                        (0274) ;     A  => less significant bit is output to OneWireOut pin
                                        (0275) ;
                                        (0276) ;  RETURNS:
                                        (0277) ;     none.
                                        (0278) ;
                                        (0279) ;  SIDE EFFECTS:
                                        (0280) ;    The A and X registers may be modified by this or future implementations
                                        (0281) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0282) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0283) ;    responsibility to preserve their values across calls to fastcall16
                                        (0284) ;    functions.
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287)  OneWire_DS_WriteBit:
                                        (0288) _OneWire_DS_WriteBit:
                                        (0289)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0290) 
075C: 6D       RRC   A                  (0291)     rrc   A                                      ; Rotate LSB into CF to test
075D: C0 05    JC    0x0763             (0292)     jc    .WriteBit_1                            ; LSB is 1
075F: 50 01    MOV   A,0x1              (0293)     mov   A, ZERO_PATTERN                        ; "0" bit pattern
0761: 80 03    JMP   0x0765             (0294)     jmp   .WriteBit_Send
                                        (0295) .WriteBit_1:
0763: 50 FD    MOV   A,0xFD             (0296)     mov   A, ONE_PATTERN                         ; "1" bit pattern
                                        (0297) .WriteBit_Send:
0765: 90 5C    CALL  0x07C3             (0298)     call  OneWire_DS_SendTxDataWait
                                        (0299) 
                                        (0300)     RAM_EPILOGUE RAM_USE_CLASS_1
0767: 7F       RET                      (0301)     ret
                                        (0302) .ENDSECTION
                                        (0303) 
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: OneWire_DS_bReadBit
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Read the OneWireIn pin
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;
                                        (0313) ;  ARGUMENTS:
                                        (0314) ;     none.
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     the less significant bit of A returns value read from OneWire pin.
                                        (0318) ;
                                        (0319) ;  SIDE EFFECTS:
                                        (0320) ;    The A and X registers may be modified by this or future implementations
                                        (0321) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0322) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0323) ;    responsibility to preserve their values across calls to fastcall16
                                        (0324) ;    functions.
                                        (0325) ;
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327)  OneWire_DS_bReadBit:
                                        (0328) _OneWire_DS_bReadBit:
                                        (0329)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0330) 
0768: 50 FD    MOV   A,0xFD             (0331)     mov    A, ONE_PATTERN
076A: 90 57    CALL  0x07C3             (0332)     call   OneWire_DS_SendTxDataWait
076C: 5D 2A    MOV   A,REG[0x2A]        (0333)     mov    A, reg[OneWire_DS_XCVR_RX_BUFFER_REG]
076E: 39 FD    CMP   A,0xFD             (0334)     cmp    A, ONE_PATTERN
0770: D0 05    JNC   0x0776             (0335)     jnc    .ReadBit_One
0772: 50 00    MOV   A,0x0              (0336)     mov    A, 00h
0774: 80 03    JMP   0x0778             (0337)     jmp    .Done
                                        (0338) .ReadBit_One:
0776: 50 01    MOV   A,0x1              (0339)     mov    A, 01h
                                        (0340) .Done:
                                        (0341) 
                                        (0342)     RAM_EPILOGUE RAM_USE_CLASS_1
0778: 7F       RET                      (0343)     ret
                                        (0344) .ENDSECTION
                                        (0345) 
                                        (0346) .SECTION
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;  FUNCTION NAME: OneWire_DS_WriteByte
                                        (0349) ;
                                        (0350) ;  DESCRIPTION:
                                        (0351) ;     Write a byte to the OneWireOut pin
                                        (0352) ;-----------------------------------------------------------------------------
                                        (0353) ;
                                        (0354) ;  ARGUMENTS:
                                        (0355) ;     A => byte output to the OneWireOut pin
                                        (0356) ;
                                        (0357) ;  RETURNS:
                                        (0358) ;     none.
                                        (0359) ;
                                        (0360) ;  SIDE EFFECTS:
                                        (0361) ;    The A and X registers may be modified by this or future implementations
                                        (0362) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0363) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0364) ;    responsibility to preserve their values across calls to fastcall16
                                        (0365) ;    functions.
                                        (0366) ;
                                        (0367) ;-----------------------------------------------------------------------------
                                        (0368)  OneWire_DS_WriteByte:
                                        (0369) _OneWire_DS_WriteByte:
                                        (0370)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0371) 
0779: 08       PUSH  A                  (0372)     push   A
077A: 57 08    MOV   X,0x8              (0373)     mov    X, 08h
                                        (0374) .ByteLoop:
077C: 18       POP   A                  (0375)     pop    A
077D: 6D       RRC   A                  (0376)     rrc    A
077E: 08       PUSH  A                  (0377)     push   A
077F: C0 05    JC    0x0785             (0378)     jc     .LoadPattern_1
0781: 50 01    MOV   A,0x1              (0379)     mov    A, ZERO_PATTERN
0783: 80 03    JMP   0x0787             (0380)     jmp    .SendPattern
                                        (0381) .LoadPattern_1:
0785: 50 FD    MOV   A,0xFD             (0382)     mov    A, ONE_PATTERN
                                        (0383) .SendPattern:
0787: 60 29    MOV   REG[0x29],A        (0384) 	mov    reg[OneWire_DS_XCVR_TX_BUFFER_REG], A
                                        (0385) .WaitForEmptyBuf:
0789: 5D 2B    MOV   A,REG[0x2B]        (0386)     mov    A, reg[OneWire_DS_XCVR_CONTROL_REG]
078B: 21 20    AND   A,0x20             (0387)     and    A, SPIM_SPI_COMPLETE
078D: AF FB    JZ    0x0789             (0388)     jz     .WaitForEmptyBuf
078F: 79       DEC   X                  (0389)     dec    X
0790: BF EB    JNZ   0x077C             (0390)     jnz    .ByteLoop
0792: 18       POP   A                  (0391)     pop    A
                                        (0392) 
                                        (0393)     RAM_EPILOGUE RAM_USE_CLASS_1
0793: 7F       RET                      (0394)     ret
                                        (0395) .ENDSECTION
                                        (0396) 
                                        (0397) .SECTION
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;  FUNCTION NAME: OneWire_DS_bReadByte
                                        (0400) ;
                                        (0401) ;  DESCRIPTION:
                                        (0402) ;     Read a byte from the OneWireIn pin
                                        (0403) ;-----------------------------------------------------------------------------
                                        (0404) ;
                                        (0405) ;  ARGUMENTS:
                                        (0406) ;     none.
                                        (0407) ;
                                        (0408) ;  RETURNS:
                                        (0409) ;     A returns byte read from OneWireIn pin.
                                        (0410) ;
                                        (0411) ;  SIDE EFFECTS:
                                        (0412) ;    The A and X registers may be modified by this or future implementations
                                        (0413) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0414) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0415) ;    responsibility to perserve their values across calls to fastcall16
                                        (0416) ;    functions.
                                        (0417) ;
                                        (0418) ;-----------------------------------------------------------------------------
                                        (0419)  OneWire_DS_bReadByte:
                                        (0420) _OneWire_DS_bReadByte:
                                        (0421)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0422) 
0794: 08       PUSH  A                  (0423)     push   A
0795: 57 08    MOV   X,0x8              (0424)     mov    X,08h
                                        (0425) .ByteLoop:
0797: 50 FD    MOV   A,0xFD             (0426)     mov    A, ONE_PATTERN
0799: 90 28    CALL  0x07C3             (0427)     call   OneWire_DS_SendTxDataWait
079B: 5D 2A    MOV   A,REG[0x2A]        (0428)     mov    A, reg[OneWire_DS_XCVR_RX_BUFFER_REG]
079D: 39 FD    CMP   A,0xFD             (0429)     cmp    A, ONE_PATTERN
079F: 18       POP   A                  (0430)     pop    A
07A0: 6D       RRC   A                  (0431)     rrc    A
07A1: 08       PUSH  A                  (0432)     push   A
07A2: 79       DEC   X                  (0433)     dec    X
07A3: BF F3    JNZ   0x0797             (0434)     jnz    .ByteLoop
07A5: 18       POP   A                  (0435)     pop    A
07A6: 73       CPL   A                  (0436) 	cpl    A
                                        (0437)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0438) 
07A7: 7F       RET                      (0439)     ret
                                        (0440) .ENDSECTION
                                        (0441) 
                                        (0442) .SECTION
                                        (0443) ;-----------------------------------------------------------------------------
                                        (0444) ;  FUNCTION NAME: OneWire_DS_ClearCRC8
                                        (0445) ;
                                        (0446) ;  DESCRIPTION:
                                        (0447) ;     Clear the CRC8 RAM location
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) ;
                                        (0450) ;  ARGUMENTS:
                                        (0451) ;     none.
                                        (0452) ;
                                        (0453) ;  RETURNS:
                                        (0454) ;     none.
                                        (0455) ;
                                        (0456) ;  SIDE EFFECTS:
                                        (0457) ;    The A and X registers may be modified by this or future implementations
                                        (0458) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0459) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0460) ;    responsibility to preserve their values across calls to fastcall16
                                        (0461) ;    functions.   Currently only the page pointer registers listed below are modified:
                                        (0462) ;    CUR_PP
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465)  OneWire_DS_ClearCRC8:
                                        (0466) _OneWire_DS_ClearCRC8:
                                        (0467)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0468)     RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value
                                        (0469) 
07A8: 55 4E 00 MOV   [OneWire_DS_bCRC8Value],0x0(0470)     mov   [OneWire_DS_bCRC8Value], 00h
                                        (0471) 
                                        (0472)     RAM_EPILOGUE RAM_USE_CLASS_4
07AB: 7F       RET                      (0473)     ret
                                        (0474) .ENDSECTION
                                        (0475) 
                                        (0476) .SECTION
                                        (0477) ;-----------------------------------------------------------------------------
                                        (0478) ;  FUNCTION NAME: OneWire_DS_bCRC8
                                        (0479) ;
                                        (0480) ;  DESCRIPTION:
                                        (0481) ;     CRC for One Wire
                                        (0482) ;-----------------------------------------------------------------------------
                                        (0483) ;
                                        (0484) ;  ARGUMENTS:
                                        (0485) ;     A contains the byte to CRC.
                                        (0486) ;
                                        (0487) ;  RETURNS:
                                        (0488) ;     A contains current CRC value.
                                        (0489) ;
                                        (0490) ;  SIDE EFFECTS:
                                        (0491) ;    The A and X registers may be modified by this or future implementations
                                        (0492) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0493) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0494) ;    responsibility to preserve their values across calls to fastcall16
                                        (0495) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (0496) ;     CUR_PP
                                        (0497) ;-----------------------------------------------------------------------------
                                        (0498)  OneWire_DS_bCRC8:
                                        (0499) _OneWire_DS_bCRC8:
                                        (0500)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0501)     RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value
                                        (0502) 
07AC: 08       PUSH  A                  (0503)     push  A                                      ; Save the bits to shift
07AD: 57 08    MOV   X,0x8              (0504)     mov   X, 08h                                 ; Set up to shift one byte
                                        (0505) .OW_crc8_loop:
07AF: 32 4E    XOR   A,[OneWire_DS_bCRC8Value](0506)     xor   A, [OneWire_DS_bCRC8Value]             ; Determine feedback
07B1: 6D       RRC   A                  (0507)     rrc   A                                      ; Move it into CF
07B2: D0 04    JNC   0x07B7             (0508)     jnc   .OW_crc8_FB_zero                       ; If feedback is 0, no XOR of the byte needed
07B4: 36 4E 18 XOR   [OneWire_DS_bCRC8Value],0x18(0509)     xor   [OneWire_DS_bCRC8Value],18h            ; XOR the CRC byte
                                        (0510) .OW_crc8_FB_zero:
07B7: 6E 4E    RRC   [OneWire_DS_bCRC8Value](0511)     rrc   [OneWire_DS_bCRC8Value]                ; Rotate CF into the CRC byte
07B9: 18       POP   A                  (0512)     pop   A                                      ; Restore the remaining bits
07BA: 6D       RRC   A                  (0513)     rrc   A                                      ; Rotate for the next bit
07BB: 08       PUSH  A                  (0514)     push  A                                      ; Save the remaining bits
07BC: 79       DEC   X                  (0515)     dec   X                                      
07BD: BF F1    JNZ   0x07AF             (0516)     jnz   .OW_crc8_loop                          ; Loop until whole input byte is shifted
07BF: 18       POP   A                  (0517)     pop   A                                      ; Clean up stack
07C0: 51 4E    MOV   A,[OneWire_DS_bCRC8Value](0518)     mov   A, [OneWire_DS_bCRC8Value]             ; Load computed CRC byte into A
                                        (0519) 
                                        (0520)     RAM_EPILOGUE RAM_USE_CLASS_4
07C2: 7F       RET                      (0521)     ret
                                        (0522) .ENDSECTION
                                        (0523) 
                                        (0524) IF (OneWire_DS_CRC16_ENABLE)
                                        (0525) .SECTION
                                        (0526) ;-----------------------------------------------------------------------------
                                        (0527) ;  FUNCTION NAME: OneWire_DS_ClearCRC16
                                        (0528) ;
                                        (0529) ;  DESCRIPTION:
                                        (0530) ;     Clear the CRC16 RAM locations
                                        (0531) ;-----------------------------------------------------------------------------
                                        (0532) ;  ARGUMENTS:
                                        (0533) ;     none.
                                        (0534) ;
                                        (0535) ;  RETURNS:
                                        (0536) ;     none.
                                        (0537) ;
                                        (0538) ;  SIDE EFFECTS:
                                        (0539) ;    The A and X registers may be modified by this or future implementations
                                        (0540) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0541) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0542) ;    responsibility to preserve their values across calls to fastcall16
                                        (0543) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (0544) ;     CUR_PP
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547)  OneWire_DS_ClearCRC16:
                                        (0548) _OneWire_DS_ClearCRC16:
                                        (0549)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0550)     RAM_SETPAGE_CUR >OneWire_DS_wCRC16Value
                                        (0551) 
                                        (0552)     mov   [OneWire_DS_wCRC16Value+0],00h
                                        (0553)     mov   [OneWire_DS_wCRC16Value+1],00h
                                        (0554) 
                                        (0555)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0556)     ret
                                        (0557) .ENDSECTION
                                        (0558) 
                                        (0559) .SECTION
                                        (0560) ;-----------------------------------------------------------------------------
                                        (0561) ;  FUNCTION NAME: OneWire_DS_wCRC16
                                        (0562) ;
                                        (0563) ;  DESCRIPTION:
                                        (0564) ;     CRC-16 for One Wire
                                        (0565) ;-----------------------------------------------------------------------------
                                        (0566) ;  ARGUMENTS:
                                        (0567) ;     A contains the byte to CRC.
                                        (0568) ;
                                        (0569) ;  RETURNS:
                                        (0570) ;     A contains current CRC LO byte value.
                                        (0571) ;     X contains current CRC HI byte value.
                                        (0572) ;     This returns as an unsigned integer in C.
                                        (0573) ;
                                        (0574) ;  SIDE EFFECTS:
                                        (0575) ;    The A and X registers may be modified by this or future implementations
                                        (0576) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0577) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0578) ;    responsibility to preserve their values across calls to fastcall16
                                        (0579) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0580) ;     CUR_PP
                                        (0581) ;
                                        (0582) ;-----------------------------------------------------------------------------
                                        (0583)  OneWire_DS_wCRC16:
                                        (0584) _OneWire_DS_wCRC16:
                                        (0585)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0586)     RAM_SETPAGE_CUR >OneWire_DS_wCRC16Value
                                        (0587) 
                                        (0588)     push  A                                      ; Save the bits to shift
                                        (0589)     mov   X,08h                                  ; Set up to shift one byte
                                        (0590) .CRC16_loop:
                                        (0591)     xor   A,[OneWire_DS_wCRC16Value+1]           ; Determine feedback
                                        (0592)     rrc   A                                      ; Move it into CF
                                        (0593)     jnc   .CRC16_FB_zero                         ; If feedback is 0, no XOR of the byte needed
                                        (0594)     xor   [OneWire_DS_wCRC16Value+0],40h         ; XOR the CRC HI byte
                                        (0595)     xor   [OneWire_DS_wCRC16Value+1],02h         ; XOR the CRC LO byte
                                        (0596) .CRC16_FB_zero:
                                        (0597)     rrc   [OneWire_DS_wCRC16Value+0]             ; Rotate CF into the CRC HI byte
                                        (0598)     rrc   [OneWire_DS_wCRC16Value+1]             ; Rotate CF into the CRC LO byte
                                        (0599)     pop   A                                      ; Restore the remaining bits
                                        (0600)     rrc   A                                      ; Rotate for the next bit
                                        (0601)     push  A                                      ; Save the remaining bits
                                        (0602)     dec   X
                                        (0603)     jnz   .CRC16_loop                            ; Loop until whole input byte is shifted
                                        (0604)     pop   A                                      ; Clean up stack
                                        (0605)     mov   X,[OneWire_DS_wCRC16Value+0]           ; Load computed CRC HI byte into X
                                        (0606)     mov   A,[OneWire_DS_wCRC16Value+1]           ; Load computed CRC LO byte into A
                                        (0607) 
                                        (0608)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0609)     ret
                                        (0610) .ENDSECTION
                                        (0611) ENDIF
                                        (0612) 
                                        (0613) IF (OneWire_DS_SEARCH_ENABLE)
                                        (0614) .SECTION
                                        (0615) ;-----------------------------------------------------------------------------
                                        (0616) ;  FUNCTION NAME: OneWire_DS_GetROM
                                        (0617) ;
                                        (0618) ;  DESCRIPTION:
                                        (0619) ;     Takes the RAM defined for holding a 64-bit 1-Wire ROM number and
                                        (0620) ;     passes it via a pointer in A and X.
                                        (0621) ;-----------------------------------------------------------------------------
                                        (0622) ;
                                        (0623) ;  ARGUMENTS:
                                        (0624) ;     A:X - contains pointer
                                        (0625) ;       X - contains LSB of the pointer to the RAM buffer
                                        (0626) ;       A - contains MSB or page of the pointer to the RAM buffer
                                        (0627) ;
                                        (0628) ;  RAM BUFFER CONTENTS:
                                        (0629) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16
                                        (0639) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0640) ;     CUR_PP
                                        (0641) ;     IDX_PP
                                        (0642) ;-----------------------------------------------------------------------------
                                        (0643)  OneWire_DS_GetROM:
                                        (0644) _OneWire_DS_GetROM:
                                        (0645)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0646)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0647)     RAM_SETPAGE_IDX A
                                        (0648)     RAM_SETPAGE_CUR >OneWire_DS_ROM
                                        (0649) 
                                        (0650)     mov    A,[OneWire_DS_ROM+0]
                                        (0651)     mov    [X+0],A
                                        (0652)     mov    A,[OneWire_DS_ROM+1]
                                        (0653)     mov    [X+1],A
                                        (0654)     mov    A,[OneWire_DS_ROM+2]
                                        (0655)     mov    [X+2],A
                                        (0656)     mov    A,[OneWire_DS_ROM+3]
                                        (0657)     mov    [X+3],A
                                        (0658)     mov    A,[OneWire_DS_ROM+4]
                                        (0659)     mov    [X+4],A
                                        (0660)     mov    A,[OneWire_DS_ROM+5]
                                        (0661)     mov    [X+5],A
                                        (0662)     mov    A,[OneWire_DS_ROM+6]
                                        (0663)     mov    [X+6],A
                                        (0664)     mov    A,[OneWire_DS_ROM+7]
                                        (0665)     mov    [X+7],A
                                        (0666) 
                                        (0667)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0668)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0669)     ret
                                        (0670) .ENDSECTION
                                        (0671) 
                                        (0672) 
                                        (0673) .SECTION
                                        (0674) ;-----------------------------------------------------------------------------
                                        (0675) ;  FUNCTION NAME: OneWire_DS_SetROM
                                        (0676) ;
                                        (0677) ;  DESCRIPTION:
                                        (0678) ;     Takes the array passed via a pointer in A and X and puts it
                                        (0679) ;     into the RAM defined for holding a 64-bit 1-Wire ROM number.
                                        (0680) ;-----------------------------------------------------------------------------
                                        (0681) ;  ARGUMENTS:
                                        (0682) ;     A:X - contains pointer
                                        (0683) ;       X - contains LSB of the pointer to the RAM buffer
                                        (0684) ;       A - contains MSB or page of the pointer to the RAM buffer
                                        (0685) ;
                                        (0686) ;  RAM BUFFER CONTENTS:
                                        (0687) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (0688) ;
                                        (0689) ;  RETURNS:
                                        (0690) ;     none.
                                        (0691) ;
                                        (0692) ;  SIDE EFFECTS:
                                        (0693) ;    The A and X registers may be modified by this or future implementations
                                        (0694) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0695) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0696) ;    responsibility to preserve their values across calls to fastcall16
                                        (0697) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0698) ;     CUR_PP
                                        (0699) ;     IDX_PP
                                        (0700) ;-----------------------------------------------------------------------------
                                        (0701)  OneWire_DS_SetROM:
                                        (0702) _OneWire_DS_SetROM:
                                        (0703)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0704)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0705)     RAM_SETPAGE_IDX A
                                        (0706)     RAM_SETPAGE_CUR >OneWire_DS_ROM
                                        (0707) 
                                        (0708)     mov    A,[X+0]
                                        (0709)     mov    [OneWire_DS_ROM+0], A
                                        (0710)     mov    A,[X+1]
                                        (0711)     mov    [OneWire_DS_ROM+1], A
                                        (0712)     mov    A,[X+2]
                                        (0713)     mov    [OneWire_DS_ROM+2], A
                                        (0714)     mov    A,[X+3]
                                        (0715)     mov    [OneWire_DS_ROM+3], A
                                        (0716)     mov    A,[X+4]
                                        (0717)     mov    [OneWire_DS_ROM+4], A
                                        (0718)     mov    A,[X+5]
                                        (0719)     mov    [OneWire_DS_ROM+5], A
                                        (0720)     mov    A,[X+6]
                                        (0721)     mov    [OneWire_DS_ROM+6], A
                                        (0722)     mov    A,[X+7]
                                        (0723)     mov    [OneWire_DS_ROM+7], A
                                        (0724) 
                                        (0725)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0726)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0727)     ret
                                        (0728) .ENDSECTION
                                        (0729) 
                                        (0730) .SECTION
                                        (0731) ;-----------------------------------------------------------------------------
                                        (0732) ;  FUNCTION NAME: OneWire_DS_fFindFirst
                                        (0733) ;
                                        (0734) ;  DESCRIPTION:
                                        (0735) ;     Find the first device on the 1-Wire bus.
                                        (0736) ;-----------------------------------------------------------------------------
                                        (0737) ;  ARGUMENTS:
                                        (0738) ;     none.
                                        (0739) ;
                                        (0740) ;  RAM BUFFER CONTENTS:
                                        (0741) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (0742) ;
                                        (0743) ;  RETURNS:
                                        (0744) ;     A = 01h if device found
                                        (0745) ;     A = 00h if device not found
                                        (0746) ;
                                        (0747) ;  SIDE EFFECTS:
                                        (0748) ;    The A and X registers may be modified by this or future implementations
                                        (0749) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0750) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0751) ;    responsibility to preserve their values across calls to fastcall16
                                        (0752) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0753) ;    CUR_PP
                                        (0754) ;    IDX_PP
                                        (0755) ;-----------------------------------------------------------------------------
                                        (0756)  OneWire_DS_fFindFirst:
                                        (0757) _OneWire_DS_fFindFirst:
                                        (0758)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0759) 
                                        (0760)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (0761)     mov   [OneWire_DS_LastDiscrepancy], 00h
                                        (0762)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (0763)     mov   [OneWire_DS_LastDeviceFlag], 00h
                                        (0764)     RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
                                        (0765)     mov   [OneWire_DS_LastFamilyDiscrepancy], 00h
                                        (0766)     call  OneWire_DS_Search
                                        (0767) 
                                        (0768)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0769)     ret
                                        (0770) .ENDSECTION
                                        (0771) 
                                        (0772) .SECTION
                                        (0773) ;-----------------------------------------------------------------------------
                                        (0774) ;  FUNCTION NAME: OneWire_DS_fFindNext
                                        (0775) ;
                                        (0776) ;  DESCRIPTION:
                                        (0777) ;     Find the first device on the 1-Wire bus.
                                        (0778) ;-----------------------------------------------------------------------------
                                        (0779) ;
                                        (0780) ;  ARGUMENTS:
                                        (0781) ;     none.
                                        (0782) ;
                                        (0783) ;  RAM BUFFER CONTENTS:
                                        (0784) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (0785) ;
                                        (0786) ;  RETURNS:
                                        (0787) ;     A = 01h if device found
                                        (0788) ;     A = 00h if device not found, end of search
                                        (0789) ;
                                        (0790) ;  SIDE EFFECTS:
                                        (0791) ;    The A and X registers may be modified by this or future implementations
                                        (0792) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0793) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0794) ;    responsibility to preserve their values across calls to fastcall16
                                        (0795) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (0796) ;    CUR_PP
                                        (0797) ;    IDX_PP
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799)  OneWire_DS_fFindNext:
                                        (0800) _OneWire_DS_fFindNext:
                                        (0801)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0802) 
                                        (0803)     call  OneWire_DS_Search
                                        (0804) 
                                        (0805)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0806)     ret
                                        (0807) .ENDSECTION
                                        (0808) 
                                        (0809) .SECTION
                                        (0810) ;-----------------------------------------------------------------------------
                                        (0811) ;  FUNCTION NAME: OneWire_DS_Search
                                        (0812) ;
                                        (0813) ;  DESCRIPTION:
                                        (0814) ;     Perform the 1-Wire search algorithm with the current search state.
                                        (0815) ;-----------------------------------------------------------------------------
                                        (0816) ;  ARGUMENTS:
                                        (0817) ;     none.
                                        (0818) ;
                                        (0819) ;  RAM BUFFER CONTENTS:
                                        (0820) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (0821) ;
                                        (0822) ;  RETURNS:
                                        (0823) ;     A = 01h if device found
                                        (0824) ;     A = 00h if device not found, end of search
                                        (0825) ;
                                        (0826) ;  SIDE EFFECTS:
                                        (0827) ;    The A and X registers may be modified by this or future implementations
                                        (0828) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0829) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0830) ;    responsibility to perserve their values across calls to fastcall16
                                        (0831) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (0832) ;    CUR_PP
                                        (0833) ;    IDX_PP
                                        (0834) ;-----------------------------------------------------------------------------
                                        (0835) ID_BIT_NUMBER:              equ   0
                                        (0836) LAST_ZERO:                  equ   1
                                        (0837) ROM_BYTE_NUMBER:            equ   2
                                        (0838) SEARCH_RESULT:              equ   3
                                        (0839) ID_BIT:                     equ   4
                                        (0840) CMP_ID_BIT:                 equ   5
                                        (0841) ROM_BYTE_MASK:              equ   6
                                        (0842) SEARCH_DIRECTION:           equ   7
                                        (0843) 
                                        (0844)  OneWire_DS_Search:
                                        (0845) _OneWire_DS_Search:
                                        (0846)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0847)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0848) 
                                        (0849)     mov   X,SP                                   ; Get location of stack
                                        (0850)     add   SP,08h                                 ; Make locations for local variables
                                        (0851)     RAM_SETPAGE_IDX2STK
                                        (0852)     mov   [X+ID_BIT_NUMBER],01h                  ; Initialize for search
                                        (0853)     mov   [X+LAST_ZERO],00h
                                        (0854)     mov   [X+ROM_BYTE_NUMBER],00h
                                        (0855)     mov   [X+ROM_BYTE_MASK],01h
                                        (0856)     mov   [X+SEARCH_RESULT],00h
                                        (0857)     RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value
                                        (0858)     mov   [OneWire_DS_bCRC8Value],00h
                                        (0859)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (0860)     mov   A,[OneWire_DS_LastDeviceFlag]
                                        (0861)     jnz   .check_result
                                        (0862)     call  OneWire_DS_fReset
                                        (0863)     jz    .search_return_false
                                        (0864) 
                                        (0865)     mov   A,F0h                                  ; Search command
                                        (0866)     push  X
                                        (0867)     call  OneWire_DS_WriteByte
                                        (0868)     pop   X
                                        (0869) .search_loop:
                                        (0870)     call  OneWire_DS_bReadBit
                                        (0871)     mov   [X+ID_BIT],A
                                        (0872)     call  OneWire_DS_bReadBit
                                        (0873)     mov   [X+CMP_ID_BIT],A
                                        (0874)     and   A,01h
                                        (0875)     and   A,[X+ID_BIT]
                                        (0876)     jnz   .check_search
                                        (0877) 
                                        (0878) .search_else_1:
                                        (0879)     mov   A,[X+ID_BIT]                           ; If ID_BIT != CMP_ID_BIT
                                        (0880)     cmp   A,[X+CMP_ID_BIT]
                                        (0881)     jz    .search_else_2
                                        (0882)     mov   A,[X+ID_BIT]
                                        (0883)     mov   [X+SEARCH_DIRECTION],A
                                        (0884)     jmp   .search_set_or_clear
                                        (0885) .search_else_2:
                                        (0886)     mov   A,[X+ID_BIT_NUMBER]
                                        (0887)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (0888)     cmp   A,[OneWire_DS_LastDiscrepancy]
                                        (0889)     jnc   .search_else_3
                                        (0890)     push  X
                                        (0891)     mov   X,[X+ROM_BYTE_NUMBER]
                                        (0892)     RAM_SETPAGE_IDX >OneWire_DS_ROM
                                        (0893)     mov   A,[X+OneWire_DS_ROM]
                                        (0894)     RAM_SETPAGE_IDX2STK
                                        (0895)     pop   X
                                        (0896)     and   A,[X+ROM_BYTE_MASK]
                                        (0897)     jnz   .search_dir_1
                                        (0898)     mov   [X+SEARCH_DIRECTION],00h
                                        (0899)     jmp   .search_is_dir_0
                                        (0900) .search_dir_1:
                                        (0901)     mov   [X+SEARCH_DIRECTION],01h
                                        (0902)     jmp   .search_is_dir_0
                                        (0903) .search_else_3:
                                        (0904)     mov   A,[X+ID_BIT_NUMBER]
                                        (0905)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (0906)     cmp   A,[OneWire_DS_LastDiscrepancy]         ;SEARCH_DIRECTION = (ID_BIT_NUMBER == LastDiscrepancy search_direction)
                                        (0907)     jnz   .search_dir_1_2
                                        (0908)     mov   [X+SEARCH_DIRECTION],01h
                                        (0909)     jmp   .search_is_dir_0
                                        (0910) .search_dir_1_2:
                                        (0911)     mov   [X+SEARCH_DIRECTION],00h
                                        (0912) .search_is_dir_0:
                                        (0913)     mov   A,[X+SEARCH_DIRECTION]
                                        (0914)     jnz   .search_set_or_clear
                                        (0915)     mov   A,[X+ID_BIT_NUMBER]
                                        (0916)     mov   [X+LAST_ZERO],A
                                        (0917)     cmp   A,09h
                                        (0918)     jnc   .search_set_or_clear
                                        (0919)     mov   A,[X+LAST_ZERO]
                                        (0920)     RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
                                        (0921)     mov   [OneWire_DS_LastFamilyDiscrepancy],A
                                        (0922) .search_set_or_clear:
                                        (0923)     cmp   [X+SEARCH_DIRECTION],01h
                                        (0924)     jnz   .search_else_4
                                        (0925)     mov   A,[X+ROM_BYTE_MASK]
                                        (0926)     push  X
                                        (0927)     mov   X,[X+ROM_BYTE_NUMBER]
                                        (0928)     RAM_SETPAGE_IDX >OneWire_DS_ROM
                                        (0929)     or    [X+OneWire_DS_ROM],A
                                        (0930)     RAM_SETPAGE_IDX2STK
                                        (0931)     pop   X
                                        (0932)     jmp   .search_write_direction
                                        (0933) .search_else_4:
                                        (0934)     mov   A,[X+ROM_BYTE_MASK]
                                        (0935)     push  X
                                        (0936)     mov   X,[X+ROM_BYTE_NUMBER]
                                        (0937)     cpl   A
                                        (0938)     RAM_SETPAGE_IDX >OneWire_DS_ROM
                                        (0939)     and   [X+OneWire_DS_ROM],A
                                        (0940)     RAM_SETPAGE_IDX2STK
                                        (0941)     pop   X
                                        (0942) .search_write_direction:
                                        (0943)     mov   A,[X+SEARCH_DIRECTION]
                                        (0944)     call  OneWire_DS_WriteBit
                                        (0945)     inc   [X+ID_BIT_NUMBER]
                                        (0946)     asl   [X+ROM_BYTE_MASK]
                                        (0947)     cmp   [X+ROM_BYTE_MASK],00h
                                        (0948)     jnz   .check_if_loop
                                        (0949)     push  X
                                        (0950)     mov   X,[X+ROM_BYTE_NUMBER]
                                        (0951)     RAM_SETPAGE_IDX >OneWire_DS_ROM
                                        (0952)     mov   A,[X+OneWire_DS_ROM]
                                        (0953)     RAM_SETPAGE_IDX2STK
                                        (0954)     call  OneWire_DS_bCRC8
                                        (0955)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0956)     pop   X
                                        (0957)     inc   [X+ROM_BYTE_NUMBER]
                                        (0958)     mov   [X+ROM_BYTE_MASK],01h
                                        (0959) .check_if_loop:
                                        (0960)     cmp   [X+ROM_BYTE_NUMBER],08h
                                        (0961)     jc    .search_loop
                                        (0962) .check_search:
                                        (0963)     cmp   [X+ID_BIT_NUMBER],41h
                                        (0964)     jc    .check_result
                                        (0965)     RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value
                                        (0966)     cmp   [OneWire_DS_bCRC8Value],00h
                                        (0967)     jnz   .check_result
                                        (0968)     mov   A,[X+LAST_ZERO]
                                        (0969)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (0970)     mov   [OneWire_DS_LastDiscrepancy],A
                                        (0971)     jnz   .search_not_last
                                        (0972)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (0973)     mov   [OneWire_DS_LastDeviceFlag],01h
                                        (0974) .search_not_last:
                                        (0975)     mov   [X+SEARCH_RESULT],01h
                                        (0976) ; If no device found then reset counter so next search will be like a first
                                        (0977) .check_result:
                                        (0978)     mov   A,[X+SEARCH_RESULT]
                                        (0979)     jz    .search_return_false
                                        (0980)     RAM_SETPAGE_CUR >OneWire_DS_ROM
                                        (0981)     mov   A,[OneWire_DS_ROM+0]
                                        (0982)     jz    .search_return_false
                                        (0983) .search_return_true:
                                        (0984)     mov   A,01h
                                        (0985)     jmp   .search_clean_up
                                        (0986) .search_return_false:
                                        (0987)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (0988)     mov   [OneWire_DS_LastDiscrepancy],00h
                                        (0989)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (0990)     mov   [OneWire_DS_LastDeviceFlag],00h
                                        (0991)     RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
                                        (0992)     mov   [OneWire_DS_LastFamilyDiscrepancy],00h
                                        (0993)     mov   A,00h
                                        (0994) .search_clean_up:
                                        (0995)     add   SP,-08h                                ; Restore SP
                                        (0996) 
                                        (0997)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0998)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0999)     ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) .SECTION
                                        (1003) ;-----------------------------------------------------------------------------
                                        (1004) ;  FUNCTION NAME: OneWire_DS_fVerify
                                        (1005) ;
                                        (1006) ;  DESCRIPTION:
                                        (1007) ;     Verify the device with the ROM number in OneWire_DS_ROM is present.
                                        (1008) ;-----------------------------------------------------------------------------
                                        (1009) ;  ARGUMENTS:
                                        (1010) ;     none.
                                        (1011) ;
                                        (1012) ;  RAM BUFFER CONTENTS:
                                        (1013) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (1014) ;
                                        (1015) ;  RETURNS:
                                        (1016) ;     A = 01h if device found
                                        (1017) ;     A = 00h if device not found
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16
                                        (1024) ;    functions. Currently only the page pointer registers listed below are modified:
                                        (1025) ;    CUR_PP, IDX_PP
                                        (1026) ;-----------------------------------------------------------------------------
                                        (1027) ROM_BACKUP:                 equ   0
                                        (1028) LD_BACKUP:                  equ   8
                                        (1029) LDF_BACKUP:                 equ   9
                                        (1030) LFD_BACKUP:                 equ   0x0A
                                        (1031) 
                                        (1032)  OneWire_DS_fVerify:
                                        (1033) _OneWire_DS_fVerify:
                                        (1034)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1035)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1036) 
                                        (1037)     mov   X, SP                                  ; Get location of stack
                                        (1038)     add   SP, 0Bh                                ; Make locations for local variables
                                        (1039) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (1040)     mov   A, reg[STK_PP]                         ; Set A to right page to back up ROM to stack
                                        (1041) ELSE
                                        (1042)     mov   A, 00h
                                        (1043) ENDIF
                                        (1044)     call  OneWire_DS_GetROM
                                        (1045)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1046)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1047)     RAM_SETPAGE_IDX2STK
                                        (1048)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (1049)     mov   A,[OneWire_DS_LastDiscrepancy]
                                        (1050)     mov   [X+LD_BACKUP],A
                                        (1051)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (1052)     mov   A,[OneWire_DS_LastDeviceFlag]
                                        (1053)     mov   [X+LDF_BACKUP],A
                                        (1054)     RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
                                        (1055)     mov   A,[OneWire_DS_LastFamilyDiscrepancy]
                                        (1056)     mov   [X+LFD_BACKUP],A
                                        (1057)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (1058)     mov   [OneWire_DS_LastDiscrepancy],40h
                                        (1059)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (1060)     mov   [OneWire_DS_LastDeviceFlag],00h
                                        (1061)     push  X                                      ; Search does not preserve X
                                        (1062)     call  OneWire_DS_Search
                                        (1063)     pop   X
                                        (1064)     push  A                                      ; Save result
                                        (1065)     RAM_X_POINTS_TO_INDEXPAGE
                                        (1066)     jz    .Verify_End
                                        (1067)     RAM_SETPAGE_IDX2STK
                                        (1068)     RAM_SETPAGE_CUR >OneWire_DS_ROM
                                        (1069)     mov   A,[OneWire_DS_ROM+0]
                                        (1070)     cmp   A,[X+ROM_BACKUP]
                                        (1071)     jnz   .Verify_Fail
                                        (1072)     mov   A,[OneWire_DS_ROM+1]
                                        (1073)     cmp   A,[X+ROM_BACKUP+1]
                                        (1074)     jnz   .Verify_Fail
                                        (1075)     mov   A,[OneWire_DS_ROM+2]
                                        (1076)     cmp   A,[X+ROM_BACKUP+2]
                                        (1077)     jnz   .Verify_Fail
                                        (1078)     mov   A,[OneWire_DS_ROM+3]
                                        (1079)     cmp   A,[X+ROM_BACKUP+3]
                                        (1080)     jnz   .Verify_Fail
                                        (1081)     mov   A,[OneWire_DS_ROM+4]
                                        (1082)     cmp   A,[X+ROM_BACKUP+4]
                                        (1083)     jnz   .Verify_Fail
                                        (1084)     mov   A,[OneWire_DS_ROM+5]
                                        (1085)     cmp   A,[X+ROM_BACKUP+5]
                                        (1086)     jnz   .Verify_Fail
                                        (1087)     mov   A,[OneWire_DS_ROM+6]
                                        (1088)     cmp   A,[X+ROM_BACKUP+6]
                                        (1089)     jnz   .Verify_Fail
                                        (1090)     mov   A,[OneWire_DS_ROM+7]
                                        (1091)     cmp   A,[X+ROM_BACKUP+7]
                                        (1092)     jz    .Verify_End
                                        (1093) .Verify_Fail:
                                        (1094)     pop   A                                      ; Replace result
                                        (1095)     mov   A,00h
                                        (1096)     push  A
                                        (1097) .Verify_End:
                                        (1098) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (1099)     mov   A, reg[STK_PP]                         ; Set A to right page to recover ROM from stack
                                        (1100) ELSE
                                        (1101)     mov   A, 00h
                                        (1102) ENDIF
                                        (1103)     call  OneWire_DS_SetROM
                                        (1104)     RAM_X_POINTS_TO_INDEXPAGE
                                        (1105)     RAM_SETPAGE_IDX2STK
                                        (1106)     mov   A, [X+LD_BACKUP]
                                        (1107)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (1108)     mov   [OneWire_DS_LastDiscrepancy], A
                                        (1109)     mov   A, [X+LDF_BACKUP]
                                        (1110)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (1111)     mov   [OneWire_DS_LastDeviceFlag], A
                                        (1112)     mov   A, [X+LFD_BACKUP]
                                        (1113)     RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
                                        (1114)     mov   [OneWire_DS_LastFamilyDiscrepancy], A
                                        (1115)     pop   A                                      ; Restore result
                                        (1116)     add   SP, -0Bh                               ; Restore SP
                                        (1117) 
                                        (1118)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1119)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1120)     ret
                                        (1121) .ENDSECTION
                                        (1122) 
                                        (1123) .SECTION
                                        (1124) ;-----------------------------------------------------------------------------
                                        (1125) ;  FUNCTION NAME: OneWire_DS_FamilyTargetSetup
                                        (1126) ;
                                        (1127) ;  DESCRIPTION:
                                        (1128) ;     Setup the search to find the device type family code on the next call
                                        (1129) ;     to OneWire_DS_Next().
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  ARGUMENTS:
                                        (1132) ;     A contains family code.
                                        (1133) ;
                                        (1134) ;  RAM BUFFER CONTENTS:
                                        (1135) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (1136) ;
                                        (1137) ;  RETURNS:
                                        (1138) ;     none.
                                        (1139) ;
                                        (1140) ;  SIDE EFFECTS:
                                        (1141) ;    The A and X registers may be modified by this or future implementations
                                        (1142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1144) ;    responsibility to preserve their values across calls to fastcall16
                                        (1145) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (1146) ;    CUR_PP
                                        (1147) ;    IDX_PP
                                        (1148) ;-----------------------------------------------------------------------------
                                        (1149)  OneWire_DS_FamilyTargetSetup:
                                        (1150) _OneWire_DS_FamilyTargetSetup:
                                        (1151)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1152)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1153)     RAM_SETPAGE_CUR >OneWire_DS_ROM
                                        (1154)     RAM_SETPAGE_IDX >OneWire_DS_ROM
                                        (1155) 
                                        (1156)     mov   [OneWire_DS_ROM+0], A
                                        (1157)     push  X
                                        (1158)     mov   X, 07h
                                        (1159) .loop:
                                        (1160)     mov   [X+OneWire_DS_ROM], 00h
                                        (1161)     dec   X
                                        (1162)     jnz   .loop
                                        (1163)     pop   X
                                        (1164)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (1165)     mov   [OneWire_DS_LastDiscrepancy], 40h
                                        (1166)     RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
                                        (1167)     mov   [OneWire_DS_LastFamilyDiscrepancy], 00h
                                        (1168)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (1169)     mov   [OneWire_DS_LastDeviceFlag], 00h
                                        (1170) 
                                        (1171)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1172)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1173)     ret
                                        (1174) .ENDSECTION
                                        (1175) 
                                        (1176) .SECTION
                                        (1177) ;-----------------------------------------------------------------------------
                                        (1178) ;  FUNCTION NAME: OneWire_DS_FamilySkipSetup
                                        (1179) ;
                                        (1180) ;  DESCRIPTION:
                                        (1181) ;     Setup the search to skip the current device type on the next call
                                        (1182) ;     to OneWire_DS_fFindNext().
                                        (1183) ;-----------------------------------------------------------------------------
                                        (1184) ;  ARGUMENTS:
                                        (1185) ;     None.
                                        (1186) ;
                                        (1187) ;  RAM BUFFER CONTENTS:
                                        (1188) ;     OneWire_DS_ROM = ROM number of 1-Wire device
                                        (1189) ;
                                        (1190) ;  RETURNS:
                                        (1191) ;     none.
                                        (1192) ;
                                        (1193) ;  SIDE EFFECTS:
                                        (1194) ;    The A and X registers may be modified by this or future implementations
                                        (1195) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1196) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1197) ;    responsibility to preserve their values across calls to fastcall16
                                        (1198) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (1199) ;     CUR_PP
                                        (1200) ;-----------------------------------------------------------------------------
                                        (1201)  OneWire_DS_FamilySkipSetup:
                                        (1202) _OneWire_DS_FamilySkipSetup:
                                        (1203)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1204) 
                                        (1205)     RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
                                        (1206)     mov   A,[OneWire_DS_LastFamilyDiscrepancy]
                                        (1207)     mov   [OneWire_DS_LastFamilyDiscrepancy],00h
                                        (1208)     RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
                                        (1209)     mov   [OneWire_DS_LastDiscrepancy],A
                                        (1210)     jnz   .EndOfList
                                        (1211)     RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
                                        (1212)     mov   [OneWire_DS_LastDeviceFlag],01h
                                        (1213) .EndOfList:
                                        (1214) 
                                        (1215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1216)     ret
                                        (1217) .ENDSECTION
                                        (1218) ENDIF
                                        (1219) 
                                        (1220) .SECTION
                                        (1221) ;-----------------------------------------------------------------------------
                                        (1222) ;  FUNCTION NAME: OneWire_DS_SendTxDataWait
                                        (1223) ;
                                        (1224) ;  DESCRIPTION:
                                        (1225) ;     Initiates an XCVR data transfer and waits for it to complete.
                                        (1226) ;
                                        (1227) ;-----------------------------------------------------------------------------
                                        (1228) ;  ARGUMENTS:
                                        (1229) ;     BYTE  bTxData - data to transmit.
                                        (1230) ;        Passed in Accumulator.
                                        (1231) ;
                                        (1232) ;  RETURNS:
                                        (1233) ;     none.
                                        (1234) ;
                                        (1235) ;  SIDE EFFECTS:
                                        (1236) ;    The A and X registers may be modified by this or future implementations
                                        (1237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1239) ;    responsibility to preserve their values across calls to fastcall16
                                        (1240) ;    functions.
                                        (1241) ;
                                        (1242) ;  THEORY of OPERATION:
                                        (1243) ;     Writes data to the TX buffer register.
                                        (1244) ;-----------------------------------------------------------------------------
                                        (1245)  OneWire_DS_SendTxDataWait:
                                        (1246) _OneWire_DS_SendTxDataWait:
                                        (1247)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (1248) 
07C3: 60 29    MOV   REG[0x29],A        (1249)     mov    reg[OneWire_DS_XCVR_TX_BUFFER_REG], A
                                        (1250) .WaitForTxComplete:
07C5: 5D 2B    MOV   A,REG[0x2B]        (1251)     mov    A,  reg[OneWire_DS_XCVR_CONTROL_REG]
07C7: 21 20    AND   A,0x20             (1252)     and    A, SPIM_SPI_COMPLETE
07C9: AF FB    JZ    0x07C5             (1253)     jz     .WaitForTxComplete
                                        (1254) 
                                        (1255)     RAM_EPILOGUE RAM_USE_CLASS_1
07CB: 7F       RET                      (1256)     ret
                                        (1257) .ENDSECTION
                                        (1258) 
                                        (1259) IF (OneWire_DS_OVERDRIVE_ENABLE)
                                        (1260) .SECTION
                                        (1261) ;-----------------------------------------------------------------------------
                                        (1262) ;  FUNCTION NAME: OneWire_DS_SetOverdrive
                                        (1263) ;
                                        (1264) ;  DESCRIPTION:
                                        (1265) ;     Set OverDrive speed
                                        (1266) ;-----------------------------------------------------------------------------
                                        (1267) ;  ARGUMENTS:
                                        (1268) ;     none.
                                        (1269) ;
                                        (1270) ;  RETURNS:
                                        (1271) ;     none.
                                        (1272) ;
                                        (1273) ;  SIDE EFFECTS:
                                        (1274) ;    The A and X registers may be modified by this or future implementations
                                        (1275) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1276) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1277) ;    responsibility to preserve their values across calls to fastcall16
                                        (1278) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (1279) ;     CUR_PP
                                        (1280) ;-----------------------------------------------------------------------------
                                        (1281)  OneWire_DS_SetOverdrive:
                                        (1282) _OneWire_DS_SetOverdrive:
                                        (1283)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1284) 
                                        (1285)     RAM_SETPAGE_CUR >OneWire_DS_bMode
                                        (1286)     or    [OneWire_DS_bMode],OD_MODE
                                        (1287)     mov   reg[OneWire_DS_BITCLK_PERIOD_REG], BIT_PERIOD                        ; OverDrive Bit period
                                        (1288) 
                                        (1289)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1290)     ret
                                        (1291) .ENDSECTION
                                        (1292) 
                                        (1293) .SECTION
                                        (1294) ;-----------------------------------------------------------------------------
                                        (1295) ;  FUNCTION NAME: OneWire_DS_ClearOverdrive
                                        (1296) ;
                                        (1297) ;  DESCRIPTION:
                                        (1298) ;     Clear OverDrive speed
                                        (1299) ;-----------------------------------------------------------------------------
                                        (1300) ;  ARGUMENTS:
                                        (1301) ;     none.
                                        (1302) ;
                                        (1303) ;  RETURNS:
                                        (1304) ;     none.
                                        (1305) ;
                                        (1306) ;  SIDE EFFECTS:
                                        (1307) ;    The A and X registers may be modified by this or future implementations
                                        (1308) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1309) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1310) ;    responsibility to preserve their values across calls to fastcall16
                                        (1311) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (1312) ;     CUR_PP
                                        (1313) ;-----------------------------------------------------------------------------
                                        (1314)  OneWire_DS_ClearOverdrive:
                                        (1315) _OneWire_DS_ClearOverdrive:
                                        (1316)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1317)     RAM_SETPAGE_CUR >OneWire_DS_bMode
                                        (1318) 
                                        (1319)     and   [OneWire_DS_bMode],~OD_MODE
                                        (1320) 	mov   reg[OneWire_DS_BITCLK_PERIOD_REG], BIT_PERIOD
                                        (1321) 
                                        (1322)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1323)     ret
                                        (1324) .ENDSECTION
                                        (1325) 
                                        (1326) ENDIF
                                        (1327) 
                                        (1328) IF (OneWire_DS_PARASITE_ENABLE)
                                        (1329) .SECTION
                                        (1330) ;-----------------------------------------------------------------------------
                                        (1331) ;  FUNCTION NAME: OneWire_DS_WriteByteStrong
                                        (1332) ;
                                        (1333) ;  DESCRIPTION:
                                        (1334) ;     Write a byte to the OneWireOut pin, and set the interrupt to change the
                                        (1335) ;     port to strong mode immediately after write is complete
                                        (1336) ;-----------------------------------------------------------------------------
                                        (1337) ;  ARGUMENTS:
                                        (1338) ;     A => byte output to the OneWireOut pin
                                        (1339) ;
                                        (1340) ;  RETURNS:
                                        (1341) ;     none.
                                        (1342) ;
                                        (1343) ;  SIDE EFFECTS:
                                        (1344) ;    The A and X registers may be modified by this or future implementations
                                        (1345) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1346) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1347) ;    responsibility to preserve their values across calls to fastcall16
                                        (1348) ;    functions.  Currently only the page pointer registers listed below are modified:
                                        (1349) ;     CUR_PP
                                        (1350) ;-----------------------------------------------------------------------------
                                        (1351)  OneWire_DS_WriteByteStrong:
                                        (1352) _OneWire_DS_WriteByteStrong:
                                        (1353)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (1354)     
                                        (1355)     push  A                                      ; Save byte to write on stack
                                        (1356)     mov   X, 07h                                 ; Set up loop for writing bits
                                        (1357) .Write_ByteStrong_loop:
                                        (1358)     call  OneWire_DS_WriteBit                    ; Output LSB of A, bits 0-6
                                        (1359)     pop   A                                      ; Restore A
                                        (1360)     rrc   A                                      ; Rotate A for the next bit
                                        (1361)     push  A                                      ; Save remaining bits
                                        (1362)     dec   X
                                        (1363)     jnz   .Write_ByteStrong_loop                 ; Loop until the whole byte is output
                                        (1364)     M8C_ClearIntFlag OneWire_DS_BIT_INT_CLR, OneWire_DS_BIT_INT_MASK  ; Clear the interrupt
                                        (1365)     M8C_EnableIntMask OneWire_DS_BIT_INT_REG, OneWire_DS_BIT_INT_MASK ; enable interrupt
                                        (1366)     call  OneWire_DS_WriteBit                    ; Output LSB of A, bit 7
                                        (1367)     M8C_DisableIntMask OneWire_DS_BIT_INT_REG, OneWire_DS_BIT_INT_MASK ; disable interrupt
                                        (1368)     pop   A                                      ; Clean up stack
                                        (1369) 
                                        (1370)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (1371)     ret
                                        (1372) .ENDSECTION
                                        (1373) 
                                        (1374) .SECTION
                                        (1375) ;-----------------------------------------------------------------------------
                                        (1376) ;  FUNCTION NAME: OneWire_DS_SetResistive
                                        (1377) ;
                                        (1378) ;  DESCRIPTION:
                                        (1379) ;     Set port back to resistive pull-up
                                        (1380) ;-----------------------------------------------------------------------------
                                        (1381) ;  ARGUMENTS:
                                        (1382) ;     none.
                                        (1383) ;
                                        (1384) ;  RETURNS:
                                        (1385) ;     none.
                                        (1386) ;
                                        (1387) ;  SIDE EFFECTS:
                                        (1388) ;    The A and X registers may be modified by this or future implementations
                                        (1389) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1390) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1391) ;    responsibility to preserve their values across calls to fastcall16
                                        (1392) ;    functions.
                                        (1393) ;-----------------------------------------------------------------------------
                                        (1394)  OneWire_DS_SetResistive:
                                        (1395) _OneWire_DS_SetResistive:
                                        (1396)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (1397) 
                                        (1398)     M8C_SetBank1
                                        (1399)     or    reg[OneWire_DS_OUT_PORT_DM1],OneWire_DS_OUT_PORT_MASK
                                        (1400)     M8C_SetBank0
                                        (1401) 
                                        (1402)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (1403)     ret
                                        (1404) .ENDSECTION
                                        (1405) 
                                        (1406) ENDIF
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
07CC: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
07CD: 10       PUSH  X                  (0209)     push  X
07CE: 28       ROMX                     (0210)     romx                               ; Get character from ROM
07CF: B0 04    JNZ   0x07D4             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
07D1: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
07D2: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
07D3: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
07D4: 90 3C    CALL  LCD_WriteData|_LCD_Write_Data|LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
07D6: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
07D7: 18       POP   A                  (0220)     pop   A
07D8: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
07D9: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
07DB: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
07DC: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
07EE: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
07EF: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
07F0: 67       ASR   A                  (0262)     asr   A
07F1: 67       ASR   A                  (0263)     asr   A
07F2: 67       ASR   A                  (0264)     asr   A
07F3: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
07F5: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
07F7: 90 19    CALL  LCD_WriteData|_LCD_Write_Data|LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
07F9: 18       POP   A                  (0268)     pop   A                            ; Restore value
07FA: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
07FC: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
07FE: 90 12    CALL  LCD_WriteData|_LCD_Write_Data|LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0800: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0801: 4B       SWAP  A,X                (0305)     swap  A,X
0802: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0804: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0805: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0807: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0808: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
080A: A0 06    JZ    0x0811             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
080C: 90 04    CALL  LCD_WriteData|_LCD_Write_Data|LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
080E: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
080F: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0811: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0812: 90 5F    CALL  0x0873             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0814: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0815: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0816: 67       ASR   A                  (0390)     asr   A
0817: 67       ASR   A                  (0391)     asr   A
0818: 67       ASR   A                  (0392)     asr   A
0819: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
081B: 90 38    CALL  0x0855             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
081D: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
081E: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0820: 40       NOP                      (0397)     nop
0821: 40       NOP                      (0398)     nop
0822: 40       NOP                      (0399)     nop
0823: 90 30    CALL  0x0855             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0825: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0826: 90 4B    CALL  0x0873             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0828: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0829: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
082A: 67       ASR   A                  (0436)     asr   A
082B: 67       ASR   A                  (0437)     asr   A
082C: 67       ASR   A                  (0438)     asr   A
082D: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
082F: 90 09    CALL  0x083A             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0831: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0832: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0834: 40       NOP                      (0443)     nop
0835: 40       NOP                      (0444)     nop
0836: 40       NOP                      (0445)     nop
0837: 90 01    CALL  0x083A             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0839: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
083A: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
083B: 26 16 80 AND   [0x16],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
083E: 51 16    MOV   A,[0x16]           (0480)     mov   A,[Port_2_Data_SHADE]
0840: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0842: 18       POP   A                  (0483)     pop   A
0843: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0845: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0847: 2A 16    OR    A,[0x16]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0849: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
084B: 53 16    MOV   [0x16],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
084D: 40       NOP                      (0489)     nop
084E: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0850: 53 16    MOV   [0x16],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0852: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0854: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0855: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0856: 26 16 80 AND   [0x16],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0859: 2E 16 20 OR    [0x16],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
085C: 51 16    MOV   A,[0x16]           (0527)     mov   A,[Port_2_Data_SHADE]
085E: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0860: 18       POP   A                  (0530)     pop   A
0861: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0863: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0865: 2A 16    OR    A,[0x16]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0867: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0869: 53 16    MOV   [0x16],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
086B: 40       NOP                      (0536)     NOP
086C: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
086E: 53 16    MOV   [0x16],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0870: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0872: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0873: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0874: 26 16 80 AND   [0x16],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0877: 51 16    MOV   A,[0x16]           (0574)     mov   A,[Port_2_Data_SHADE]
0879: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
087B: 26 1A F0 AND   [0x1A],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
087E: 51 1A    MOV   A,[0x1A]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0880: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0882: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0884: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0886: 2E 16 40 OR    [0x16],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0889: 51 16    MOV   A,[0x16]           (0584)     mov   A,[Port_2_Data_SHADE]
088B: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
088D: 40       NOP                      (0586)     NOP
                                        (0587) 
088E: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
088F: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0891: 2E 16 50 OR    [0x16],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0894: 51 16    MOV   A,[0x16]           (0593)     mov   A,[Port_2_Data_SHADE]
0896: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0898: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0899: 40       NOP                      (0597)     nop
089A: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
089C: 08       PUSH  A                  (0610)     push  A
089D: 26 16 C0 AND   [0x16],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
08A0: 51 16    MOV   A,[0x16]           (0612)     mov   A,[Port_2_Data_SHADE]
08A2: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
08A4: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
08A5: 40       NOP                      (0616)     nop                                    ; fastest PSoC
08A6: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
08A7: 2E 16 50 OR    [0x16],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
08AA: 51 16    MOV   A,[0x16]           (0620)     mov   A,[Port_2_Data_SHADE]
08AC: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
08AE: 40       NOP                      (0623)     nop
08AF: 40       NOP                      (0624)     nop
                                        (0625) 
08B0: 26 16 C0 AND   [0x16],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
08B3: 51 16    MOV   A,[0x16]           (0627)     mov   A,[Port_2_Data_SHADE]
08B5: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
08B7: 18       POP   A                  (0630)     pop   A
08B8: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
08BA: A0 04    JZ    0x08BF             (0633)     jz    .UNLOCK
08BC: 79       DEC   X                  (0634)     dec   X
08BD: BF D3    JNZ   0x0891             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
08BF: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
08C0: 2E 1A 7F OR    [0x1A],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
08C3: 51 1A    MOV   A,[0x1A]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
08C5: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
08C7: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
08C9: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
08CB: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
08CC: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
08CD: 26 1A 80 AND   [0x1A],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
08D0: 2E 1A 7F OR    [0x1A],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
08D3: 26 1B 80 AND   [0x1B],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
08D6: 51 1A    MOV   A,[0x1A]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
08D8: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
08DA: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
08DC: 51 1B    MOV   A,[0x1B]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
08DE: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
08E0: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
08E2: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
08E4: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
08E6: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
08E8: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
08EA: 50 03    MOV   A,0x3              (0701)     mov   A,03h
08EC: 9F 4C    CALL  0x083A             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
08EE: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
08F0: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
08F2: 50 03    MOV   A,0x3              (0707)     mov   A,03h
08F4: 9F 44    CALL  0x083A             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
08F6: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
08F8: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
08FA: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
08FC: 50 03    MOV   A,0x3              (0714)     mov   A,03h
08FE: 9F 3A    CALL  0x083A             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0900: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0902: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0904: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0906: 9F 32    CALL  0x083A             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0908: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
090A: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
090C: 50 08    MOV   A,0x8              (0726)     mov   A,08h
090E: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0910: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0912: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0914: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0916: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
0918: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
091A: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
091C: 50 06    MOV   A,0x6              (0736)     mov   A,06h
091E: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0920: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0922: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0924: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0926: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0928: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
092A: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
092C: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
092E: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0930: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0932: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0934: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0936: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0938: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
093D: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
093F: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0940: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0942: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0943: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0945: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0946: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0948: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0949: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
094B: 78       DEC   A                  (0828)     dec   A
094C: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
094E: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0957: 08       PUSH  A                  (0871)     push  A
0958: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
095A: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
095C: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
095E: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0960: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0962: D0 06    JNC   0x0969             (0877)     jnc   .Delay50u_End
0964: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0966: 78       DEC   A                  (0880)     dec   A                              ; [4]
0967: BF FE    JNZ   0x0966             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0969: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
096A: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CM.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:32
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2CM_Start
                                        (0031) export  _I2CM_Start
                                        (0032) export   I2CM_Stop
                                        (0033) export  _I2CM_Stop
                                        (0034) export   I2CM_fSendRepeatStart
                                        (0035) export  _I2CM_fSendRepeatStart
                                        (0036) export   I2CM_fSendStart
                                        (0037) export  _I2CM_fSendStart
                                        (0038) export   I2CM_SendStop
                                        (0039) export  _I2CM_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2CM_fReadBytes
                                        (0042) export  _I2CM_bWriteBytes
                                        (0043) export  _I2CM_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2CM_fWrite
                                        (0046) export  _I2CM_fWrite
                                        (0047) 
                                        (0048) export   I2CM_bRead
                                        (0049) export  _I2CM_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2CM_fReadBytes
                                        (0054) export   I2CM_bWriteBytes
                                        (0055) export   I2CM_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2CM_bStatus
                                        (0064) export _I2CM_bStatus
                                        (0065) export  I2CM_bData
                                        (0066) export _I2CM_bData
                                        (0067) export  I2CM_bAddr
                                        (0068) export _I2CM_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area jp_exercice3_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2CM_bStatus:
                                        (0076)  I2CM_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2CM_bData:
                                        (0078)  I2CM_bData:                           blk   1  ; Data transfered
                                        (0079) _I2CM_bXferCnt:
                                        (0080)  I2CM_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2CM_bAddr:                                     ; Bytes
                                        (0082)  I2CM_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2CM_bit_count:
                                        (0084)  I2CM_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2CM_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2CM_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2CM_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2CM_Start:
                                        (0121) _I2CM_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
096B: 2E 18 C0 OR    [0x18],0xC0        (0125)     or   [Port_0_DriveMode_1_SHADE],I2CM_SDA_pin|I2CM_SCL_pin
096E: 26 17 3F AND   [0x17],0x3F        (0126)     and  [Port_0_DriveMode_0_SHADE],~(I2CM_SDA_pin|I2CM_SCL_pin)
                                        (0127) 
                                        (0128) IF(I2CM_DriveMode2)            
0971: 26 19 3F AND   [0x19],0x3F        (0129)     and  [Port_0_DriveMode_2_SHADE],~(I2CM_SDA_pin|I2CM_SCL_pin)
0974: 51 19    MOV   A,[0x19]           (0130)     mov  A,[Port_0_DriveMode_2_SHADE]
0976: 60 03    MOV   REG[0x3],A         (0131)     mov  reg[I2CM_I2CPRTDM2],A
0978: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
097A: 51 18    MOV   A,[0x18]           (0135)     mov  A,[Port_0_DriveMode_1_SHADE]
097C: 60 01    MOV   REG[0x1],A         (0136)     mov  reg[I2CM_I2CPRTDM1],A
097E: 51 17    MOV   A,[0x17]           (0137)     mov  A,[Port_0_DriveMode_0_SHADE]
0980: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2CM_I2CPRTDM0],A
0982: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
0984: 26 14 3F AND   [0x14],0x3F        (0142)     and  [Port_0_Data_SHADE],~(I2CM_SDA_pin|I2CM_SCL_pin)
0987: 51 14    MOV   A,[0x14]           (0143)     mov  A,[Port_0_Data_SHADE]
0989: 60 00    MOV   REG[0x0],A         (0144)     mov  reg[I2CM_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
098B: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: I2CM_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  I2CM_Stop:
                                        (0171) _I2CM_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
098C: 7F       RET                      (0174)     ret
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CM_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _I2CM_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >I2CM_bStatus
098D: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
098E: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
0990: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
0991: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
0993: 55 71 00 MOV   [OneWire_DS_bCRC8Value+35],0x0(0226)     mov   [I2CM_bStatus],0x00                              ; Clear all flags
0996: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],I2CM_RepStart
0999: B0 05    JNZ   0x099F             (0228)     jnz   DoRestartRx
099B: 91 AE    CALL  0x0B4B             (0229)     call  I2C_DoStart                                      ; Send a start and address.
099D: 80 03    JMP   0x09A1             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
099F: 91 77    CALL  0x0B18             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >I2CM_bStatus
09A1: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0235)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
09A4: A0 20    JZ    0x09C5             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
09A6: 2E 71 10 OR    [OneWire_DS_bCRC8Value+35],0x10(0238)     or    [I2CM_bStatus],I2CM_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
09A9: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
09AA: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
09AC: B0 04    JNZ   0x09B1             (0242)     jnz   I2C_READ
09AE: 26 71 EF AND   [OneWire_DS_bCRC8Value+35],0xEF(0243)     and   [I2CM_bStatus],~I2CM_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
09B1: 92 49    CALL  0x0BFC             (0245)     call  I2CM_read                                        ; Read a byte
                                        (0246)     RAM_SETPAGE_CUR >I2CM_bStatus
09B3: 20       POP   X                  (0247)     pop   x                                                ; Restore x
09B4: 10       PUSH  X                  (0248)     push  x
09B5: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
09B7: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0252)     mov   A,[x+RxArrayMSB]
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
09B8: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
09B9: 51 72    MOV   A,[OneWire_DS_bCRC8Value+36](0256)     mov   a,[I2CM_bData]                                   ; Save data in data array
09BB: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
09BD: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
09BE: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
09C0: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
09C3: BF E5    JNZ   0x09A9             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
09C5: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],I2CM_NoStop
09C8: B0 03    JNZ   0x09CC             (0265)     jnz   SkipRxStop
09CA: 92 B6    CALL  _I2CM_SendStop     (0266)     call  I2CM_SendStop
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >I2CM_bStatus
09CC: 50 00    MOV   A,0x0              (0269)     mov   a,I2CM_XFER_ERROR                                ; Clear return value until we test if slave ACKed
09CE: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0270)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed                  ; Test to see if Slave ACKed
09D1: A0 03    JZ    0x09D5             (0271)     jz    End_ReadBytes
09D3: 50 01    MOV   A,0x1              (0272)     mov   a,I2CM_XFER_COMPLETE                             ; Return ACKed True
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
09D5: 7F       RET                      (0276)     ret
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: I2CM_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  I2CM_fReadBytes:		                 
09D6: 64       ASL   A                  (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
09D7: 29 01    OR    A,0x1              (0316)     or    A,0x01                                       ; OR the address with the Read bit.
09D9: 55 71 00 MOV   [OneWire_DS_bCRC8Value+35],0x0(0317)     mov   [I2CM_bStatus],0x00                              ; Clear all flags
09DC: 48 FD 01 TST   [X-3],0x1          (0318)     tst   [x+RxMode_X],I2CM_RepStart
09DF: B0 05    JNZ   0x09E5             (0319)     jnz   DoRestartRxSmm
09E1: 91 68    CALL  0x0B4B             (0320)     call  I2C_DoStart                                      ; Send a start and address.
09E3: 80 03    JMP   0x09E7             (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
09E5: 91 31    CALL  0x0B18             (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
09E7: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0325)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
09EA: A0 1E    JZ    0x0A09             (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
09EC: 2E 71 10 OR    [OneWire_DS_bCRC8Value+35],0x10(0328)     or    [I2CM_bStatus],I2CM_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
09EF: 10       PUSH  X                  (0330)     push  x                                                ; Save X for later
09F0: 7B FE    DEC   [X-2]              (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
09F2: B0 04    JNZ   0x09F7             (0332)     jnz   I2C_READSmm
09F4: 26 71 EF AND   [OneWire_DS_bCRC8Value+35],0xEF(0333)     and   [I2CM_bStatus],~I2CM_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
09F7: 92 03    CALL  0x0BFC             (0335)     call  I2CM_read                                        ; Read a byte
09F9: 20       POP   X                  (0336)     pop   x                                                ; Restore x
09FA: 10       PUSH  X                  (0337)     push  x                                                ; Store x
09FB: 59 00    MOV   X,[X+0]            (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
09FD: 51 72    MOV   A,[OneWire_DS_bCRC8Value+36](0339)     mov   a,[I2CM_bData]                                   ; Save data in data array
09FF: 54 00    MOV   [X+0],A            (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
0A01: 20       POP   X                  (0341)     pop   x                                                ; Restore the original pointer
0A02: 77 00    INC   [X+0]              (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
0A04: 48 FE FF TST   [X-2],0xFF         (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
0A07: BF E7    JNZ   0x09EF             (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
0A09: 48 FD 02 TST   [X-3],0x2          (0346)     tst   [x+RxMode_X],I2CM_NoStop
0A0C: B0 03    JNZ   0x0A10             (0347)     jnz   SkipRxStopSmm
0A0E: 92 72    CALL  _I2CM_SendStop     (0348)     call  I2CM_SendStop
                                        (0349) SkipRxStopSmm:
0A10: 50 00    MOV   A,0x0              (0350)     mov   a,I2CM_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0A12: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0351)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed                  ; Test to see if Slave ACKed
0A15: A0 03    JZ    0x0A19             (0352)     jz    End_ReadBytesSmm
0A17: 50 01    MOV   A,0x1              (0353)     mov   a,I2CM_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
0A19: 7F       RET                      (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: I2CM_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _I2CM_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >I2CM_bStatus
0A1A: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
0A1B: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
0A1D: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
0A1E: 55 71 00 MOV   [OneWire_DS_bCRC8Value+35],0x0(0410)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
0A21: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],I2CM_RepStart
0A24: B0 05    JNZ   0x0A2A             (0414)     jnz   DoRestartTx
0A26: 91 23    CALL  0x0B4B             (0415)     call  I2C_DoStart                                 ; Send a start and address.
0A28: 80 03    JMP   0x0A2C             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
0A2A: 90 EC    CALL  0x0B18             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >I2CM_bStatus
0A2C: 55 73 00 MOV   [OneWire_DS_bCRC8Value+37],0x0(0421)     mov   [I2CM_bXferCnt],0x00                        ; Zero out byte count first
0A2F: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0422)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed             ; Test to see if Slave ACKed
0A32: A0 1A    JZ    0x0A4D             (0423)     jz    End_WR_Loop
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
0A34: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
0A35: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
0A37: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0430)     mov   a,[x+TxArrayMSB]
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
0A38: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
0A39: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
0A3B: 53 72    MOV   [OneWire_DS_bCRC8Value+36],A(0435)     mov   [I2CM_bData],a                              ; Save data in temp location
0A3D: 91 36    CALL  0x0B75             (0436)     call  I2CM_write                                  ; Write the data
                                        (0437) 	RAM_SETPAGE_CUR >I2CM_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
0A3F: 20       POP   X                  (0439)     pop   x
0A40: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0440)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
0A43: A0 0E    JZ    0x0A52             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
0A45: 76 73    INC   [OneWire_DS_bCRC8Value+37](0442)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
0A47: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
0A49: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
0A4B: BF E8    JNZ   0x0A34             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
0A4D: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],I2CM_NoStop
0A50: B0 03    JNZ   0x0A54             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
0A52: 92 2E    CALL  _I2CM_SendStop     (0450)     call  I2CM_SendStop
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >I2CM_bStatus
0A54: 51 73    MOV   A,[OneWire_DS_bCRC8Value+37](0453)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
0A56: 7F       RET                      (0457)     ret
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: I2CM_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  I2CM_bWriteBytes:						       
0A57: 64       ASL   A                  (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
0A58: 55 71 00 MOV   [OneWire_DS_bCRC8Value+35],0x0(0501)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
0A5B: 48 FD 01 TST   [X-3],0x1          (0504)     tst   [x+TxMode_X],I2CM_RepStart
0A5E: B0 05    JNZ   0x0A64             (0505)     jnz   DoRestartTxSmm
0A60: 90 E9    CALL  0x0B4B             (0506)     call  I2C_DoStart                                 ; Send a start and address.
0A62: 80 03    JMP   0x0A66             (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
0A64: 90 B2    CALL  0x0B18             (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
0A66: 55 73 00 MOV   [OneWire_DS_bCRC8Value+37],0x0(0511)     mov   [I2CM_bXferCnt],0x00                        ; Zero out byte count first
0A69: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0512)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed             ; Test to see if Slave ACKed
0A6C: A0 18    JZ    0x0A85             (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
0A6E: 10       PUSH  X                  (0515)     push  x                                           ; Save X for later
0A6F: 59 00    MOV   X,[X+0]            (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
0A71: 52 00    MOV   A,[X+0]            (0517)     mov   a,[x]                                       ; Get data pointer to by X
0A73: 53 72    MOV   [OneWire_DS_bCRC8Value+36],A(0518)     mov   [I2CM_bData],a                              ; Save data in temp location
0A75: 90 FE    CALL  0x0B75             (0519)     call  I2CM_write                                  ; Write the data
0A77: 20       POP   X                  (0520)     pop   x
0A78: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0521)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
0A7B: A0 0E    JZ    0x0A8A             (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
0A7D: 76 73    INC   [OneWire_DS_bCRC8Value+37](0523)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
0A7F: 77 00    INC   [X+0]              (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
0A81: 7B FE    DEC   [X-2]              (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
0A83: BF EA    JNZ   0x0A6E             (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
0A85: 48 FD 02 TST   [X-3],0x2          (0528)     tst   [x+TxMode_X],I2CM_NoStop
0A88: B0 03    JNZ   0x0A8C             (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
0A8A: 91 F6    CALL  _I2CM_SendStop     (0531)     call  I2CM_SendStop
                                        (0532) SkipTxStopSmm:
0A8C: 51 73    MOV   A,[OneWire_DS_bCRC8Value+37](0533)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
0A8E: 7F       RET                      (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: I2CM_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _I2CM_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >I2CM_bStatus
0A8F: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
0A90: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
0A92: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
0A93: 55 71 00 MOV   [OneWire_DS_bCRC8Value+35],0x0(0587)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
0A96: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],I2CM_RepStart                   ; Check if a Start or RepeatStart
0A99: B0 05    JNZ   0x0A9F             (0591)     jnz   DoCRestartTx                                ; should executed.
0A9B: 90 AE    CALL  0x0B4B             (0592)     call  I2C_DoStart                                 ; Send a start and address.
0A9D: 80 03    JMP   0x0AA1             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
0A9F: 90 77    CALL  0x0B18             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >I2CM_bStatus
0AA1: 55 73 00 MOV   [OneWire_DS_bCRC8Value+37],0x0(0599)     mov   [I2CM_bXferCnt],0x00            ; Zero out byte count first
0AA4: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0600)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
0AA7: A0 1D    JZ    0x0AC5             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
0AA9: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
0AAA: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0AAC: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0AAE: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
0AAF: 53 72    MOV   [OneWire_DS_bCRC8Value+36],A(0608)     mov   [I2CM_bData],a                              ; Save data in temp location
0AB1: 90 C2    CALL  0x0B75             (0609)     call  I2CM_write                                  ; Write the data
                                        (0610)     RAM_SETPAGE_CUR >I2CM_bStatus
0AB3: 20       POP   X                  (0611)     pop   x
0AB4: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0612)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
0AB7: A0 12    JZ    0x0ACA             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0AB9: 76 73    INC   [OneWire_DS_bCRC8Value+37](0614)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
0ABB: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0ABD: D0 03    JNC   0x0AC1             (0616)     jnc   DecBCnt
0ABF: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
0AC1: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
0AC3: BF E5    JNZ   0x0AA9             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
0AC5: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],I2CM_NoStop
0AC8: B0 03    JNZ   0x0ACC             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
0ACA: 91 B6    CALL  _I2CM_SendStop     (0626)     call  I2CM_SendStop
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >I2CM_bStatus
0ACC: 51 73    MOV   A,[OneWire_DS_bCRC8Value+37](0629)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
0ACE: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: I2CM_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  I2CM_bWriteCBytes:					        
0ACF: 64       ASL   A                  (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
0AD0: 55 71 00 MOV   [OneWire_DS_bCRC8Value+35],0x0(0676)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
0AD3: 48 FD 01 TST   [X-3],0x1          (0679)     tst   [x+TxCMode_x],I2CM_RepStart                 ; Check if a Start or RepeatStart
0AD6: B0 05    JNZ   0x0ADC             (0680)     jnz   DoCRestartTxSmm                                ; should executed.
0AD8: 90 71    CALL  0x0B4B             (0681)     call  I2C_DoStart                                 ; Send a start and address.
0ADA: 80 03    JMP   0x0ADE             (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
0ADC: 90 3A    CALL  0x0B18             (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
0ADE: 55 73 00 MOV   [OneWire_DS_bCRC8Value+37],0x0(0687)     mov   [I2CM_bXferCnt],0x00            ; Zero out byte count first
0AE1: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0688)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
0AE4: A0 1D    JZ    0x0B02             (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
0AE6: 10       PUSH  X                  (0691)     push  x                                           ; Save X for later
                                        (0692) 
0AE7: 52 FF    MOV   A,[X-1]            (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
0AE9: 59 00    MOV   X,[X+0]            (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
0AEB: 28       ROMX                     (0695)     romx                                              ; Put ROM Data in a
0AEC: 53 72    MOV   [OneWire_DS_bCRC8Value+36],A(0696)     mov   [I2CM_bData],a                              ; Save data in temp location
0AEE: 90 85    CALL  0x0B75             (0697)     call  I2CM_write                                  ; Write the data
0AF0: 20       POP   X                  (0698)     pop   x
0AF1: 47 71 01 TST   [OneWire_DS_bCRC8Value+35],0x1(0699)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
0AF4: A0 12    JZ    0x0B07             (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
0AF6: 76 73    INC   [OneWire_DS_bCRC8Value+37](0701)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
0AF8: 77 00    INC   [X+0]              (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
0AFA: D0 03    JNC   0x0AFE             (0703)     jnc   DecBCntSmm
0AFC: 77 FF    INC   [X-1]              (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
0AFE: 7B FE    DEC   [X-2]              (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
0B00: BF E5    JNZ   0x0AE6             (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
0B02: 48 FD 02 TST   [X-3],0x2          (0710)     tst   [x+TxCMode_x],I2CM_NoStop
0B05: B0 03    JNZ   0x0B09             (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
0B07: 91 79    CALL  _I2CM_SendStop     (0713)     call  I2CM_SendStop
                                        (0714) SkipTxCStopSmm:
0B09: 51 73    MOV   A,[OneWire_DS_bCRC8Value+37](0715)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
0B0B: 7F       RET                      (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: I2CM_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    I2CM_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    I2CM_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by I2CM_start.
                                        (0749) ;
                                        (0750)  I2CM_fSendRepeatStart:
                                        (0751) _I2CM_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
0B0C: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
0B0D: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
0B0E: D0 04    JNC   0x0B13             (0755)     jnc   .setRead                                ; Do a write if zero
0B10: 90 06    CALL  0x0B18             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
0B12: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
0B13: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
0B15: 90 01    CALL  0x0B18             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
0B17: 7F       RET                      (0763)     ret  
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
0B18: 08       PUSH  A                  (0768)     push  a
0B19: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
0B1B: 2E 17 80 OR    [0x17],0x80        (0770)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin          ; Assert SCL low
0B1E: 26 17 BF AND   [0x17],0xBF        (0771)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin         ; Release SDA high
0B21: 51 17    MOV   A,[0x17]           (0772)     mov   A,[Port_0_DriveMode_0_SHADE]
0B23: 60 00    MOV   REG[0x0],A         (0773)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
0B25: 50 0C    MOV   A,0xC              (0776)     mov   A,I2CM_delay3qtr
0B27: 91 88    CALL  0x0CB1             (0777)     call  I2CM_delay
                                        (0778)                                                            ; Release SCL high
0B29: 26 17 7F AND   [0x17],0x7F        (0779)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
0B2C: 51 17    MOV   A,[0x17]           (0780)     mov   A,[Port_0_DriveMode_0_SHADE]
0B2E: 60 00    MOV   REG[0x0],A         (0781)     mov   reg[I2CM_I2CPRTDM0],A
0B30: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
0B32: 49 00 80 TST   REG[0x0],0x80      (0786)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0B35: AF FC    JZ    0x0B32             (0787)     jz    clockstretch1
                                        (0788) 
0B37: 50 0C    MOV   A,0xC              (0789)     mov   A,I2CM_delay3qtr                                 ; Delay 1/2 period
0B39: 91 76    CALL  0x0CB1             (0790)     call  I2CM_delay
0B3B: 18       POP   A                  (0791)     pop   a
0B3C: 90 0D    CALL  0x0B4B             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
0B3E: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: I2CM_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by I2CM_write.
                                        (0826) ;
                                        (0827)  I2CM_fSendStart:
                                        (0828) _I2CM_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
0B3F: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
0B40: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
0B41: D0 04    JNC   0x0B46             (0832)     jnc   .SetRead
0B43: 90 06    CALL  0x0B4B             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
0B45: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
0B46: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
0B48: 90 01    CALL  0x0B4B             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0B4A: 7F       RET                      (0840)     ret
0B4B: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
0B4D: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
0B4E: 2E 17 40 OR    [0x17],0x40        (0847)     or    [Port_0_DriveMode_0_SHADE],I2CM_SDA_pin               ; Assert SDA low
0B51: 51 17    MOV   A,[0x17]           (0848)     mov   A,[Port_0_DriveMode_0_SHADE]
0B53: 60 00    MOV   REG[0x0],A         (0849)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0850) 
0B55: 50 05    MOV   A,0x5              (0851)     mov   A,I2CM_delayhalf                                      ; Delay 1/2 period
0B57: 91 58    CALL  0x0CB1             (0852)     call  I2CM_delay
0B59: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
0B5A: 70 EF    AND   F,0xEF             
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >I2CM_bData
0B5C: 53 72    MOV   [OneWire_DS_bCRC8Value+36],A(0856)     mov   [I2CM_bData],A
0B5E: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
0B60: 2E 17 80 OR    [0x17],0x80        (0860)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin               ; Set SCL low
0B63: 51 17    MOV   A,[0x17]           (0861)     mov   A,[Port_0_DriveMode_0_SHADE]
0B65: 60 00    MOV   REG[0x0],A         (0862)     mov   reg[I2CM_I2CPRTDM0],A
0B67: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
0B69: 50 02    MOV   A,0x2              (0865)     mov   A,I2CM_delayqtr                                       ; Delay 1/4 period
0B6B: 91 44    CALL  0x0CB1             (0866)     call  I2CM_delay
0B6D: 90 06    CALL  0x0B75             (0867)     call   I2CM_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
0B6F: 7F       RET                      (0869)     ret
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: I2CM_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: I2CM_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    I2CM_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by I2CM_get_ack.
                                        (0915) ;
                                        (0916) I2CM_fWrite:
                                        (0917) _I2CM_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >I2CM_bData
0B70: 53 72    MOV   [OneWire_DS_bCRC8Value+36],A(0920)     mov   [I2CM_bData],A                                   ; Put data in bData
0B72: 90 01    CALL  0x0B75             (0921)     call  I2CM_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
0B74: 7F       RET                      (0923)     ret
                                        (0924) 
                                        (0925) I2CM_write:
                                        (0926) _I2CM_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >I2CM_bit_count
                                        (0929)     
0B75: 55 74 08 MOV   [OneWire_DS_bCRC8Value+38],0x8(0930)     mov   [I2CM_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0B78: 7A 74    DEC   [OneWire_DS_bCRC8Value+38](0932)     dec   [I2CM_bit_count]
0B7A: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
0B7C: 2E 17 80 OR    [0x17],0x80        (0937)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
0B7F: 51 17    MOV   A,[0x17]           (0938)     mov   A,[Port_0_DriveMode_0_SHADE]
0B81: 60 00    MOV   REG[0x0],A         (0939)     mov   reg[I2CM_I2CPRTDM0],A
0B83: 70 EF    AND   F,0xEF             
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >I2CM_bit_count
0B85: 6B 72    RLC   [OneWire_DS_bCRC8Value+36](0943)     rlc   [I2CM_bData]
0B87: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
0B89: C0 0A    JC    0x0B94             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
0B8B: 2E 17 40 OR    [0x17],0x40        (0947)     or    [Port_0_DriveMode_0_SHADE],I2CM_SDA_pin
0B8E: 51 17    MOV   A,[0x17]           (0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0B90: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0950) 
0B92: 80 08    JMP   0x0B9B             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
0B94: 26 17 BF AND   [0x17],0xBF        (0953)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin      
0B97: 51 17    MOV   A,[0x17]           (0954)     mov   A,[Port_0_DriveMode_0_SHADE]
0B99: 60 00    MOV   REG[0x0],A         (0955)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
0B9B: 50 05    MOV   A,0x5              (0958)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
0B9D: 91 12    CALL  0x0CB1             (0959)     call  I2CM_delay
                                        (0960)                                                            ; Release SCL High
0B9F: 26 17 7F AND   [0x17],0x7F        (0961)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
0BA2: 51 17    MOV   A,[0x17]           (0962)     mov   A,[Port_0_DriveMode_0_SHADE]
0BA4: 60 00    MOV   REG[0x0],A         (0963)     mov   reg[I2CM_I2CPRTDM0],A
0BA6: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0BA8: 49 00 80 TST   REG[0x0],0x80      (0968)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0BAB: AF FC    JZ    0x0BA8             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
0BAD: 50 05    MOV   A,0x5              (0971)     mov   A,I2CM_delayhalf
0BAF: 91 00    CALL  0x0CB1             (0972)     call  I2CM_delay
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >I2CM_bit_count
0BB1: 3C 74 00 CMP   [OneWire_DS_bCRC8Value+38],0x0(0975)     cmp   [I2CM_bit_count],0
0BB4: BF C3    JNZ   0x0B78             (0976)     jnz   writenextbit
0BB6: 90 01    CALL  0x0BB9             (0977)     call  I2CM_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB8: 7F       RET                      (0980)     ret
0BB9: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: I2CM_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by I2CM_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    I2CM_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in I2CM_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) I2CM_get_ack:
                                        (1009) _I2CM_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
0BBB: 2E 17 80 OR    [0x17],0x80        (1013)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
0BBE: 51 17    MOV   A,[0x17]           (1014)     mov   A,[Port_0_DriveMode_0_SHADE]
0BC0: 60 00    MOV   REG[0x0],A         (1015)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
0BC2: 26 17 BF AND   [0x17],0xBF        (1017)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin
0BC5: 51 17    MOV   A,[0x17]           (1018)     mov   A,[Port_0_DriveMode_0_SHADE]
0BC7: 60 00    MOV   REG[0x0],A         (1019)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
0BC9: 50 0C    MOV   A,0xC              (1021)     mov   A,I2CM_delay3qtr
0BCB: 90 E4    CALL  0x0CB1             (1022)     call  I2CM_delay
                                        (1023)                                                            ; Release SCL high
0BCD: 26 17 7F AND   [0x17],0x7F        (1024)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
0BD0: 51 17    MOV   A,[0x17]           (1025)     mov   A,[Port_0_DriveMode_0_SHADE]
0BD2: 60 00    MOV   REG[0x0],A         (1026)     mov   reg[I2CM_I2CPRTDM0],A
0BD4: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
0BD6: 49 00 80 TST   REG[0x0],0x80      (1031)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0BD9: AF FC    JZ    0x0BD6             (1032)     jz    clockstretch3
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >I2CM_bStatus    
                                        (1035)                                                        ; Clear ACK bit
0BDB: 26 71 FE AND   [OneWire_DS_bCRC8Value+35],0xFE(1036)     and   [I2CM_bStatus],~I2CM_SLAVE_ACKed
0BDE: 49 00 40 TST   REG[0x0],0x40      (1037)     tst   reg[I2CM_I2CPRTDR],I2CM_SDA_pin
0BE1: B0 04    JNZ   0x0BE6             (1038)     jnz    getack2                                         ; If ACKed, set flag
0BE3: 2E 71 01 OR    [OneWire_DS_bCRC8Value+35],0x1(1039)     or    [I2CM_bStatus],I2CM_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
0BE6: 50 05    MOV   A,0x5              (1042)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
0BE8: 90 C7    CALL  0x0CB1             (1043)     call  I2CM_delay
                                        (1044) 
0BEA: 51 71    MOV   A,[OneWire_DS_bCRC8Value+35](1045)     mov   A,[I2CM_bStatus]                                 ; Get result and put it in A
0BEC: 21 01    AND   A,0x1              (1046)     and   A,I2CM_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
0BEE: 7F       RET                      (1048)     ret
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: I2CM_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    I2CM_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    I2CM_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by I2CM_put_ack.
                                        (1079) ;
                                        (1080) I2CM_bRead:
                                        (1081) _I2CM_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >I2CM_bStatus
0BEF: 55 71 00 MOV   [OneWire_DS_bCRC8Value+35],0x0(1084)     mov   [I2CM_bStatus],0x00                              ; Clear ACK flag
0BF2: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
0BF4: A0 07    JZ    0x0BFC             (1086)     jz    I2CM_read                                        ; Don't ACK
0BF6: 2E 71 10 OR    [OneWire_DS_bCRC8Value+35],0x10(1087)     or    [I2CM_bStatus],I2CM_SEND_ACK                     ; Set ACK flag
0BF9: 90 01    CALL  0x0BFC             (1088)     call  I2CM_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
0BFB: 7F       RET                      (1090)     ret
                                        (1091) 
                                        (1092) I2CM_read:
                                        (1093) _I2CM_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >I2CM_bStatus    
0BFC: 55 74 08 MOV   [OneWire_DS_bCRC8Value+38],0x8(1096)     mov   [I2CM_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
0BFF: 7A 74    DEC   [OneWire_DS_bCRC8Value+38](1098)     dec   [I2CM_bit_count]
0C01: 6B 72    RLC   [OneWire_DS_bCRC8Value+36](1099)     rlc   [I2CM_bData]
0C03: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
0C05: 2E 17 80 OR    [0x17],0x80        (1103)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
0C08: 51 17    MOV   A,[0x17]           (1104)     mov   A,[Port_0_DriveMode_0_SHADE]
0C0A: 60 00    MOV   REG[0x0],A         (1105)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
0C0C: 50 05    MOV   A,0x5              (1107)     mov   A,I2CM_delayhalf
0C0E: 90 A1    CALL  0x0CB1             (1108)     call  I2CM_delay
                                        (1109)                                                            ; Release SCL high
0C10: 26 17 7F AND   [0x17],0x7F        (1110)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
0C13: 51 17    MOV   A,[0x17]           (1111)     mov   A,[Port_0_DriveMode_0_SHADE]
0C15: 60 00    MOV   REG[0x0],A         (1112)     mov   reg[I2CM_I2CPRTDM0],A
0C17: 70 EF    AND   F,0xEF             
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >I2CM_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
0C19: 49 00 80 TST   REG[0x0],0x80      (1119)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0C1C: AF FC    JZ    0x0C19             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
0C1E: 50 02    MOV   A,0x2              (1122)     mov   A,I2CM_delayqtr
0C20: 90 8F    CALL  0x0CB1             (1123)     call  I2CM_delay
                                        (1124) 
0C22: 26 72 FE AND   [OneWire_DS_bCRC8Value+36],0xFE(1125)     and   [I2CM_bData],~01h                                ; Record bit received
0C25: 49 00 40 TST   REG[0x0],0x40      (1126)     tst   reg[I2CM_I2CPRTDR],I2CM_SDA_pin
0C28: A0 04    JZ    0x0C2D             (1127)     jz    readnobit
0C2A: 2E 72 01 OR    [OneWire_DS_bCRC8Value+36],0x1(1128)     or    [I2CM_bData],01h
                                        (1129) readnobit:
0C2D: 3C 74 00 CMP   [OneWire_DS_bCRC8Value+38],0x0(1130)     cmp   [I2CM_bit_count],0
0C30: BF CE    JNZ   0x0BFF             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
0C32: 90 01    CALL  0x0C35             (1133)     call   I2CM_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
0C34: 7F       RET                      (1135)     ret
0C35: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: I2CM_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by I2CM_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    I2CM_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    I2CM_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) I2CM_put_ack:
                                        (1167) _I2CM_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
0C37: 2E 17 80 OR    [0x17],0x80        (1171)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
0C3A: 51 17    MOV   A,[0x17]           (1172)     mov   A,[Port_0_DriveMode_0_SHADE]
0C3C: 60 00    MOV   REG[0x0],A         (1173)     mov   reg[I2CM_I2CPRTDM0],A
0C3E: 70 EF    AND   F,0xEF             
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >I2CM_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
0C40: 47 71 10 TST   [OneWire_DS_bCRC8Value+35],0x10(1178)     tst   [I2CM_bStatus],I2CM_SEND_ACK
0C43: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
0C45: A0 0A    JZ    0x0C50             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
0C47: 2E 17 40 OR    [0x17],0x40        (1185)     or    [Port_0_DriveMode_0_SHADE],I2CM_SDA_pin
0C4A: 51 17    MOV   A,[0x17]           (1186)     mov   A,[Port_0_DriveMode_0_SHADE]
0C4C: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1188) 
0C4E: 80 08    JMP   0x0C57             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
0C50: 26 17 BF AND   [0x17],0xBF        (1191)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin
0C53: 51 17    MOV   A,[0x17]           (1192)     mov   A,[Port_0_DriveMode_0_SHADE]
0C55: 60 00    MOV   REG[0x0],A         (1193)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
0C57: 50 02    MOV   A,0x2              (1196)     mov   A,I2CM_delayqtr                                  ; Delay 1/4 period
0C59: 90 56    CALL  0x0CB1             (1197)     call  I2CM_delay
                                        (1198)                                                            ; Release SCL high
0C5B: 26 17 7F AND   [0x17],0x7F        (1199)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
0C5E: 51 17    MOV   A,[0x17]           (1200)     mov   A,[Port_0_DriveMode_0_SHADE]
0C60: 60 00    MOV   REG[0x0],A         (1201)     mov   reg[I2CM_I2CPRTDM0],A
0C62: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
0C64: 49 00 80 TST   REG[0x0],0x80      (1206)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0C67: AF FC    JZ    0x0C64             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
0C69: 50 05    MOV   A,0x5              (1209)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
0C6B: 90 44    CALL  0x0CB1             (1210)     call  I2CM_delay
0C6D: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
0C6F: 2E 17 80 OR    [0x17],0x80        (1213)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
0C72: 51 17    MOV   A,[0x17]           (1214)     mov   A,[Port_0_DriveMode_0_SHADE]
0C74: 60 00    MOV   REG[0x0],A         (1215)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
0C76: 26 17 BF AND   [0x17],0xBF        (1218)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin         ; Release SDA high
0C79: 51 17    MOV   A,[0x17]           (1219)     mov   A,[Port_0_DriveMode_0_SHADE]
0C7B: 60 00    MOV   REG[0x0],A         (1220)     mov   reg[I2CM_I2CPRTDM0],A
0C7D: 70 EF    AND   F,0xEF             
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >I2CM_bStatus    
0C7F: 51 72    MOV   A,[OneWire_DS_bCRC8Value+36](1224)     mov   A, [I2CM_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
0C81: 7F       RET                      (1226)     ret
0C82: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: I2CM_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  I2CM_SendStop:
                                        (1256) _I2CM_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
0C84: 2E 17 C0 OR    [0x17],0xC0        (1260)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin|I2CM_SDA_pin
0C87: 51 17    MOV   A,[0x17]           (1261)     mov   A,[Port_0_DriveMode_0_SHADE]
0C89: 60 00    MOV   REG[0x0],A         (1262)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1263) 
0C8B: 50 0C    MOV   A,0xC              (1264)     mov   A,I2CM_delay3qtr                                 ; Delay 3/4 period
0C8D: 90 22    CALL  0x0CB1             (1265)     call  I2CM_delay
                                        (1266)                                                            ; Release SCL high
0C8F: 26 17 7F AND   [0x17],0x7F        (1267)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
0C92: 51 17    MOV   A,[0x17]           (1268)     mov   A,[Port_0_DriveMode_0_SHADE]
0C94: 60 00    MOV   REG[0x0],A         (1269)     mov   reg[I2CM_I2CPRTDM0],A
0C96: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0C98: 49 00 80 TST   REG[0x0],0x80      (1274)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0C9B: AF FC    JZ    0x0C98             (1275)     jz    clockstretch6
0C9D: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
0C9F: 50 0C    MOV   A,0xC              (1278)     mov   A,I2CM_delay3qtr                                 ; Delay 3/4 period
0CA1: 90 0E    CALL  0x0CB1             (1279)     call  I2CM_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
0CA3: 26 17 BF AND   [0x17],0xBF        (1282)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin
0CA6: 51 17    MOV   A,[0x17]           (1283)     mov   A,[Port_0_DriveMode_0_SHADE]
0CA8: 60 00    MOV   REG[0x0],A         (1284)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1285) 
0CAA: 50 05    MOV   A,0x5              (1286)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
0CAC: 90 03    CALL  0x0CB1             (1287)     call  I2CM_delay
0CAE: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
0CB0: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: I2CM_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for I2CM routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) I2CM_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) I2CMdelay1:                                      ; Delay 1/4 period at 100 kHz
0CB1: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
0CB2: BF FE    JNZ   0x0CB1             (1317)      jnz  I2CMdelay1                             ; 5 cycles for jump, 4 no jump.     
0CB4: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File I2CM.asm
                                        (1325) 
                                        (1326) 
FILE: .\ds1822.asm                      (0001) ;----------------------------------------------------------------------------
                                        (0002) ; Exercise 3: Digital Communication
                                        (0003) ; File: ds1822.asm
                                        (0004) ; =====================================
                                        (0005) ; Description: 
                                        (0006) ;
                                        (0007) ;
                                        (0008) ;
                                        (0009) ; Author: Jean-Philippe Lassonde #1504236
                                        (0010) ; Date: April 11th 2018
                                        (0011) ; Course: TX00CS03 - Sensors and Interfaces 
                                        (0012) ;----------------------------------------------------------------------------
                                        (0013) 
                                        (0014) ; DS1822 Commands
                                        (0015) DS_SKIP_ROM:	equ 0xCC
                                        (0016) DS_CONVERT_T: 	equ 0x44
                                        (0017) DS_READ_SPAD: 	equ 0xBE
                                        (0018) DS_WRITE_SPAD: 	equ 0x4E
                                        (0019) DS_COPY_SPAD:	equ 0x48
                                        (0020) 
                                        (0021) export ds1822Val
                                        (0022) 
                                        (0023) area bss(ram,rel)
                                        (0024) ds1822Val: 	blk 9
                                        (0025) area text(rom,rel)
                                        (0026) 
                                        (0027) 
                                        (0028) ;-----------------------------------------------------------------------------
                                        (0029) ;  FUNCTION NAME: GetDS1822
                                        (0030) ;
                                        (0031) ;  DESCRIPTION: - Get the value from the DS1822 sensor
                                        (0032) ;				- Store it into a single-precision float
                                        (0033) ;				- Convert the value to string and store it with 2 decimals in
                                        (0034) ;				  the ds1822Val buffer
                                        (0035) ;
                                        (0036) ;-----------------------------------------------------------------------------
                                        (0037) ;  ARGUMENTS: none
                                        (0038) ;  RETURNS: none
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) 
                                        (0041) ;	Stack: 	X+9:	Counter
                                        (0042) ;			X:		9 bytes RX buffer
                                        (0043) ;
                                        (0044) GetDS1822::
0CB5: 4F       MOV   X,SP               (0045) 	mov X, SP		; Allocate 10 bytes on the stack
0CB6: 38 0A    ADD   SP,0xA             (0046) 	add SP, 0x0A 	; X+9: Counter
0CB8: 10       PUSH  X                  (0047) 	push X			; X:   9 bytes RX buffer
                                        (0048) 	
                                        (0049) ;-------------- Request Transfer ----------------------------
                                        (0050) .init_conversion:
0CB9: 7C 07 43 LCALL _OneWire_DS_fReset (0051) 	lcall OneWire_DS_fReset		; Send Reset signal
0CBC: 50 CC    MOV   A,0xCC             (0052) 	mov A, DS_SKIP_ROM			; Signal to skip ROM
0CBE: 7C 07 79 LCALL _OneWire_DS_WriteByte(0053) 	lcall OneWire_DS_WriteByte
0CC1: 50 44    MOV   A,0x44             (0054) 	mov A, DS_CONVERT_T			; Ask for temperature conversion
0CC3: 7C 07 79 LCALL _OneWire_DS_WriteByte(0055) 	lcall OneWire_DS_WriteByte
                                        (0056) 	
                                        (0057) .poll_status:
0CC6: 7C 07 68 LCALL _OneWire_DS_bReadBit(0058) 	lcall OneWire_DS_bReadBit	; Poll the status bit
0CC9: 67       ASR   A                  (0059) 	asr A						; Shift status bit to carry
0CCA: DF FB    JNC   0x0CC6             (0060) 	jnc .poll_status			; Poll until status bit is set
                                        (0061) 	
                                        (0062) ;-------------- Receive Data --------------------------------
                                        (0063) 
0CCC: 7C 07 A8 LCALL _OneWire_DS_ClearCRC8(0064) 	lcall OneWire_DS_ClearCRC8	; Clear CRC buffer
0CCF: 7C 07 43 LCALL _OneWire_DS_fReset (0065) 	lcall OneWire_DS_fReset		; Send Reset signal
0CD2: 50 CC    MOV   A,0xCC             (0066) 	mov A, DS_SKIP_ROM			; Signal to skip ROM
0CD4: 7C 07 79 LCALL _OneWire_DS_WriteByte(0067) 	lcall OneWire_DS_WriteByte	
0CD7: 50 BE    MOV   A,0xBE             (0068) 	mov A, DS_READ_SPAD			; Read DS 1822 Scratchpad
0CD9: 7C 07 79 LCALL _OneWire_DS_WriteByte(0069) 	lcall OneWire_DS_WriteByte
0CDC: 20       POP   X                  (0070) 	pop X
0CDD: 5A 2E    MOV   [pointer],X        (0071) 	mov [pointer], X		; Load buffer address in pointer
0CDF: 56 09 08 MOV   [X+9],0x8          (0072) 	mov [X+9], 8			; Initialize counter to get 8 values
0CE2: 10       PUSH  X                  (0073) 	push X
                                        (0074) 	
                                        (0075) .get_byte:
0CE3: 7C 07 94 LCALL _OneWire_DS_bReadByte(0076) 	lcall OneWire_DS_bReadByte	; Read one byte from OneWire
0CE6: 3F 2E    MVI   [pointer],A        (0077) 	mvi [pointer], A			; Store it on the stack & increment pointer
0CE8: 7C 07 AC LCALL _OneWire_DS_bCRC8  (0078) 	lcall OneWire_DS_bCRC8		; Compute CRC
0CEB: 20       POP   X                  (0079) 	pop X
0CEC: 7B 09    DEC   [X+9]              (0080) 	dec [X+9]					; Decrement counter
0CEE: 10       PUSH  X                  (0081) 	push X
0CEF: BF F3    JNZ   0x0CE3             (0082) 	jnz .get_byte				; Repeat until counter is 0
                                        (0083) 
                                        (0084) ;-------------- Get & calculate CRC -------------------------
0CF1: 7C 07 94 LCALL _OneWire_DS_bReadByte(0085) 	lcall OneWire_DS_bReadByte 	; Get 9th byte (CRC)
0CF4: 7C 07 AC LCALL _OneWire_DS_bCRC8  (0086) 	lcall OneWire_DS_bCRC8
0CF7: 39 00    CMP   A,0x0              (0087) 	cmp A, 0					; Check if CRC passed (ZF Set)
0CF9: BF BF    JNZ   0x0CB9             (0088) 	jnz .init_conversion		; Otherwise get data again
                                        (0089) 	
                                        (0090) ;-------------- Convert to float ( The fun part!) -----------
                                        (0091) ;	Stack: 	X+6:	Counter
                                        (0092) ;			X+2: 	4 bytes floating point
                                        (0093) ;			X: 		2 bytes sensor data
                                        (0094) 	
                                        (0095) 	MSB: equ 1 ; MSB(yte) pos in relation to frame pointer
                                        (0096) 	LSB: equ 0
                                        (0097) 
0CFB: 20       POP   X                  (0098) 	pop X 			; Restore frame pointer
                                        (0099) 	
0CFC: 38 FD    ADD   SP,0xFD            (0100) 	add SP, 0xFD	; Remove 3 unused bytes from the stack
0CFE: 56 02 00 MOV   [X+2],0x0          (0101) 	mov [X+2], 0	; Clear memory used by the float 
0D01: 56 03 00 MOV   [X+3],0x0          (0102) 	mov [X+3], 0
0D04: 56 04 00 MOV   [X+4],0x0          (0103) 	mov [X+4], 0
0D07: 56 05 00 MOV   [X+5],0x0          (0104) 	mov [X+5], 0
0D0A: 56 06 00 MOV   [X+6],0x0          (0105) 	mov [X+6], 0		; Init counter to 0
0D0D: 48 01 80 TST   [X+1],0x80         (0106) 	tst [X+MSB], 0x80	; Check one of the sign bit 
0D10: A0 13    JZ    0x0D24             (0107) 	jz .compute_float	
                                        (0108) 	
                                        (0109) ;---- Adjust negative temperature ---
0D12: 56 02 80 MOV   [X+2],0x80         (0110) 	mov [X+2], 0x80 	; Set sign on float
0D15: 37 00 FF XOR   [X+0],0xFF         (0111) 	xor [X+LSB], 0xFF	; Flip 2s complement bits 
0D18: 37 01 FF XOR   [X+1],0xFF         (0112) 	xor [X+MSB], 0xFF
0D1B: 07 00 01 ADD   [X+0],0x1          (0113) 	add [X+LSB], 0x01	; Add 1, now contain the absolute value
0D1E: 0F 01 00 ADC   [X+1],0x0          (0114) 	adc [X+MSB], 0
0D21: 27 01 07 AND   [X+1],0x7          (0115) 	and [X+MSB], 0x07	; Mask out sign bits
                                        (0116) 		
                                        (0117) ;-------------- Set float exponent and mantissa -------------
                                        (0118) .compute_float:
0D24: 70 FB    AND   F,0xFB             (0119) 	and F, 0xFB			; Clear carry
0D26: 6F 01    RRC   [X+1]              (0120) 	rrc [X+MSB]			; Rotate sensor bits right
0D28: 6F 00    RRC   [X+0]              (0121) 	rrc [X+LSB]
0D2A: 6D       RRC   A                  (0122) 	rrc A				; All the way to mantissa
0D2B: 77 06    INC   [X+6]              (0123) 	inc [X+6]			; Count number of shift
0D2D: 3D 01 00 CMP   [X+1],0x0          (0124) 	cmp [X+MSB], 0		; Until all the set bits have been shifted
0D30: BF F3    JNZ   0x0D24             (0125) 	jnz .compute_float
0D32: 3D 00 01 CMP   [X+0],0x1          (0126) 	cmp [X+LSB], 1		; Except for the last one. Implicit mantissa bit		
0D35: BF EE    JNZ   0x0D24             (0127) 	jnz .compute_float
0D37: 07 06 7B ADD   [X+6],0x7B         (0128) 	add [X+6], 123		; add 123 to the counter to get exponent value (127 - 5 shift to 2e0 + 1 implicit bit not counted)
                                        (0129) 	
                                        (0130) ; Mantissa (8 most significant bits) in A, exponent in X+6. 
                                        (0131) ; Few RORs and ORs and everything is set in position
                                        (0132) 
0D3A: 70 FB    AND   F,0xFB             (0133) 	and F, 0xFB			; Clear carry
0D3C: 6D       RRC   A                  (0134) 	rrc A				; Rotate lsb of mantissa
0D3D: 6F 04    RRC   [X+4]              (0135) 	rrc [X+4]			; In the msb of the 3rd byte of float
0D3F: 70 FB    AND   F,0xFB             (0136) 	and F, 0xFB			; Clear carry
0D41: 6F 06    RRC   [X+6]              (0137) 	rrc [X+6] 			; Rotate exponent lsb in 2nd byte of the float
0D43: 6F 03    RRC   [X+3]              (0138) 	rrc [X+3]
0D45: 2D 03    OR    [X+3],A            (0139) 	or [X+3], A			; OR mantissa with the exponent lsb
0D47: 52 06    MOV   A,[X+6]            (0140) 	mov A, [X+6]
0D49: 2D 02    OR    [X+2],A            (0141) 	or [X+2], A			; OR exponent with the sign bit 
                                        (0142) 	
0D4B: 38 FF    ADD   SP,0xFF            (0143) 	add SP, 0xFF		; Remove counter/exponent from the stack
                                        (0144) 	
                                        (0145) ;-------------- Convert to char array -----------------------	
                                        (0146) 	
0D4D: 56 00 00 MOV   [X+0],0x0          (0147) 	mov [X], 0			; Set ftoa status pointer			
0D50: 56 01 2E MOV   [X+1],0x2E         (0148) 	mov [X+1], pointer	; The pointer becomes the pointee
                                        (0149) 	
0D53: 7C 29 09 LCALL _ftoa              (0150) 	lcall _ftoa			; Call ftoa. Buffer pointer located in [__r1], status in ram[pointer]
0D56: 38 FA    ADD   SP,0xFA            (0151) 	add SP, 0xFA 		; pop the rest of the stack 
                                        (0152) 	
0D58: 3C 2F 00 CMP   [pointer+1],0x0    (0153) 	cmp [pointer+1], 0		; Check if returned value is 0
0D5B: B0 0E    JNZ   0x0D6A             (0154) 	jnz .invalid_conversion	; Handle invalid cases
                                        (0155) 	
                                        (0156) ;------- Copy it with 2 decimal at final destination --------
                                        (0157) 
0D5D: 55 2E 1C MOV   [pointer],0x1C     (0158) 	mov [pointer], ds1822Val	; Pointer to the final ds1822Val
0D60: 51 09    MOV   A,[__r1]           (0159) 	mov A, [__r1]				; Copy the _ftoa buffer pointer
0D62: 53 2F    MOV   [pointer+1],A      (0160) 	mov [pointer+1], A			
0D64: 57 02    MOV   X,0x2              (0161) 	mov X, 2					; Set number of decimals to 2
0D66: 7C 0F 39 LCALL StrCpy             (0162) 	lcall StrCpy
                                        (0163) 
0D69: 7F       RET                      (0164) 	ret							; Return to main
                                        (0165) 	
                                        (0166) ;------------- HANDLE INVALID CONVERSION ----------------
                                        (0167) ; FtoA should never fail with this range and precision, but 
                                        (0168) ; if by some sorcery the value get dangerously close to 0...
                                        (0169) .invalid_conversion:
0D6A: 55 1C 30 MOV   [ds1822Val],0x30   (0170) 	mov [ds1822Val], '0' 	; Set temperature string to "0" if anything goes wrong with ftoa
0D6D: 55 1D 00 MOV   [ds1822Val+1],0x0  (0171) 	mov [ds1822Val+1], 0 	; Null terminate
0D70: 7F       RET                      (0172) 	ret
                                        (0173) 
                                        (0174) 	FILE: .\lm35dz.asm                      (0001) ;----------------------------------------------------------------------------
                                        (0002) ; Exercise 3: Digital Communication
                                        (0003) ; File: lm35dz.asm
                                        (0004) ; =====================================
                                        (0005) ; Description: 
                                        (0006) ;
                                        (0007) ;
                                        (0008) ;
                                        (0009) ; Author: Jean-Philippe Lassonde #1504236
                                        (0010) ; Date: April 11th 2018
                                        (0011) ; Course: TX00CS03 - Sensors and Interfaces 
                                        (0012) ;----------------------------------------------------------------------------
                                        (0013) 
                                        (0014) include "PSoCGPIOINT.inc"	; Shadow Register macros
                                        (0015) include "PSoCAPI.inc"   	; SPIM constant definitions
                                        (0016) 
                                        (0017) export lm35Val
                                        (0018) 
                                        (0019) area bss(ram,rel)
                                        (0020) lm35Val: 	blk 9
                                        (0021) area text(rom,rel)
                                        (0022) 
                                        (0023) 
                                        (0024) 
                                        (0025) 
                                        (0026) ;-----------------------------------------------------------------------------
                                        (0027) ;  FUNCTION NAME: GetLM35DZ
                                        (0028) ;
                                        (0029) ;  DESCRIPTION: - Get the value from the LM35DZ sensor
                                        (0030) ;				- Convert the value into a single-precision float
                                        (0031) ;				- Perform the inverse transfer function
                                        (0032) ;				- Convert the value to string and store it with 1 decimal in
                                        (0033) ;				  the ds1822Val buffer
                                        (0034) ;
                                        (0035) ;-----------------------------------------------------------------------------
                                        (0036) ;  ARGUMENTS: none
                                        (0037) ;  RETURNS: none
                                        (0038) ;-----------------------------------------------------------------------------
                                        (0039) 
                                        (0040) ; Stack frame: 	X+12 4 bytes for 32 bit uint
                                        (0041) ;				X+10 2 bytes ptr
                                        (0042) ;				X+6	 4 bytes for float op 1
                                        (0043) ;				X+2	 4 byte for float op 2
                                        (0044) ;				X	 2 bytes ptr for later use
                                        (0045) 
                                        (0046) GetLM35DZ::
0D71: 4F       MOV   X,SP               (0047) 	mov X, SP
0D72: 5A 2E    MOV   [pointer],X        (0048) 	mov [pointer], X 	; Store a copy of frame pointer in static ram
0D74: 38 10    ADD   SP,0x10            (0049) 	add SP, 16			; Allocate 16 bytes on stack
0D76: 10       PUSH  X                  (0050) 	push X
0D77: 26 15 EF AND   [0x15],0xEF        
0D7A: 51 15    MOV   A,[0x15]           
0D7C: 60 04    MOV   REG[0x4],A         
                                        (0051) 	
                                        (0052) ;---------------- Get value from ADC ------------------
                                        (0053) 
                                        (0054) 	ClearSPI_CS_Data ; Set chip select low
                                        (0055) 	
0D7E: 7C 06 8B LCALL _SPIM_SendTxData   (0056) 	lcall SPIM_SendTxData	; Clock a byte in
                                        (0057) .wait_1st_byte:
0D81: 7C 06 91 LCALL _bSPIM_ReadStatus|_SPIM_bReadStatus|SPIM_bReadStatus(0058) 	lcall SPIM_bReadStatus
0D84: 21 28    AND   A,0x28             (0059) 	and A, SPIM_SPIM_RX_BUFFER_FULL | SPIM_SPIM_SPI_COMPLETE; Wait until transfer is completed
0D86: 39 28    CMP   A,0x28             (0060) 	cmp A, SPIM_SPIM_RX_BUFFER_FULL | SPIM_SPIM_SPI_COMPLETE
0D88: BF F8    JNZ   0x0D81             (0061) 	jnz .wait_1st_byte				; Loop until RX done
0D8A: 20       POP   X                  (0062) 	pop X
0D8B: 7C 06 8E LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|_bSPIM_ReadRxData(0063) 	lcall SPIM_bReadRxData
0D8E: 54 0E    MOV   [X+14],A           (0064) 	mov [X+14], A			; Store data on stack
0D90: 10       PUSH  X                  (0065) 	push X
0D91: 7C 06 8B LCALL _SPIM_SendTxData   (0066) 	lcall SPIM_SendTxData	; Clock a byte in
                                        (0067) .wait_2nd_byte:
0D94: 7C 06 91 LCALL _bSPIM_ReadStatus|_SPIM_bReadStatus|SPIM_bReadStatus(0068) 	lcall SPIM_bReadStatus
0D97: 21 28    AND   A,0x28             (0069) 	and A, SPIM_SPIM_RX_BUFFER_FULL | SPIM_SPIM_SPI_COMPLETE; Wait until transfer is completed
0D99: 39 28    CMP   A,0x28             (0070) 	cmp A, SPIM_SPIM_RX_BUFFER_FULL | SPIM_SPIM_SPI_COMPLETE
0D9B: BF F8    JNZ   0x0D94             (0071) 	jnz .wait_2nd_byte				; Loop until RX done
0D9D: 7C 06 8E LCALL bSPIM_ReadRxData|SPIM_bReadRxData|_SPIM_bReadRxData|_bSPIM_ReadRxData(0072) 	lcall SPIM_bReadRxData
0DA0: 20       POP   X                  (0073) 	pop X
0DA1: 54 0F    MOV   [X+15],A           (0074) 	mov [X+15], A					; Store data on stack
0DA3: 2E 15 10 OR    [0x15],0x10        
0DA6: 51 15    MOV   A,[0x15]           
0DA8: 60 04    MOV   REG[0x4],A         
                                        (0075) 	
                                        (0076) 	SetSPI_CS_Data					; Pull CS back up
                                        (0077) 	
                                        (0078) ;---------------- Adjust MCP3201 Value ----------------
                                        (0079) 
0DAA: 70 FB    AND   F,0xFB             (0080) 	and F, 0xFB			; Clear carry
0DAC: 6F 0E    RRC   [X+14]             (0081) 	rrc [X+14]			; Shift bits to the right
0DAE: 6F 0F    RRC   [X+15]             (0082) 	rrc [X+15]		
0DB0: 27 0E 0F AND   [X+14],0xF         (0083) 	and [X+14], 0x0f		; discard bits 12 to 15
                                        (0084) 	
                                        (0085) ;------------------ Convert to float -------------------	
                                        (0086) 
0DB3: 56 0C 00 MOV   [X+12],0x0         (0087) 	mov [X+12], 0	; Clear uint32 2 higher bytes
0DB6: 56 0D 00 MOV   [X+13],0x0         (0088) 	mov [X+13], 0
0DB9: 56 0A 00 MOV   [X+10],0x0         (0089) 	mov [X+10], 0	; Point to the allocated space for the float	
0DBC: 5B       MOV   A,X                (0090) 	mov A,X
0DBD: 01 06    ADD   A,0x6              (0091) 	add A, 6 		; at X+6
0DBF: 54 0B    MOV   [X+11],A           (0092) 	mov [X+11], A	
0DC1: 7C 22 6B LCALL 0x226B             (0093) 	lcall long2fp	; do the conversion from 32 bit int to single precision float
                                        (0094) 	
0DC4: 38 FA    ADD   SP,0xFA            (0095) 	add SP, 0xFA		; pop uint and ptr (6) bytes off the stack
                                        (0096) 	
0DC6: 58 2E    MOV   X,[pointer]        (0097) 	mov X, [pointer] 	; restore saved copy of frame pointer
                                        (0098) 	
                                        (0099) ;------------------ Inverse transfer function -----------
                                        (0100) ; Digital Output Code = 1000*Vin
                                        (0101) ; Temp C = ADC Val / 10 (10mv/C)
                                        (0102) ;
                                        (0103) ; Stack:	X+6 4 bytes float op1
                                        (0104) ;			X+2	4 bytes float op2/result 
                                        (0105) ;			X: 	2 Bytes ptr / status
                                        (0106) 
0DC8: 5B       MOV   A,X                (0107) 	mov A, X		; Initialize the ptr with the address of the float result (X+2)
0DC9: 01 02    ADD   A,0x2              (0108) 	add A, 2
0DCB: 54 01    MOV   [X+1],A            (0109) 	mov [X+1], A	; Set LSByte pointer to X+2
0DCD: 56 00 00 MOV   [X+0],0x0          (0110) 	mov [X], 0		; Set MSByte to 0 (ram...)
                                        (0111) 	
                                        (0112) 	
0DD0: 56 02 41 MOV   [X+2],0x41         (0113) 	mov [X+2], 0x41	; Set dividend to 10
0DD3: 56 03 20 MOV   [X+3],0x20         (0114) 	mov [X+3], 0x20
0DD6: 56 04 00 MOV   [X+4],0x0          (0115) 	mov [X+4], 0x00
0DD9: 56 05 00 MOV   [X+5],0x0          (0116) 	mov [X+5], 0x00
0DDC: 7C 1E CB LCALL 0x1ECB             (0117) 	lcall fpdiv		; Divide adc val by 10
                                        (0118) 	
0DDF: 38 FC    ADD   SP,0xFC            (0119) 	add SP, 0xFC	; Pop op1, keep result on top
                                        (0120) 	
0DE1: 58 2E    MOV   X,[pointer]        (0121) 	mov X, [pointer]		; restore frame pointer
0DE3: 56 00 00 MOV   [X+0],0x0          (0122) 	mov [X], 0				; Set the status-return pointer
0DE6: 56 01 2E MOV   [X+1],0x2E         (0123) 	mov [X+1], pointer		; this is no longer a pointer but an int pointed to
                                        (0124) 
0DE9: 7C 29 09 LCALL _ftoa              (0125) 	lcall _ftoa				; Summon the wrath of the _ftoa god
0DEC: 38 FA    ADD   SP,0xFA            (0126) 	add SP, 0xFA			; pop result and status
                                        (0127) 	
0DEE: 51 09    MOV   A,[__r1]           (0128) 	mov A, [__r1]			; Store origin buffer ptr 
0DF0: 53 2F    MOV   [pointer+1],A      (0129) 	mov [pointer+1], A
0DF2: 55 2E 25 MOV   [pointer],0x25     (0130) 	mov [pointer], lm35Val	; Store destination buffer ptr
0DF5: 57 01    MOV   X,0x1              (0131) 	mov X, 1				; set number of decimals to print to 1
                                        (0132) 	
0DF7: 7C 0F 39 LCALL StrCpy             (0133) 	lcall StrCpy
0DFA: 7F       RET                      (0134) 	ret
FILE: .\main.asm                        (0001) ;----------------------------------------------------------------------------
0E72: 71 01    OR    F,0x1              (0002) ; Exercise 3: Digital Communication
                                        (0003) ; File: main.asm
                                        (0004) ; =====================================
                                        (0005) ; Description: 
                                        (0006) ;
                                        (0007) ;
                                        (0008) ;
                                        (0009) ; Author: Jean-Philippe Lassonde #1504236
                                        (0010) ; Date: April 11th 2018
                                        (0011) ; Course: TX00CS03 - Sensors and Interfaces 
                                        (0012) ;----------------------------------------------------------------------------
                                        (0013) 
                                        (0014) 
                                        (0015) include "m8c.inc"       ; part specific constants and macros
                                        (0016) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0017) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0018) 
                                        (0019) export _main
                                        (0020) export pointer
                                        (0021) 
                                        (0022) area bss(ram,rel)
                                        (0023) pointer: 	blk 2
                                        (0024) 
                                        (0025) area text(rom,rel)
                                        (0026) .LITERAL 
                                        (0027) JSON_P1:
                                        (0028) 	asciz "{\"SensorData\": [{\"name\":\"ds1822\",\"value\":\""
                                        (0029) JSON_P2:
                                        (0030) 	asciz "\"},{\"name\":\"lm35dz\",\"value\":\""
                                        (0031) JSON_P3:
                                        (0032) 	asciz "\"},{\"name\":\"tc74\",\"value\":\""
                                        (0033) JSON_P4:
                                        (0034) 	asciz "\"}]}"
                                        (0035) DS_STR:
                                        (0036) 	asciz "DS:"
                                        (0037) LM_STR:
                                        (0038) 	asciz "LM:"
                                        (0039) TC_STR:
                                        (0040) 	asciz " TC:"
                                        (0041) .ENDLITERAL 
                                        (0042) 
                                        (0043) _main:
                                        (0044)     M8C_EnableGInt 
                                        (0045) 	
0E74: 7C 07 2B LCALL _OneWire_DS_Start  (0046) 	lcall OneWire_DS_Start	; Start OneWire module
0E77: 7C 08 CD LCALL _LCD_Init|LCD_Start|_LCD_Start(0047) 	lcall LCD_Start			; Start LCD
0E7A: 2E 15 10 OR    [0x15],0x10        
0E7D: 51 15    MOV   A,[0x15]           
0E7F: 60 04    MOV   REG[0x4],A         
                                        (0048) 	
                                        (0049) 	SetSPI_CS_Data			; Set SPI CS High
0E81: 50 00    MOV   A,0x0              (0050) 	mov A, SPIM_SPIM_MODE_0 ; Set mode to leading edge latch, idle low, MSB first (implicit)
0E83: 7C 06 82 LCALL _SPIM_Start        (0051) 	lcall SPIM_Start		; Start SPI Master module
                                        (0052) 	
0E86: 7C 09 6B LCALL _I2CM_Start        (0053) 	lcall I2CM_Start		; Start I2C
                                        (0054) 	
0E89: 50 00    MOV   A,0x0              (0055) 	mov A, UART_PARITY_NONE	; Set up & start UART
0E8B: 7C 04 F0 LCALL _UART_Start        (0056) 	lcall UART_Start
                                        (0057) 	
0E8E: 7C 06 B4 LCALL _SleepTimer_EnableInt(0058) 	lcall SleepTimer_EnableInt	; Enable SleepTimer interrupt
0E91: 7C 06 BC LCALL _SleepTimer_Start  (0059) 	lcall SleepTimer_Start		; Start SleepTimer
0E94: 50 01    MOV   A,0x1              (0060) 	mov A, 1
0E96: 7C 07 00 LCALL _SleepTimer_SetTimer(0061) 	lcall SleepTimer_SetTimer	; Delay for 1 second at power-on
                                        (0062) 	
                                        (0063) ; Main Loop
                                        (0064) 
                                        (0065) .loop:
0E99: 7C 07 03 LCALL _SleepTimer_bGetTimer(0066) 	lcall SleepTimer_bGetTimer	; Get the Sleep Timer count
0E9C: 39 00    CMP   A,0x0              (0067) 	cmp A, 0	    			; Check if it expired
0E9E: BF FA    JNZ   0x0E99             (0068) 	jnz .loop					; loop until timer expired
0EA0: 50 01    MOV   A,0x1              (0069) 	mov A, 1				
0EA2: 7C 07 00 LCALL _SleepTimer_SetTimer(0070) 	lcall SleepTimer_SetTimer	; Reload timer / 1Hz
                                        (0071) 	
0EA5: 9E 0E    CALL  __UserModules_end|GetDS1822|__text_start(0072) 	call GetDS1822				; Get DS1822 data in its buffer
0EA7: 9E C8    CALL  GetLM35DZ          (0073) 	call GetLM35DZ				; Get LM35DZ data in its buffer
0EA9: 90 AD    CALL  GetTC74            (0074) 	call GetTC74				; Get TC74 data in its buffer
0EAB: 90 04    CALL  0x0EB1             (0075) 	call PrintToLCD				; Print sensors data on LCD
0EAD: 90 58    CALL  0x0F07             (0076) 	call SendJSON				; Send data in JSON string over UART
                                        (0077) 	
0EAF: 8F E9    JMP   0x0E99             (0078)     jmp .loop
                                        (0079) 	
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: PrintToLCD
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Print the 3 sensors values on LCD with identifiers
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  ARGUMENTS: none
                                        (0086) ;  RETURNS: none	
                                        (0087) row_index: equ pointer ; Use the same RAM loc as pointer for the row index
                                        (0088) 
                                        (0089) PrintToLCD:
0EB1: 55 2E 00 MOV   [pointer],0x0      (0090) 	mov [row_index], 0 
                                        (0091) .clear_lcd:	
0EB4: 51 2E    MOV   A,[pointer]        (0092) 	mov A, [row_index]
0EB6: 57 00    MOV   X,0x0              (0093) 	mov X, 0
0EB8: 7C 09 3D LCALL _LCD_Position      (0094) 	lcall LCD_Position
0EBB: 57 10    MOV   X,0x10             (0095) 	mov X, 16
                                        (0096) .clear_line:
0EBD: 10       PUSH  X                  (0097) 	push X
0EBE: 50 20    MOV   A,0x20             (0098) 	mov A, ' '
0EC0: 7C 08 12 LCALL LCD_WriteData|_LCD_Write_Data|LCD_Write_Data|_LCD_WriteData(0099) 	lcall LCD_WriteData
0EC3: 20       POP   X                  (0100) 	pop X
0EC4: 79       DEC   X                  (0101) 	dec X
0EC5: BF F7    JNZ   0x0EBD             (0102) 	jnz .clear_line
0EC7: 76 2E    INC   [pointer]          (0103) 	inc [row_index]
0EC9: 3C 2E 01 CMP   [pointer],0x1      (0104) 	cmp [row_index], 1
0ECC: AF E7    JZ    0x0EB4             (0105) 	jz .clear_lcd
                                        (0106) 
0ECE: 50 00    MOV   A,0x0              (0107) 	mov A, 0
0ED0: 57 00    MOV   X,0x0              (0108) 	mov X, 0
0ED2: 7C 09 3D LCALL _LCD_Position      (0109) 	lcall LCD_Position
                                        (0110) 	
0ED5: 50 0E    MOV   A,0xE              (0111) 	mov A, >DS_STR
0ED7: 57 65    MOV   X,0x65             (0112) 	mov X, <DS_STR
0ED9: 7C 07 CC LCALL _LCD_PrCString     (0113) 	lcall LCD_PrCString	
0EDC: 50 00    MOV   A,0x0              (0114) 	mov A, 0
0EDE: 57 1C    MOV   X,0x1C             (0115) 	mov X, ds1822Val
0EE0: 7C 08 08 LCALL _LCD_PrString      (0116) 	lcall LCD_PrString
                                        (0117) 	
0EE3: 50 01    MOV   A,0x1              (0118) 	mov A, 1
0EE5: 57 00    MOV   X,0x0              (0119) 	mov X, 0
0EE7: 7C 09 3D LCALL _LCD_Position      (0120) 	lcall LCD_Position
                                        (0121) 	
0EEA: 50 0E    MOV   A,0xE              (0122) 	mov A, >LM_STR
0EEC: 57 69    MOV   X,0x69             (0123) 	mov X, <LM_STR
0EEE: 7C 07 CC LCALL _LCD_PrCString     (0124) 	lcall LCD_PrCString
0EF1: 50 00    MOV   A,0x0              (0125) 	mov A, 0
0EF3: 57 25    MOV   X,0x25             (0126) 	mov X, lm35Val
0EF5: 7C 08 08 LCALL _LCD_PrString      (0127) 	lcall LCD_PrString
                                        (0128) 	
0EF8: 50 0E    MOV   A,0xE              (0129) 	mov A, >TC_STR
0EFA: 57 6D    MOV   X,0x6D             (0130) 	mov X, <TC_STR
0EFC: 7C 07 CC LCALL _LCD_PrCString     (0131) 	lcall LCD_PrCString
0EFF: 50 00    MOV   A,0x0              (0132) 	mov A, 0
0F01: 57 30    MOV   X,0x30             (0133) 	mov X, tc74Val
0F03: 7C 08 08 LCALL _LCD_PrString      (0134) 	lcall LCD_PrString
0F06: 7F       RET                      (0135) 	ret
                                        (0136) 	
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;  FUNCTION NAME: SendJSON
                                        (0139) ;
                                        (0140) ;  DESCRIPTION: Send the values of the 3 sensors in a formatted JSON string.
                                        (0141) ;				Multiple calls are alternating beween the constant parts and the
                                        (0142) ;				variables to avoid having to copy everything to RAM. 
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  ARGUMENTS: none
                                        (0145) ;  RETURNS: none	
                                        (0146) 	
                                        (0147) SendJSON:
0F07: 50 0D    MOV   A,0xD              (0148) 	mov A, >JSON_P1			; Send first segment of JSON ROM String
0F09: 57 FB    MOV   X,0xFB             (0149) 	mov X, <JSON_P1
0F0B: 7C 05 EB LCALL _UART_CPutString   (0150) 	lcall UART_CPutString
0F0E: 50 00    MOV   A,0x0              (0151) 	mov A, 0				; Send DS1822 value
0F10: 57 1C    MOV   X,0x1C             (0152) 	mov X, ds1822Val
0F12: 7C 05 A1 LCALL _UART_PutString    (0153) 	lcall UART_PutString	
0F15: 50 0E    MOV   A,0xE              (0154) 	mov A, >JSON_P2			; Send 2nd segment of JSON ROM String
0F17: 57 26    MOV   X,0x26             (0155) 	mov X, <JSON_P2
0F19: 7C 05 EB LCALL _UART_CPutString   (0156) 	lcall UART_CPutString	; Send LM35 value
0F1C: 50 00    MOV   A,0x0              (0157) 	mov A, 0
0F1E: 57 25    MOV   X,0x25             (0158) 	mov X, lm35Val
0F20: 7C 05 A1 LCALL _UART_PutString    (0159) 	lcall UART_PutString
0F23: 50 0E    MOV   A,0xE              (0160) 	mov A, >JSON_P3			; Send 3rd segment of JSON ROM String
0F25: 57 44    MOV   X,0x44             (0161) 	mov X, <JSON_P3
0F27: 7C 05 EB LCALL _UART_CPutString   (0162) 	lcall UART_CPutString	; Send TC74 value
0F2A: 50 00    MOV   A,0x0              (0163) 	mov A, 0		
0F2C: 57 30    MOV   X,0x30             (0164) 	mov X, tc74Val
0F2E: 7C 05 A1 LCALL _UART_PutString    (0165) 	lcall UART_PutString	
0F31: 50 0E    MOV   A,0xE              (0166) 	mov A, >JSON_P4			; Send 4th segment of JSON ROM String
0F33: 57 60    MOV   X,0x60             (0167) 	mov X, <JSON_P4
0F35: 7C 05 EB LCALL _UART_CPutString   (0168) 	lcall UART_CPutString
0F38: 7F       RET                      (0169) 	ret
                                        (0170) 	
                                        (0171) 	
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: StrCpy
                                        (0174) ;
                                        (0175) ;  DESCRIPTION: Copy null terminated string from ram at address [pointer+1] 
                                        (0176) ;				to ram at address [pointer]
                                        (0177) ;
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;
                                        (0180) ;  ARGUMENTS: Number of decimals to copy in X
                                        (0181) ;			(addresses in pointer & pointer+1)
                                        (0182) ;
                                        (0183) ;  RETURNS: none
                                        (0184) 	
                                        (0185) StrCpy::
                                        (0186) .copy_integer:
0F39: 3E 2F    MVI   A,[pointer+1]      (0187) 	mvi A, [pointer+1]			; Load value from ftoa pointer & increment it
0F3B: 3F 2E    MVI   [pointer],A        (0188) 	mvi [pointer], A			; Store value in ds1822Val buffer
0F3D: 39 00    CMP   A,0x0              (0189) 	cmp A, 0					; End if EOS
0F3F: A0 14    JZ    0x0F54             (0190) 	jz .end_StrCpy
0F41: 39 2E    CMP   A,0x2E             (0191) 	cmp A, '.'					; Continue to next loop when reaching a dot
0F43: BF F5    JNZ   StrCpy             (0192) 	jnz .copy_integer
                                        (0193) .copy_decimals:
0F45: 3E 2F    MVI   A,[pointer+1]      (0194) 	mvi A, [pointer+1]			; Load value from origin buffer pointer & increment it
0F47: 3F 2E    MVI   [pointer],A        (0195) 	mvi [pointer], A			; Store value in destination buffer
0F49: 39 00    CMP   A,0x0              (0196) 	cmp A, 0					; End if EOS
0F4B: A0 08    JZ    0x0F54             (0197) 	jz .end_StrCpy
0F4D: 79       DEC   X                  (0198) 	dec X						; Increase counter in X
0F4E: BF F6    JNZ   0x0F45             (0199) 	jnz .copy_decimals			; Loop until the specified number of decimals are copied
0F50: 50 00    MOV   A,0x0              (0200) 	mov A, 0
0F52: 3F 2E    MVI   [pointer],A        (0201) 	mvi [pointer], A			; Null terminate the string
                                        (0202) .end_StrCpy:
0F54: 7F       RET                      (0203) 	retFILE: .\tc74.asm                        (0001) ;----------------------------------------------------------------------------
                                        (0002) ; Exercise 3: Digital Communication
                                        (0003) ; File: tc74.asm
                                        (0004) ; =====================================
                                        (0005) ; Description: 
                                        (0006) ;
                                        (0007) ;
                                        (0008) ;
                                        (0009) ; Author: Jean-Philippe Lassonde #1504236
                                        (0010) ; Date: April 11th 2018
                                        (0011) ; Course: TX00CS03 - Sensors and Interfaces 
                                        (0012) ;----------------------------------------------------------------------------
                                        (0013) 
                                        (0014) include "PSoCAPI.inc" 
                                        (0015) 
                                        (0016) ; Aliases
                                        (0017) I2C_ADDR: 	equ 0x4A
                                        (0018) RTR: 		equ 0x00
                                        (0019) RWCR:		equ 0x01
                                        (0020) DR_MASK: 	equ 0x40
                                        (0021) 
                                        (0022) export tc74Val
                                        (0023) 
                                        (0024) area bss(ram,rel)
                                        (0025) tc74Val: 	blk 5	; String buffer for temperature value
                                        (0026) area text(rom,rel)
                                        (0027) 
                                        (0028) ; String format constant / ROM
                                        (0029) .LITERAL 
                                        (0030) STR_FORMAT:
                                        (0031) asciz "%d"
                                        (0032) .ENDLITERAL
                                        (0033) 
                                        (0034) 
                                        (0035) GetTC74::
                                        (0036) .wait_data_ready:
                                        (0037) ;---- Request read to config register	----
0F58: 50 01    MOV   A,0x1              (0038) 	mov A, RWCR 		; Request control register
0F5A: 90 2A    CALL  0x0F86             (0039) 	call .write_i2c
0F5C: 90 40    CALL  0x0F9E             (0040) 	call .read_i2c		; Get config reg val in A
0F5E: 21 40    AND   A,0x40             (0041) 	and A, DR_MASK		; Test Data Ready bit
0F60: AF F7    JZ    GetTC74            (0042) 	jz .wait_data_ready	; Repeat until data is ready
                                        (0043) 	
                                        (0044) ;---- Request read to temperature register ----
0F62: 50 00    MOV   A,0x0              (0045) 	mov A, RTR		; Set register to read (temp)
0F64: 90 20    CALL  0x0F86             (0046) 	call .write_i2c	
0F66: 90 36    CALL  0x0F9E             (0047) 	call .read_i2c	; Get temp in A
                                        (0048) 
                                        (0049) ; csprintf take 16 bit int. Check sign bit & push appropriate MSB
                                        (0050) 	
0F68: 39 80    CMP   A,0x80             (0051) 	cmp A, 0x80			; test sign bit
0F6A: D0 05    JNC   0x0F70             (0052) 	jnc .negative
0F6C: 57 00    MOV   X,0x0              (0053) 	mov X, 0x00
0F6E: 80 03    JMP   0x0F72             (0054) 	jmp .convert_to_str
                                        (0055) .negative:
0F70: 57 FF    MOV   X,0xFF             (0056) 	mov X, 0xFF
                                        (0057) .convert_to_str:
0F72: 10       PUSH  X                  (0058) 	push X
0F73: 08       PUSH  A                  (0059) 	push A
0F74: 50 0F    MOV   A,0xF              (0060) 	mov A, >STR_FORMAT
0F76: 08       PUSH  A                  (0061) 	push A
0F77: 50 55    MOV   A,0x55             (0062) 	mov A, <STR_FORMAT
0F79: 08       PUSH  A                  (0063) 	push A
0F7A: 50 00    MOV   A,0x0              (0064) 	mov A, >tc74Val
0F7C: 08       PUSH  A                  (0065) 	push A
0F7D: 50 30    MOV   A,0x30             (0066) 	mov A, <tc74Val
0F7F: 08       PUSH  A                  (0067) 	push A
0F80: 7C 39 61 LCALL _csprintf          (0068) 	lcall _csprintf
0F83: 38 FA    ADD   SP,0xFA            (0069) 	add SP, 0xFA	; Pop args off the stack
                                        (0070) 	
0F85: 7F       RET                      (0071) 	ret 			; Done
                                        (0072) 	
                                        (0073) 	
                                        (0074) 
                                        (0075) ; Register to read in A
                                        (0076) .write_i2c:
0F86: 4F       MOV   X,SP               (0077) 	mov X, SP
0F87: 38 01    ADD   SP,0x1             (0078) 	add SP, 1			; Allocate 1 byte on the stack (sData)
0F89: 54 00    MOV   [X+0],A            (0079) 	mov [X], A			; Set register to read
0F8B: 50 00    MOV   A,0x0              (0080) 	mov A, I2CM_CompleteXfer	; Set stop bit
0F8D: 08       PUSH  A                  (0081) 	push A
0F8E: 50 01    MOV   A,0x1              (0082) 	mov A, 0x01			; set number of bytes to write to 1
0F90: 08       PUSH  A                  (0083) 	push A
0F91: 50 00    MOV   A,0x0              (0084) 	mov A, 0			; Load the MSB of the sData pointer
0F93: 08       PUSH  A                  (0085) 	push A
0F94: 10       PUSH  X                  (0086) 	push X				; Push the LSB of sData pointer
0F95: 50 4A    MOV   A,0x4A             (0087) 	mov A, I2C_ADDR		
0F97: 08       PUSH  A                  (0088) 	push A 				; Push Slave address
0F98: 7C 0A 1A LCALL _I2CM_bWriteBytes  (0089) 	lcall _I2CM_bWriteBytes
0F9B: 38 FA    ADD   SP,0xFA            (0090) 	add SP, -6
0F9D: 7F       RET                      (0091) 	ret
                                        (0092) ; ---------------
                                        (0093) 
                                        (0094) ; ret value in A
                                        (0095) .read_i2c:
0F9E: 4F       MOV   X,SP               (0096) 	mov X, SP
0F9F: 38 01    ADD   SP,0x1             (0097) 	add SP, 1			; Allocate 1 byte on the stack (sData)
0FA1: 50 00    MOV   A,0x0              (0098) 	mov A, I2CM_CompleteXfer	; Complete transfer flag
0FA3: 08       PUSH  A                  (0099) 	push A
0FA4: 50 01    MOV   A,0x1              (0100) 	mov A, 0x01			; Set byte count to 1
0FA6: 08       PUSH  A                  (0101) 	push A
0FA7: 50 00    MOV   A,0x0              (0102) 	mov A, 0			; Load MSB of sData pointer 
0FA9: 08       PUSH  A                  (0103) 	push A
0FAA: 10       PUSH  X                  (0104) 	push X				; Push LSB of sData pointer
0FAB: 50 4A    MOV   A,0x4A             (0105) 	mov A, I2C_ADDR		; Push Slave address
0FAD: 08       PUSH  A                  (0106) 	push A
0FAE: 7C 09 8D LCALL _I2CM_fReadBytes   (0107) 	lcall _I2CM_fReadBytes
0FB1: 38 FB    ADD   SP,0xFB            (0108) 	add SP, -5
0FB3: 18       POP   A                  (0109) 	pop A 				; pop sData / Config register
0FB4: 7F       RET                      (0110) 	ret
