;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: OneWire_DS.asm
;;   Version: 1.1, Updated on 2015/3/4 at 22:26:45
;;  Generated by PSoC Designer 5.4.3191
;;
;;  DESCRIPTION: OneWire User Module software implementation file
;;
;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API function
;;        returns. For Large Memory Model devices it is also the caller's
;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;   Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "OneWire_DS.inc"

export  OneWire_DS_Start
export _OneWire_DS_Start
export  OneWire_DS_Stop
export _OneWire_DS_Stop

export  OneWire_DS_fReset
export _OneWire_DS_fReset
export  OneWire_DS_WriteBit
export _OneWire_DS_WriteBit
export  OneWire_DS_bReadBit
export _OneWire_DS_bReadBit
export  OneWire_DS_WriteByte
export _OneWire_DS_WriteByte
export  OneWire_DS_bReadByte
export _OneWire_DS_bReadByte
export  OneWire_DS_ClearCRC8
export _OneWire_DS_ClearCRC8
export  OneWire_DS_bCRC8
export _OneWire_DS_bCRC8

export  OneWire_DS_bCRC8Value
export _OneWire_DS_bCRC8Value
IF (OneWire_DS_CRC16_ENABLE)
export  OneWire_DS_ClearCRC16
export _OneWire_DS_ClearCRC16
export  OneWire_DS_wCRC16
export _OneWire_DS_wCRC16
export  OneWire_DS_wCRC16Value
export _OneWire_DS_wCRC16Value
ENDIF

IF (OneWire_DS_SEARCH_ENABLE)
export   OneWire_DS_GetROM
export  _OneWire_DS_GetROM
export   OneWire_DS_SetROM
export  _OneWire_DS_SetROM
export   OneWire_DS_fFindFirst
export  _OneWire_DS_fFindFirst
export   OneWire_DS_fFindNext
export  _OneWire_DS_fFindNext
export   OneWire_DS_fVerify
export  _OneWire_DS_fVerify
export   OneWire_DS_FamilyTargetSetup
export  _OneWire_DS_FamilyTargetSetup
export   OneWire_DS_FamilySkipSetup
export  _OneWire_DS_FamilySkipSetup
ENDIF

IF (OneWire_DS_OVERDRIVE_ENABLE)
export  OneWire_DS_SetOverdrive
export _OneWire_DS_SetOverdrive
export  OneWire_DS_ClearOverdrive
export _OneWire_DS_ClearOverdrive
ENDIF

IF (OneWire_DS_PARASITE_ENABLE)
export  OneWire_DS_WriteByteStrong
export _OneWire_DS_WriteByteStrong
export  OneWire_DS_SetResistive
export _OneWire_DS_SetResistive
ENDIF

AREA bss

_OneWire_DS_bCRC8Value:
 OneWire_DS_bCRC8Value:                          blk   1

IF (OneWire_DS_CRC16_ENABLE)
_OneWire_DS_wCRC16Value:
 OneWire_DS_wCRC16Value:                         blk   2
ENDIF

IF (OneWire_DS_SEARCH_ENABLE)
OneWire_DS_ROM:                                  blk   8
OneWire_DS_LastDiscrepancy:                      blk   1
OneWire_DS_LastFamilyDiscrepancy:                blk   1
OneWire_DS_LastDeviceFlag:                       blk   1
ENDIF

IF (OneWire_DS_OVERDRIVE_ENABLE )
OneWire_DS_bMode:                                blk   1
ENDIF

AREA UserModules (ROM, REL)

RESET_PATTERN:                          equ   F1h
ZERO_PATTERN:                           equ   01h
ONE_PATTERN:                            equ   FDh
INIT_PERIOD:                            equ   0Fh
RESET_PERIOD:                           equ   F9h      ;Divide by 250 (249+1)
BIT_PERIOD:                             equ   0Dh      ;Divide by 14 (13+1)
OD_RESET_PERIOD:                        equ   19h      ;Divide by 26 (25+1)
OD_BIT_PERIOD:                          equ   01h      ;Divide by 2 (1+1)

SPIM_SPI_COMPLETE:              equ 0x20    ;SPI Tx/Rx cycle has completed
SPIM_MODE_0:                   equ 0x00    ; MODE 0 - Leading edge latches data - pos clock
SPIM_LSB_FIRST:                equ 0x80    ; LSB bit transmitted/received first
CONTROL_REG_START_BIT:         equ 0x01    ; Control register start bit
INPUT_REG_NULL:                equ 0x00    ; Clear the input register
INPUT_REG_CLOCK_MASK:          equ 0x0F    ; Input register clock mask
OD_MODE:                       equ 0x01    ;OverDrive

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_Start
;
;  DESCRIPTION:
;     Enables the clock divider and tranceiver blocks.  Initializes the
;     OneWireOut pin to high.  Sets the clock divider period.
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16
;    functions.   Currently only the page pointer registers listed below are modified:
;       CUR_PP
;
;  THEORY of OPERATION:
;     Set the start bit in the Control register.
;-----------------------------------------------------------------------------
 OneWire_DS_Start:
_OneWire_DS_Start:
   RAM_PROLOGUE RAM_USE_CLASS_4

IF (OneWire_DS_OVERDRIVE_ENABLE)
    RAM_SETPAGE_CUR >OneWire_DS_bMode
    mov   [OneWire_DS_bMode], 00h
ENDIF
    mov   reg[OneWire_DS_BITCLK_PERIOD_REG], INIT_PERIOD     ; Set divider period to initialize OneWireOut
    or    reg[OneWire_DS_BITCLK_CONTROL_REG], CONTROL_REG_START_BIT  ; Start the clock divider
    mov   reg[OneWire_DS_XCVR_CONTROL_REG], SPIM_MODE_0|SPIM_LSB_FIRST|CONTROL_REG_START_BIT
    mov   A, FFh                                 ; Initialize OneWireOut to high
    call  OneWire_DS_SendTxDataWait
    mov   reg[OneWire_DS_BITCLK_PERIOD_REG], BIT_PERIOD

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_Stop
;
;  DESCRIPTION:
;     Disables BitClk and XCVR operation.
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.
;
;  THEORY of OPERATION:
;     Clear the start bits in the Control registers.
;-----------------------------------------------------------------------------
 OneWire_DS_Stop:
_OneWire_DS_Stop:
    RAM_PROLOGUE RAM_USE_CLASS_1

    and   reg[OneWire_DS_BITCLK_CONTROL_REG], ~CONTROL_REG_START_BIT
    and   reg[OneWire_DS_XCVR_CONTROL_REG], ~CONTROL_REG_START_BIT

    RAM_EPILOGUE RAM_USE_CLASS_1
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_fReset
;
;  DESCRIPTION:
;     Reset the OneWireOut pin
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     A = 01h if one or more devices responded.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions. Currently only the page pointer registers listed below
;    are modified: CUR_PP
;
;-----------------------------------------------------------------------------
 OneWire_DS_fReset:
_OneWire_DS_fReset:
    RAM_PROLOGUE RAM_USE_CLASS_4

IF (OneWire_DS_OVERDRIVE_ENABLE)
    RAM_SETPAGE_CUR >OneWire_DS_bMode
ENDIF
    mov   A, RESET_PERIOD                        ; Reset period
IF (OneWire_DS_OVERDRIVE_ENABLE)
    tst   [OneWire_DS_bMode],OD_MODE             ; Test for OverDrive mode
    jz    .Reset_Normal
    mov   reg[OneWire_DS_BITCLK_PERIOD_REG], OD_RESET_PERIOD  ; OverDrive Reset period
    mov   A, RESET_PATTERN                       ; Reset bit pattern
    call  OneWire_DS_SendTxDataWait
    mov   A, OD_BIT_PERIOD                       ; OverDrive Bit period
    jmp   .Reset_WriteBitPeriod
ENDIF
.Reset_Normal:
    mov   reg[OneWire_DS_BITCLK_PERIOD_REG], A
    mov   A, RESET_PATTERN                       ; Reset bit pattern
    call  OneWire_DS_SendTxDataWait
    mov   A, BIT_PERIOD                          ; Bit period
.Reset_WriteBitPeriod:
    mov   reg[OneWire_DS_BITCLK_PERIOD_REG], A
    mov   A, reg[OneWire_DS_XCVR_RX_BUFFER_REG]
    cmp   A, RESET_PATTERN
    jnc   .Reset_NoResponse
    mov   A,01h
    jmp   .Reset_done
.Reset_NoResponse:
    mov   A,00h
.Reset_done:

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_WriteBit
;
;  DESCRIPTION:
;     Write a bit to the OneWireOut pin.
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     A  => less significant bit is output to OneWireOut pin
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.
;
;-----------------------------------------------------------------------------
 OneWire_DS_WriteBit:
_OneWire_DS_WriteBit:
    RAM_PROLOGUE RAM_USE_CLASS_1

    rrc   A                                      ; Rotate LSB into CF to test
    jc    .WriteBit_1                            ; LSB is 1
    mov   A, ZERO_PATTERN                        ; "0" bit pattern
    jmp   .WriteBit_Send
.WriteBit_1:
    mov   A, ONE_PATTERN                         ; "1" bit pattern
.WriteBit_Send:
    call  OneWire_DS_SendTxDataWait

    RAM_EPILOGUE RAM_USE_CLASS_1
    ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_bReadBit
;
;  DESCRIPTION:
;     Read the OneWireIn pin
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     the less significant bit of A returns value read from OneWire pin.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.
;
;-----------------------------------------------------------------------------
 OneWire_DS_bReadBit:
_OneWire_DS_bReadBit:
    RAM_PROLOGUE RAM_USE_CLASS_1

    mov    A, ONE_PATTERN
    call   OneWire_DS_SendTxDataWait
    mov    A, reg[OneWire_DS_XCVR_RX_BUFFER_REG]
    cmp    A, ONE_PATTERN
    jnc    .ReadBit_One
    mov    A, 00h
    jmp    .Done
.ReadBit_One:
    mov    A, 01h
.Done:

    RAM_EPILOGUE RAM_USE_CLASS_1
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_WriteByte
;
;  DESCRIPTION:
;     Write a byte to the OneWireOut pin
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     A => byte output to the OneWireOut pin
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.
;
;-----------------------------------------------------------------------------
 OneWire_DS_WriteByte:
_OneWire_DS_WriteByte:
    RAM_PROLOGUE RAM_USE_CLASS_1

    push   A
    mov    X, 08h
.ByteLoop:
    pop    A
    rrc    A
    push   A
    jc     .LoadPattern_1
    mov    A, ZERO_PATTERN
    jmp    .SendPattern
.LoadPattern_1:
    mov    A, ONE_PATTERN
.SendPattern:
	mov    reg[OneWire_DS_XCVR_TX_BUFFER_REG], A
.WaitForEmptyBuf:
    mov    A, reg[OneWire_DS_XCVR_CONTROL_REG]
    and    A, SPIM_SPI_COMPLETE
    jz     .WaitForEmptyBuf
    dec    X
    jnz    .ByteLoop
    pop    A

    RAM_EPILOGUE RAM_USE_CLASS_1
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_bReadByte
;
;  DESCRIPTION:
;     Read a byte from the OneWireIn pin
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     A returns byte read from OneWireIn pin.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16
;    functions.
;
;-----------------------------------------------------------------------------
 OneWire_DS_bReadByte:
_OneWire_DS_bReadByte:
    RAM_PROLOGUE RAM_USE_CLASS_1

    push   A
    mov    X,08h
.ByteLoop:
    mov    A, ONE_PATTERN
    call   OneWire_DS_SendTxDataWait
    mov    A, reg[OneWire_DS_XCVR_RX_BUFFER_REG]
    cmp    A, ONE_PATTERN
    pop    A
    rrc    A
    push   A
    dec    X
    jnz    .ByteLoop
    pop    A
	cpl    A
    RAM_EPILOGUE RAM_USE_CLASS_1

    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_ClearCRC8
;
;  DESCRIPTION:
;     Clear the CRC8 RAM location
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.   Currently only the page pointer registers listed below are modified:
;    CUR_PP
;
;-----------------------------------------------------------------------------
 OneWire_DS_ClearCRC8:
_OneWire_DS_ClearCRC8:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value

    mov   [OneWire_DS_bCRC8Value], 00h

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_bCRC8
;
;  DESCRIPTION:
;     CRC for One Wire
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     A contains the byte to CRC.
;
;  RETURNS:
;     A contains current CRC value.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions. Currently only the page pointer registers listed below are modified:
;     CUR_PP
;-----------------------------------------------------------------------------
 OneWire_DS_bCRC8:
_OneWire_DS_bCRC8:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value

    push  A                                      ; Save the bits to shift
    mov   X, 08h                                 ; Set up to shift one byte
.OW_crc8_loop:
    xor   A, [OneWire_DS_bCRC8Value]             ; Determine feedback
    rrc   A                                      ; Move it into CF
    jnc   .OW_crc8_FB_zero                       ; If feedback is 0, no XOR of the byte needed
    xor   [OneWire_DS_bCRC8Value],18h            ; XOR the CRC byte
.OW_crc8_FB_zero:
    rrc   [OneWire_DS_bCRC8Value]                ; Rotate CF into the CRC byte
    pop   A                                      ; Restore the remaining bits
    rrc   A                                      ; Rotate for the next bit
    push  A                                      ; Save the remaining bits
    dec   X                                      
    jnz   .OW_crc8_loop                          ; Loop until whole input byte is shifted
    pop   A                                      ; Clean up stack
    mov   A, [OneWire_DS_bCRC8Value]             ; Load computed CRC byte into A

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

IF (OneWire_DS_CRC16_ENABLE)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_ClearCRC16
;
;  DESCRIPTION:
;     Clear the CRC16 RAM locations
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions. Currently only the page pointer registers listed below are modified:
;     CUR_PP
;
;-----------------------------------------------------------------------------
 OneWire_DS_ClearCRC16:
_OneWire_DS_ClearCRC16:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_SETPAGE_CUR >OneWire_DS_wCRC16Value

    mov   [OneWire_DS_wCRC16Value+0],00h
    mov   [OneWire_DS_wCRC16Value+1],00h

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_wCRC16
;
;  DESCRIPTION:
;     CRC-16 for One Wire
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     A contains the byte to CRC.
;
;  RETURNS:
;     A contains current CRC LO byte value.
;     X contains current CRC HI byte value.
;     This returns as an unsigned integer in C.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;     CUR_PP
;
;-----------------------------------------------------------------------------
 OneWire_DS_wCRC16:
_OneWire_DS_wCRC16:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_SETPAGE_CUR >OneWire_DS_wCRC16Value

    push  A                                      ; Save the bits to shift
    mov   X,08h                                  ; Set up to shift one byte
.CRC16_loop:
    xor   A,[OneWire_DS_wCRC16Value+1]           ; Determine feedback
    rrc   A                                      ; Move it into CF
    jnc   .CRC16_FB_zero                         ; If feedback is 0, no XOR of the byte needed
    xor   [OneWire_DS_wCRC16Value+0],40h         ; XOR the CRC HI byte
    xor   [OneWire_DS_wCRC16Value+1],02h         ; XOR the CRC LO byte
.CRC16_FB_zero:
    rrc   [OneWire_DS_wCRC16Value+0]             ; Rotate CF into the CRC HI byte
    rrc   [OneWire_DS_wCRC16Value+1]             ; Rotate CF into the CRC LO byte
    pop   A                                      ; Restore the remaining bits
    rrc   A                                      ; Rotate for the next bit
    push  A                                      ; Save the remaining bits
    dec   X
    jnz   .CRC16_loop                            ; Loop until whole input byte is shifted
    pop   A                                      ; Clean up stack
    mov   X,[OneWire_DS_wCRC16Value+0]           ; Load computed CRC HI byte into X
    mov   A,[OneWire_DS_wCRC16Value+1]           ; Load computed CRC LO byte into A

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION
ENDIF

IF (OneWire_DS_SEARCH_ENABLE)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_GetROM
;
;  DESCRIPTION:
;     Takes the RAM defined for holding a 64-bit 1-Wire ROM number and
;     passes it via a pointer in A and X.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     A:X - contains pointer
;       X - contains LSB of the pointer to the RAM buffer
;       A - contains MSB or page of the pointer to the RAM buffer
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;     CUR_PP
;     IDX_PP
;-----------------------------------------------------------------------------
 OneWire_DS_GetROM:
_OneWire_DS_GetROM:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_PROLOGUE RAM_USE_CLASS_3
    RAM_SETPAGE_IDX A
    RAM_SETPAGE_CUR >OneWire_DS_ROM

    mov    A,[OneWire_DS_ROM+0]
    mov    [X+0],A
    mov    A,[OneWire_DS_ROM+1]
    mov    [X+1],A
    mov    A,[OneWire_DS_ROM+2]
    mov    [X+2],A
    mov    A,[OneWire_DS_ROM+3]
    mov    [X+3],A
    mov    A,[OneWire_DS_ROM+4]
    mov    [X+4],A
    mov    A,[OneWire_DS_ROM+5]
    mov    [X+5],A
    mov    A,[OneWire_DS_ROM+6]
    mov    [X+6],A
    mov    A,[OneWire_DS_ROM+7]
    mov    [X+7],A

    RAM_EPILOGUE RAM_USE_CLASS_3
    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_SetROM
;
;  DESCRIPTION:
;     Takes the array passed via a pointer in A and X and puts it
;     into the RAM defined for holding a 64-bit 1-Wire ROM number.
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     A:X - contains pointer
;       X - contains LSB of the pointer to the RAM buffer
;       A - contains MSB or page of the pointer to the RAM buffer
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;     CUR_PP
;     IDX_PP
;-----------------------------------------------------------------------------
 OneWire_DS_SetROM:
_OneWire_DS_SetROM:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_PROLOGUE RAM_USE_CLASS_3
    RAM_SETPAGE_IDX A
    RAM_SETPAGE_CUR >OneWire_DS_ROM

    mov    A,[X+0]
    mov    [OneWire_DS_ROM+0], A
    mov    A,[X+1]
    mov    [OneWire_DS_ROM+1], A
    mov    A,[X+2]
    mov    [OneWire_DS_ROM+2], A
    mov    A,[X+3]
    mov    [OneWire_DS_ROM+3], A
    mov    A,[X+4]
    mov    [OneWire_DS_ROM+4], A
    mov    A,[X+5]
    mov    [OneWire_DS_ROM+5], A
    mov    A,[X+6]
    mov    [OneWire_DS_ROM+6], A
    mov    A,[X+7]
    mov    [OneWire_DS_ROM+7], A

    RAM_EPILOGUE RAM_USE_CLASS_3
    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_fFindFirst
;
;  DESCRIPTION:
;     Find the first device on the 1-Wire bus.
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     A = 01h if device found
;     A = 00h if device not found
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;    CUR_PP
;    IDX_PP
;-----------------------------------------------------------------------------
 OneWire_DS_fFindFirst:
_OneWire_DS_fFindFirst:
    RAM_PROLOGUE RAM_USE_CLASS_4

    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   [OneWire_DS_LastDiscrepancy], 00h
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   [OneWire_DS_LastDeviceFlag], 00h
    RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
    mov   [OneWire_DS_LastFamilyDiscrepancy], 00h
    call  OneWire_DS_Search

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_fFindNext
;
;  DESCRIPTION:
;     Find the first device on the 1-Wire bus.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     none.
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     A = 01h if device found
;     A = 00h if device not found, end of search
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;    CUR_PP
;    IDX_PP
;-----------------------------------------------------------------------------
 OneWire_DS_fFindNext:
_OneWire_DS_fFindNext:
    RAM_PROLOGUE RAM_USE_CLASS_4

    call  OneWire_DS_Search

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_Search
;
;  DESCRIPTION:
;     Perform the 1-Wire search algorithm with the current search state.
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     A = 01h if device found
;     A = 00h if device not found, end of search
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16
;    functions. Currently only the page pointer registers listed below are modified:
;    CUR_PP
;    IDX_PP
;-----------------------------------------------------------------------------
ID_BIT_NUMBER:              equ   0
LAST_ZERO:                  equ   1
ROM_BYTE_NUMBER:            equ   2
SEARCH_RESULT:              equ   3
ID_BIT:                     equ   4
CMP_ID_BIT:                 equ   5
ROM_BYTE_MASK:              equ   6
SEARCH_DIRECTION:           equ   7

 OneWire_DS_Search:
_OneWire_DS_Search:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_PROLOGUE RAM_USE_CLASS_3

    mov   X,SP                                   ; Get location of stack
    add   SP,08h                                 ; Make locations for local variables
    RAM_SETPAGE_IDX2STK
    mov   [X+ID_BIT_NUMBER],01h                  ; Initialize for search
    mov   [X+LAST_ZERO],00h
    mov   [X+ROM_BYTE_NUMBER],00h
    mov   [X+ROM_BYTE_MASK],01h
    mov   [X+SEARCH_RESULT],00h
    RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value
    mov   [OneWire_DS_bCRC8Value],00h
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   A,[OneWire_DS_LastDeviceFlag]
    jnz   .check_result
    call  OneWire_DS_fReset
    jz    .search_return_false

    mov   A,F0h                                  ; Search command
    push  X
    call  OneWire_DS_WriteByte
    pop   X
.search_loop:
    call  OneWire_DS_bReadBit
    mov   [X+ID_BIT],A
    call  OneWire_DS_bReadBit
    mov   [X+CMP_ID_BIT],A
    and   A,01h
    and   A,[X+ID_BIT]
    jnz   .check_search

.search_else_1:
    mov   A,[X+ID_BIT]                           ; If ID_BIT != CMP_ID_BIT
    cmp   A,[X+CMP_ID_BIT]
    jz    .search_else_2
    mov   A,[X+ID_BIT]
    mov   [X+SEARCH_DIRECTION],A
    jmp   .search_set_or_clear
.search_else_2:
    mov   A,[X+ID_BIT_NUMBER]
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    cmp   A,[OneWire_DS_LastDiscrepancy]
    jnc   .search_else_3
    push  X
    mov   X,[X+ROM_BYTE_NUMBER]
    RAM_SETPAGE_IDX >OneWire_DS_ROM
    mov   A,[X+OneWire_DS_ROM]
    RAM_SETPAGE_IDX2STK
    pop   X
    and   A,[X+ROM_BYTE_MASK]
    jnz   .search_dir_1
    mov   [X+SEARCH_DIRECTION],00h
    jmp   .search_is_dir_0
.search_dir_1:
    mov   [X+SEARCH_DIRECTION],01h
    jmp   .search_is_dir_0
.search_else_3:
    mov   A,[X+ID_BIT_NUMBER]
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    cmp   A,[OneWire_DS_LastDiscrepancy]         ;SEARCH_DIRECTION = (ID_BIT_NUMBER == LastDiscrepancy search_direction)
    jnz   .search_dir_1_2
    mov   [X+SEARCH_DIRECTION],01h
    jmp   .search_is_dir_0
.search_dir_1_2:
    mov   [X+SEARCH_DIRECTION],00h
.search_is_dir_0:
    mov   A,[X+SEARCH_DIRECTION]
    jnz   .search_set_or_clear
    mov   A,[X+ID_BIT_NUMBER]
    mov   [X+LAST_ZERO],A
    cmp   A,09h
    jnc   .search_set_or_clear
    mov   A,[X+LAST_ZERO]
    RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
    mov   [OneWire_DS_LastFamilyDiscrepancy],A
.search_set_or_clear:
    cmp   [X+SEARCH_DIRECTION],01h
    jnz   .search_else_4
    mov   A,[X+ROM_BYTE_MASK]
    push  X
    mov   X,[X+ROM_BYTE_NUMBER]
    RAM_SETPAGE_IDX >OneWire_DS_ROM
    or    [X+OneWire_DS_ROM],A
    RAM_SETPAGE_IDX2STK
    pop   X
    jmp   .search_write_direction
.search_else_4:
    mov   A,[X+ROM_BYTE_MASK]
    push  X
    mov   X,[X+ROM_BYTE_NUMBER]
    cpl   A
    RAM_SETPAGE_IDX >OneWire_DS_ROM
    and   [X+OneWire_DS_ROM],A
    RAM_SETPAGE_IDX2STK
    pop   X
.search_write_direction:
    mov   A,[X+SEARCH_DIRECTION]
    call  OneWire_DS_WriteBit
    inc   [X+ID_BIT_NUMBER]
    asl   [X+ROM_BYTE_MASK]
    cmp   [X+ROM_BYTE_MASK],00h
    jnz   .check_if_loop
    push  X
    mov   X,[X+ROM_BYTE_NUMBER]
    RAM_SETPAGE_IDX >OneWire_DS_ROM
    mov   A,[X+OneWire_DS_ROM]
    RAM_SETPAGE_IDX2STK
    call  OneWire_DS_bCRC8
    RAM_PROLOGUE RAM_USE_CLASS_4
    pop   X
    inc   [X+ROM_BYTE_NUMBER]
    mov   [X+ROM_BYTE_MASK],01h
.check_if_loop:
    cmp   [X+ROM_BYTE_NUMBER],08h
    jc    .search_loop
.check_search:
    cmp   [X+ID_BIT_NUMBER],41h
    jc    .check_result
    RAM_SETPAGE_CUR >OneWire_DS_bCRC8Value
    cmp   [OneWire_DS_bCRC8Value],00h
    jnz   .check_result
    mov   A,[X+LAST_ZERO]
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   [OneWire_DS_LastDiscrepancy],A
    jnz   .search_not_last
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   [OneWire_DS_LastDeviceFlag],01h
.search_not_last:
    mov   [X+SEARCH_RESULT],01h
; If no device found then reset counter so next search will be like a first
.check_result:
    mov   A,[X+SEARCH_RESULT]
    jz    .search_return_false
    RAM_SETPAGE_CUR >OneWire_DS_ROM
    mov   A,[OneWire_DS_ROM+0]
    jz    .search_return_false
.search_return_true:
    mov   A,01h
    jmp   .search_clean_up
.search_return_false:
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   [OneWire_DS_LastDiscrepancy],00h
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   [OneWire_DS_LastDeviceFlag],00h
    RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
    mov   [OneWire_DS_LastFamilyDiscrepancy],00h
    mov   A,00h
.search_clean_up:
    add   SP,-08h                                ; Restore SP

    RAM_EPILOGUE RAM_USE_CLASS_3
    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_fVerify
;
;  DESCRIPTION:
;     Verify the device with the ROM number in OneWire_DS_ROM is present.
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     A = 01h if device found
;     A = 00h if device not found
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16
;    functions. Currently only the page pointer registers listed below are modified:
;    CUR_PP, IDX_PP
;-----------------------------------------------------------------------------
ROM_BACKUP:                 equ   0
LD_BACKUP:                  equ   8
LDF_BACKUP:                 equ   9
LFD_BACKUP:                 equ   0x0A

 OneWire_DS_fVerify:
_OneWire_DS_fVerify:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_PROLOGUE RAM_USE_CLASS_3

    mov   X, SP                                  ; Get location of stack
    add   SP, 0Bh                                ; Make locations for local variables
IF ( SYSTEM_LARGE_MEMORY_MODEL )
    mov   A, reg[STK_PP]                         ; Set A to right page to back up ROM to stack
ELSE
    mov   A, 00h
ENDIF
    call  OneWire_DS_GetROM
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_PROLOGUE RAM_USE_CLASS_3
    RAM_SETPAGE_IDX2STK
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   A,[OneWire_DS_LastDiscrepancy]
    mov   [X+LD_BACKUP],A
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   A,[OneWire_DS_LastDeviceFlag]
    mov   [X+LDF_BACKUP],A
    RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
    mov   A,[OneWire_DS_LastFamilyDiscrepancy]
    mov   [X+LFD_BACKUP],A
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   [OneWire_DS_LastDiscrepancy],40h
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   [OneWire_DS_LastDeviceFlag],00h
    push  X                                      ; Search does not preserve X
    call  OneWire_DS_Search
    pop   X
    push  A                                      ; Save result
    RAM_X_POINTS_TO_INDEXPAGE
    jz    .Verify_End
    RAM_SETPAGE_IDX2STK
    RAM_SETPAGE_CUR >OneWire_DS_ROM
    mov   A,[OneWire_DS_ROM+0]
    cmp   A,[X+ROM_BACKUP]
    jnz   .Verify_Fail
    mov   A,[OneWire_DS_ROM+1]
    cmp   A,[X+ROM_BACKUP+1]
    jnz   .Verify_Fail
    mov   A,[OneWire_DS_ROM+2]
    cmp   A,[X+ROM_BACKUP+2]
    jnz   .Verify_Fail
    mov   A,[OneWire_DS_ROM+3]
    cmp   A,[X+ROM_BACKUP+3]
    jnz   .Verify_Fail
    mov   A,[OneWire_DS_ROM+4]
    cmp   A,[X+ROM_BACKUP+4]
    jnz   .Verify_Fail
    mov   A,[OneWire_DS_ROM+5]
    cmp   A,[X+ROM_BACKUP+5]
    jnz   .Verify_Fail
    mov   A,[OneWire_DS_ROM+6]
    cmp   A,[X+ROM_BACKUP+6]
    jnz   .Verify_Fail
    mov   A,[OneWire_DS_ROM+7]
    cmp   A,[X+ROM_BACKUP+7]
    jz    .Verify_End
.Verify_Fail:
    pop   A                                      ; Replace result
    mov   A,00h
    push  A
.Verify_End:
IF ( SYSTEM_LARGE_MEMORY_MODEL )
    mov   A, reg[STK_PP]                         ; Set A to right page to recover ROM from stack
ELSE
    mov   A, 00h
ENDIF
    call  OneWire_DS_SetROM
    RAM_X_POINTS_TO_INDEXPAGE
    RAM_SETPAGE_IDX2STK
    mov   A, [X+LD_BACKUP]
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   [OneWire_DS_LastDiscrepancy], A
    mov   A, [X+LDF_BACKUP]
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   [OneWire_DS_LastDeviceFlag], A
    mov   A, [X+LFD_BACKUP]
    RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
    mov   [OneWire_DS_LastFamilyDiscrepancy], A
    pop   A                                      ; Restore result
    add   SP, -0Bh                               ; Restore SP

    RAM_EPILOGUE RAM_USE_CLASS_3
    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_FamilyTargetSetup
;
;  DESCRIPTION:
;     Setup the search to find the device type family code on the next call
;     to OneWire_DS_Next().
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     A contains family code.
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;    CUR_PP
;    IDX_PP
;-----------------------------------------------------------------------------
 OneWire_DS_FamilyTargetSetup:
_OneWire_DS_FamilyTargetSetup:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_PROLOGUE RAM_USE_CLASS_3
    RAM_SETPAGE_CUR >OneWire_DS_ROM
    RAM_SETPAGE_IDX >OneWire_DS_ROM

    mov   [OneWire_DS_ROM+0], A
    push  X
    mov   X, 07h
.loop:
    mov   [X+OneWire_DS_ROM], 00h
    dec   X
    jnz   .loop
    pop   X
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   [OneWire_DS_LastDiscrepancy], 40h
    RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
    mov   [OneWire_DS_LastFamilyDiscrepancy], 00h
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   [OneWire_DS_LastDeviceFlag], 00h

    RAM_EPILOGUE RAM_USE_CLASS_3
    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_FamilySkipSetup
;
;  DESCRIPTION:
;     Setup the search to skip the current device type on the next call
;     to OneWire_DS_fFindNext().
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     None.
;
;  RAM BUFFER CONTENTS:
;     OneWire_DS_ROM = ROM number of 1-Wire device
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;     CUR_PP
;-----------------------------------------------------------------------------
 OneWire_DS_FamilySkipSetup:
_OneWire_DS_FamilySkipSetup:
    RAM_PROLOGUE RAM_USE_CLASS_4

    RAM_SETPAGE_CUR >OneWire_DS_LastFamilyDiscrepancy
    mov   A,[OneWire_DS_LastFamilyDiscrepancy]
    mov   [OneWire_DS_LastFamilyDiscrepancy],00h
    RAM_SETPAGE_CUR >OneWire_DS_LastDiscrepancy
    mov   [OneWire_DS_LastDiscrepancy],A
    jnz   .EndOfList
    RAM_SETPAGE_CUR >OneWire_DS_LastDeviceFlag
    mov   [OneWire_DS_LastDeviceFlag],01h
.EndOfList:

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION
ENDIF

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_SendTxDataWait
;
;  DESCRIPTION:
;     Initiates an XCVR data transfer and waits for it to complete.
;
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     BYTE  bTxData - data to transmit.
;        Passed in Accumulator.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.
;
;  THEORY of OPERATION:
;     Writes data to the TX buffer register.
;-----------------------------------------------------------------------------
 OneWire_DS_SendTxDataWait:
_OneWire_DS_SendTxDataWait:
    RAM_PROLOGUE RAM_USE_CLASS_1

    mov    reg[OneWire_DS_XCVR_TX_BUFFER_REG], A
.WaitForTxComplete:
    mov    A,  reg[OneWire_DS_XCVR_CONTROL_REG]
    and    A, SPIM_SPI_COMPLETE
    jz     .WaitForTxComplete

    RAM_EPILOGUE RAM_USE_CLASS_1
    ret
.ENDSECTION

IF (OneWire_DS_OVERDRIVE_ENABLE)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_SetOverdrive
;
;  DESCRIPTION:
;     Set OverDrive speed
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;     CUR_PP
;-----------------------------------------------------------------------------
 OneWire_DS_SetOverdrive:
_OneWire_DS_SetOverdrive:
    RAM_PROLOGUE RAM_USE_CLASS_4

    RAM_SETPAGE_CUR >OneWire_DS_bMode
    or    [OneWire_DS_bMode],OD_MODE
    mov   reg[OneWire_DS_BITCLK_PERIOD_REG], BIT_PERIOD                        ; OverDrive Bit period

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_ClearOverdrive
;
;  DESCRIPTION:
;     Clear OverDrive speed
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;     CUR_PP
;-----------------------------------------------------------------------------
 OneWire_DS_ClearOverdrive:
_OneWire_DS_ClearOverdrive:
    RAM_PROLOGUE RAM_USE_CLASS_4
    RAM_SETPAGE_CUR >OneWire_DS_bMode

    and   [OneWire_DS_bMode],~OD_MODE
	mov   reg[OneWire_DS_BITCLK_PERIOD_REG], BIT_PERIOD

    RAM_EPILOGUE RAM_USE_CLASS_4
    ret
.ENDSECTION

ENDIF

IF (OneWire_DS_PARASITE_ENABLE)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_WriteByteStrong
;
;  DESCRIPTION:
;     Write a byte to the OneWireOut pin, and set the interrupt to change the
;     port to strong mode immediately after write is complete
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     A => byte output to the OneWireOut pin
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.  Currently only the page pointer registers listed below are modified:
;     CUR_PP
;-----------------------------------------------------------------------------
 OneWire_DS_WriteByteStrong:
_OneWire_DS_WriteByteStrong:
    RAM_PROLOGUE RAM_USE_CLASS_1
    
    push  A                                      ; Save byte to write on stack
    mov   X, 07h                                 ; Set up loop for writing bits
.Write_ByteStrong_loop:
    call  OneWire_DS_WriteBit                    ; Output LSB of A, bits 0-6
    pop   A                                      ; Restore A
    rrc   A                                      ; Rotate A for the next bit
    push  A                                      ; Save remaining bits
    dec   X
    jnz   .Write_ByteStrong_loop                 ; Loop until the whole byte is output
    M8C_ClearIntFlag OneWire_DS_BIT_INT_CLR, OneWire_DS_BIT_INT_MASK  ; Clear the interrupt
    M8C_EnableIntMask OneWire_DS_BIT_INT_REG, OneWire_DS_BIT_INT_MASK ; enable interrupt
    call  OneWire_DS_WriteBit                    ; Output LSB of A, bit 7
    M8C_DisableIntMask OneWire_DS_BIT_INT_REG, OneWire_DS_BIT_INT_MASK ; disable interrupt
    pop   A                                      ; Clean up stack

    RAM_EPILOGUE RAM_USE_CLASS_1
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: OneWire_DS_SetResistive
;
;  DESCRIPTION:
;     Set port back to resistive pull-up
;-----------------------------------------------------------------------------
;  ARGUMENTS:
;     none.
;
;  RETURNS:
;     none.
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to preserve their values across calls to fastcall16
;    functions.
;-----------------------------------------------------------------------------
 OneWire_DS_SetResistive:
_OneWire_DS_SetResistive:
    RAM_PROLOGUE RAM_USE_CLASS_1

    M8C_SetBank1
    or    reg[OneWire_DS_OUT_PORT_DM1],OneWire_DS_OUT_PORT_MASK
    M8C_SetBank0

    RAM_EPILOGUE RAM_USE_CLASS_1
    ret
.ENDSECTION

ENDIF
