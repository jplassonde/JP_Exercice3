//*****************************************************************************
//*****************************************************************************
//  FILENAME: OneWire_1.h
//   Version: 1.1, Updated on 2015/3/4 at 22:26:45
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: OneWire User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef OneWire_1_INCLUDE
#define OneWire_1_INCLUDE

#include <m8c.h>

#define OneWire_1_CRC16_ENABLE 0
#define OneWire_1_SEARCH_ENABLE 0
#define OneWire_1_OVERDRIVE_ENABLE 0
#define OneWire_1_PARASITE_ENABLE 0

#pragma fastcall16  OneWire_1_Start
#pragma fastcall16  OneWire_1_Stop

#pragma fastcall16  OneWire_1_fReset
#pragma fastcall16  OneWire_1_WriteBit
#pragma fastcall16  OneWire_1_bReadBit
#pragma fastcall16  OneWire_1_WriteByte
#pragma fastcall16  OneWire_1_bReadByte
#pragma fastcall16  OneWire_1_ClearCRC8
#pragma fastcall16  OneWire_1_bCRC8

#if ( OneWire_1_CRC16_ENABLE )
#pragma fastcall16  OneWire_1_ClearCRC16
#pragma fastcall16  OneWire_1_wCRC16
#endif

#if ( OneWire_1_SEARCH_ENABLE )
#pragma fastcall16  OneWire_1_GetROM
#pragma fastcall16  OneWire_1_SetROM
#pragma fastcall16  OneWire_1_fFindFirst
#pragma fastcall16  OneWire_1_fFindNext
#pragma fastcall16  OneWire_1_fVerify
#pragma fastcall16  OneWire_1_FamilyTargetSetup
#pragma fastcall16  OneWire_1_FamilySkipSetup
#endif

#if ( OneWire_1_OVERDRIVE_ENABLE )
#pragma fastcall16  OneWire_1_SetOverdrive
#pragma fastcall16  OneWire_1_ClearOverdrive
#endif

#if ( OneWire_1_PARASITE_ENABLE )
#pragma fastcall16  OneWire_1_WriteByteStrong
#pragma fastcall16  OneWire_1_SetResistive
#endif

extern void  OneWire_1_Start(void);
extern void  OneWire_1_Stop(void);

extern BYTE  OneWire_1_fReset(void);
extern void  OneWire_1_WriteBit(BYTE bData);
extern BYTE  OneWire_1_bReadBit(void);
extern void  OneWire_1_WriteByte(BYTE bData);
extern BYTE  OneWire_1_bReadByte(void);
extern void  OneWire_1_ClearCRC8(void);
extern BYTE  OneWire_1_bCRC8(BYTE bData);

#if ( OneWire_1_CRC16_ENABLE )
extern void  OneWire_1_ClearCRC16(void);
extern WORD  OneWire_1_wCRC16Value(BYTE bData);
#endif

#if ( OneWire_1_SEARCH_ENABLE )
extern void  OneWire_1_GetROM(BYTE * pbArray);
extern void  OneWire_1_SetROM(BYTE * pbArray);
extern BYTE  OneWire_1_fFindFirst(void);
extern BYTE  OneWire_1_fFindNext(void);
extern BYTE  OneWire_1_fVerify(void);
extern void  OneWire_1_FamilyTargetSetup(BYTE bFamilyType);
extern void  OneWire_1_FamilySkipSetup(void);
#endif

#if ( OneWire_1_OVERDRIVE_ENABLE )
extern void  OneWire_1_SetOverdrive(void);
extern void  OneWire_1_ClearOverdrive(void);
#endif

#if ( OneWire_1_PARASITE_ENABLE )
extern void  OneWire_1_WriteByteStrong(BYTE bData);
extern void  OneWire_1_SetResistive(void);
#endif


/************************************************
*  Interrupt registers and masks
*************************************************/
#define OneWire_1_BIT_INT_MASK                   ( 0x04 )
#define OneWire_1_BIT_INT_REG                    ( 0x0e1 )

#if ( OneWire_1_BIT_INT_REG - INT_MSK2)
#define OneWire_1_BIT_INT_CLR                     ( INT_CLR1 )
#else
#define OneWire_1_BIT_INT_CLR                     ( INT_CLR2 )
#endif

/************************************************
*  Hardware Register Definitions
*************************************************/
#pragma ioport  OneWire_1_BITCLK_CONTROL_REG:   0x027      //Control register
BYTE            OneWire_1_BITCLK_CONTROL_REG;
#pragma ioport  OneWire_1_BITCLK_COUNTER_REG:   0x024      //Counter register
BYTE            OneWire_1_BITCLK_COUNTER_REG;
#pragma ioport  OneWire_1_BITCLK_PERIOD_REG:    0x025      //Period value register
BYTE            OneWire_1_BITCLK_PERIOD_REG;
#pragma ioport  OneWire_1_BITCLK_COMPARE_REG:   0x026      //CompareValue register
BYTE            OneWire_1_BITCLK_COMPARE_REG;
#pragma ioport  OneWire_1_BITCLK_FUNC_REG:  0x124          //Function register
BYTE            OneWire_1_BITCLK_FUNC_REG;
#pragma ioport  OneWire_1_BITCLK_INPUT_REG: 0x125          //Input register
BYTE            OneWire_1_BITCLK_INPUT_REG;
#pragma ioport  OneWire_1_BITCLK_OUTPUT_REG:    0x126      //Output register
BYTE            OneWire_1_BITCLK_OUTPUT_REG;

#pragma ioport  OneWire_1_XCVR_CONTROL_REG: 0x02b          //Control register
BYTE            OneWire_1_XCVR_CONTROL_REG;
#pragma ioport  OneWire_1_XCVR_SHIFT_REG:   0x028          //TX Shift Register register
BYTE            OneWire_1_XCVR_SHIFT_REG;
#pragma ioport  OneWire_1_XCVR_TX_BUFFER_REG:   0x029      //TX Buffer Register
BYTE            OneWire_1_XCVR_TX_BUFFER_REG;
#pragma ioport  OneWire_1_XCVR_RX_BUFFER_REG:   0x02a      //RX Buffer Register
BYTE            OneWire_1_XCVR_RX_BUFFER_REG;
#pragma ioport  OneWire_1_XCVR_FUNC_REG:    0x128          //Function register
BYTE            OneWire_1_XCVR_FUNC_REG;
#pragma ioport  OneWire_1_XCVR_INPUT_REG:   0x129          //Input register
BYTE            OneWire_1_XCVR_INPUT_REG;
#pragma ioport  OneWire_1_XCVR_OUTPUT_REG:  0x12a          //Output register
BYTE            OneWire_1_XCVR_OUTPUT_REG;

#endif
// end of file
